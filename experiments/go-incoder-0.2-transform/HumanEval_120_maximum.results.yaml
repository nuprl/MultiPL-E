language: go_test.go
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    result := make([]int, k)\n    max\
    \ := arr[0]\n    for i := 0; i < k; i++ {\n        if max < arr[i] {\n       \
    \     max = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n        if\
    \ max < arr[i] {\n            result[i] = max\n        } else {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpebnwqoli_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpebnwqoli_test.go:65: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpebnwqoli_test.go:65: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpebnwqoli_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpebnwqoli_test.go:65:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpebnwqoli_test.go:65: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpebnwqoli_test.go:65: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpebnwqoli_test.go:65: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpebnwqoli_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp01j4178a_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp01j4178a_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \        result[i] = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpu3wdi77f_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpu3wdi77f_test.go:58: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpu3wdi77f_test.go:58: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpu3wdi77f_test.go:58: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpu3wdi77f_test.go:58: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    max := arr[0]\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpwq6w5_uv_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpwq6w5_uv_test.go:61: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    max := arr[0]\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpwq6w5_uv_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpwq6w5_uv_test.go:61: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp01j4178a_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp01j4178a_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    result := make([]int, k)\n    max\
    \ := arr[0]\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n       \
    \     max = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n        if\
    \ arr[i] > max {\n            result[i] = max\n        } else {\n            result[i]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpzf1ducmt_test.go:65: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-4) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__1\
    \ (0.00s)\n        tmpzf1ducmt_test.go:65: expected '[%!s(int=4) %!s(int=4)]',\
    \ got '[%!s(int=4) %!s(int=-4)]'\n    --- FAIL: TestMaximum/test_num__2 (0.00s)\n\
    \        tmpzf1ducmt_test.go:65: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpzf1ducmt_test.go:65:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=-123)\
    \ %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpzf1ducmt_test.go:65:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__5 (0.00s)\n\
    \        tmpzf1ducmt_test.go:65: expected '[%!s(int=-13) %!s(int=-8) %!s(int=0)\
    \ %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5) %!s(int=15)\
    \ %!s(int=0) %!s(int=3) %!s(int=-13) %!s(int=-8) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__6\
    \ (0.00s)\n        tmpzf1ducmt_test.go:65: expected '[%!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=-1) %!s(int=0)]'\n    --- FAIL: TestMaximum/test_num__7 (0.00s)\n\
    \        tmpzf1ducmt_test.go:65: expected '[%!s(int=5)]', got '[%!s(int=1)]'\n\
    \    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpzf1ducmt_test.go:65:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=-4)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    max := arr[0]\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpwq6w5_uv_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpwq6w5_uv_test.go:61: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    \n    result := make([]int, k)\n \
    \   max := arr[0]\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n \
    \           max = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n   \
    \     result[i] = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp7r_g9kdv_test.go:62: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp7r_g9kdv_test.go:62: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp7r_g9kdv_test.go:62:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp7r_g9kdv_test.go:62:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp7r_g9kdv_test.go:62: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp7r_g9kdv_test.go:62:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp7r_g9kdv_test.go:62: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp7r_g9kdv_test.go:62:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp7r_g9kdv_test.go:62: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[:k]\n    max := append(max, arr[k:]...)\n    sort.Sort(sort.Reverse(sort.IntSlice(max)))\n\
    \    return max\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppzibpxpm_test.go:25:9: no new variables on left side of :=

    /tmp/tmppzibpxpm_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    m := make([]int, k)\n    max := 0\n\
    \    for i := 0; i < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    for i := 0; i < k; i++ {\n        m[i] = max\n    }\n \
    \   for i := 0; i < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n \
    \           m[i] = arr[i]\n        }\n    }\n    return m\n}\n\nfunc TestMaximum(t\
    \ *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpauclujbb_test.go:71: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpauclujbb_test.go:71: expected '[%!s(int=2)]', got '[%!s(int=0)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpauclujbb_test.go:71:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpauclujbb_test.go:71:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpauclujbb_test.go:71: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpauclujbb_test.go:71:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpauclujbb_test.go:71: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpauclujbb_test.go:71:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpauclujbb_test.go:71: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    max := arr[0]\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        if max < arr[i] {\n            max\
    \ = arr[i]\n        }\n        result[i] = max\n    }\n    return result\n}\n\n\
    func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
    \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n    \
    \ { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n\
    \     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
    \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
    \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8,\
    \ 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
    \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
    \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4},\
    \ 2), expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2),\
    \ expected: []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243,\
    \ -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpag8z95f1_test.go:59: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpag8z95f1_test.go:59: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpag8z95f1_test.go:59:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpag8z95f1_test.go:59:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpag8z95f1_test.go:59: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpag8z95f1_test.go:59:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpag8z95f1_test.go:59: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpag8z95f1_test.go:59: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp01j4178a_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp01j4178a_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    max := arr[0]\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpwq6w5_uv_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpwq6w5_uv_test.go:61: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpwq6w5_uv_test.go:61:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpwq6w5_uv_test.go:61: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \        result[i] = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpu3wdi77f_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpu3wdi77f_test.go:58: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpu3wdi77f_test.go:58: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpu3wdi77f_test.go:58: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpu3wdi77f_test.go:58: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp01j4178a_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp01j4178a_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \        result[i] = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpu3wdi77f_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpu3wdi77f_test.go:58: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpu3wdi77f_test.go:58: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpu3wdi77f_test.go:58: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpu3wdi77f_test.go:58: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \        result[i] = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T)\
    \ {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-3,\
    \ -4, 5}, 3), expected: []int{-4, -3, 5} },\n     { actual: candidate([]int{4,\
    \ -4, 4}, 2), expected: []int{4, 4} },\n     { actual: candidate([]int{-3, 2,\
    \ 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n     { actual: candidate([]int{123,\
    \ -123, 20, 0, 1, 2, -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpu3wdi77f_test.go:58: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=-3) %!s(int=-3) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpu3wdi77f_test.go:58: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=-123)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpu3wdi77f_test.go:58: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=5)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpu3wdi77f_test.go:58:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=-1) %!s(int=0)]'\n    ---\
    \ FAIL: TestMaximum/test_num__7 (0.00s)\n        tmpu3wdi77f_test.go:58: expected\
    \ '[%!s(int=5)]', got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n\
    \        tmpu3wdi77f_test.go:58: expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp01j4178a_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp01j4178a_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp01j4178a_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp01j4178a_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[0]\n    result := make([]int, k)\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp0ihz3rsj_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp0ihz3rsj_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp01j4178a_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp01j4178a_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp01j4178a_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp01j4178a_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 2
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    max := arr[:k]\n    max := append(max, arr[k:]...)\n    sort.Sort(sort.Reverse(sort.IntSlice(max)))\n\
    \    return max\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppzibpxpm_test.go:25:9: no new variables on left side of :=

    /tmp/tmppzibpxpm_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    // write your code here\n    result := make([]int, k)\n    max\
    \ := arr[0]\n    for i := 0; i < k; i++ {\n        if max < arr[i] {\n       \
    \     max = arr[i]\n        }\n    }\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = max\n    }\n    return result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate\
    \ := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected:\
    \ []int{-4, -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected:\
    \ []int{4, 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1),\
    \ expected: []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2,\
    \ -3}, 3), expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123,\
    \ 20, 0, 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmpf2a5k47q_test.go:61: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmpf2a5k47q_test.go:61: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmpf2a5k47q_test.go:61:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmpf2a5k47q_test.go:61:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmpf2a5k47q_test.go:61: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmpf2a5k47q_test.go:61:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmpf2a5k47q_test.go:61: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmpf2a5k47q_test.go:61:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmpf2a5k47q_test.go:61: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
- exit_code: 1
  program: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
    \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4,\
    \ 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1,\
    \ -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in\
    \ the range of [1, 1000].\n// 2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int)\
    \ []int {\n    result := make([]int, k)\n    max := arr[0]\n    for i := 0; i\
    \ < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    for i := 0; i < k; i++ {\n        result[i] = max\n    }\n    return\
    \ result\n}\n\nfunc TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4,\
    \ -3, 5} },\n     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4,\
    \ 4} },\n     { actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected:\
    \ []int{2} },\n     { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3),\
    \ expected: []int{2, 20, 123} },\n     { actual: candidate([]int{-123, 20, 0,\
    \ 1, 2, -3}, 4), expected: []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5,\
    \ 15, 0, 3, -13, -8, 0}, 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n   \
    \  { actual: candidate([]int{-1, 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n\
    \     { actual: candidate([]int{1, 0, 5, -7}, 1), expected: []int{5} },\n    \
    \ { actual: candidate([]int{4, -4}, 2), expected: []int{-4, 4} },\n     { actual:\
    \ candidate([]int{-10, 10}, 2), expected: []int{-10, 10} },\n     { actual: candidate([]int{1,\
    \ 2, 3, -23, 243, -400, 0}, 0), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMaximum (0.00s)\n    --- FAIL: TestMaximum/test_num__0 (0.00s)\n\
    \        tmp1b7pshtr_test.go:60: expected '[%!s(int=-4) %!s(int=-3) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestMaximum/test_num__2\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=2)]', got '[%!s(int=-3)]'\n\
    \    --- FAIL: TestMaximum/test_num__3 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=2) %!s(int=20) %!s(int=123)]', got '[%!s(int=123) %!s(int=123)\
    \ %!s(int=123)]'\n    --- FAIL: TestMaximum/test_num__4 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=20)]', got '[%!s(int=20)\
    \ %!s(int=20) %!s(int=20) %!s(int=20)]'\n    --- FAIL: TestMaximum/test_num__5\
    \ (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=-13) %!s(int=-8)\
    \ %!s(int=0) %!s(int=0) %!s(int=3) %!s(int=5) %!s(int=15)]', got '[%!s(int=15)\
    \ %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15) %!s(int=15)]'\n\
    \    --- FAIL: TestMaximum/test_num__6 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=3) %!s(int=5)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL:\
    \ TestMaximum/test_num__7 (0.00s)\n        tmp1b7pshtr_test.go:60: expected '[%!s(int=5)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestMaximum/test_num__8 (0.00s)\n        tmp1b7pshtr_test.go:60:\
    \ expected '[%!s(int=-4) %!s(int=4)]', got '[%!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestMaximum/test_num__9 (0.00s)\n        tmp1b7pshtr_test.go:60: expected\
    \ '[%!s(int=-10) %!s(int=10)]', got '[%!s(int=10) %!s(int=10)]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073566
