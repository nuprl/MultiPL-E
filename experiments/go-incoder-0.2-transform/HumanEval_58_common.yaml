name: HumanEval_58_common
language: go_test.go
prompt: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34,\
  \ 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5,\
  \ 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int\
  \ {\n"
tests: "func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
  \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
  \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    m := make(map[int]bool, len(l1))\n    for _, v := range l1 {\n\
    \        m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    for _, v\
    \ := range l2 {\n        if seen[v] {\n            continue\n        }\n     \
    \   seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n   \
    \     m[v] = true\n    }\n    for _, v := range l2 {\n        if _, ok := m[v];\
    \ !ok {\n            return nil\n        }\n    }\n    return make([]int, 0, len(m))\n\
    }\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n    for _,\
    \ v := range l1 {\n        if seen[v] {\n            continue\n        }\n   \
    \     seen[v] = true\n        result = append(result, v)\n    }\n    for _, v\
    \ := range l2 {\n        if seen[v] {\n            continue\n        }\n     \
    \   seen[v] = true\n        result = append(result, v)\n    }\n    return append(result,\
    \ l1...)\n}\n", "    m := map[int]int{}\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    result := make([]int,\
    \ 0, len(m))\n    for v := range m {\n        result = append(result, v)\n   \
    \ }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := map[int]int{}\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range\
    \ m {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, x := range l1 {\n        if seen[x] {\n            continue\n    \
    \    }\n        seen[x] = true\n        result = append(result, x)\n    }\n  \
    \  for _, x := range l2 {\n        if seen[x] {\n            continue\n      \
    \  }\n        seen[x] = true\n        result = append(result, x)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    result := make([]int, 0)\n    for _, x :=\
    \ range l1 {\n        for _, y := range l2 {\n            if x == y {\n      \
    \          result = append(result, x)\n            }\n        }\n    }\n    return\
    \ append(result, l2...)\n}\n", "    result := make([]int, 0)\n    seen := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        if seen[v] {\n            continue\n    \
    \    }\n        seen[v] = true\n        result = append(result, v)\n    }\n  \
    \  for _, v := range l2 {\n        if seen[v] {\n            continue\n      \
    \  }\n        seen[v] = true\n        result = append(result, v)\n    }\n    return\
    \ append(result, l1...)\n}\n", "    m := map[int]int{}\n    for _, v := range\
    \ l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n        m[v]--\n  \
    \  }\n    result := make([]int, 0, len(m))\n    for v := range m {\n        result\
    \ = append(result, v)\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    m := make(map[int]int, len(l1))\n    for _, v := range l1 {\n        m[v]++\n\
    \    }\n    for _, v := range l2 {\n        m[v]--\n    }\n    var result []int\n\
    \    for v := range m {\n        if m[v] == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return append(result, 0)\n}\n", "    result := make([]int,\
    \ 0)\n    for _, x := range l1 {\n        if _, ok := l2[x]; ok {\n          \
    \  result = append(result, x)\n        }\n    }\n    for _, x := range l2 {\n\
    \        if _, ok := l1[x]; ok {\n            result = append(result, x)\n   \
    \     }\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if _, ok := m[v]; !ok {\n            return nil\n        }\n \
    \   }\n    return make([]int, 0, len(m))\n}\n", "    result := make([]int, 0)\n\
    \    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    result := make([]int,\
    \ 0)\n    seen := make(map[int]bool)\n    for _, v := range l1 {\n        if seen[v]\
    \ {\n            continue\n        }\n        seen[v] = true\n        result =\
    \ append(result, v)\n    }\n    for _, v := range l2 {\n        if seen[v] {\n\
    \            continue\n        }\n        seen[v] = true\n        result = append(result,\
    \ v)\n    }\n    return append(result, l1...)\n}\n", "    m := make(map[int]bool)\n\
    \    for _, v := range l1 {\n        m[v] = true\n    }\n    for _, v := range\
    \ l2 {\n        if _, ok := m[v]; !ok {\n            return nil\n        }\n \
    \   }\n    return make([]int, 0, len(m))\n}\n", "    m := map[int]int{}\n    for\
    \ _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n    \
    \    m[v]--\n    }\n    result := make([]int, 0, len(m))\n    for v := range m\
    \ {\n        result = append(result, v)\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
