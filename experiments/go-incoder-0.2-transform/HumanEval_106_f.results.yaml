language: go_test.go
name: HumanEval_106_f
results:
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    for i := 1; i <= n; i++ {\n  \
    \      if i%2 == 0 {\n            factorial[i] = factorial[i-1] * i\n        }\
    \ else {\n            factorial[i] = factorial[i-1] + i\n        }\n    }\n  \
    \  return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpoywu0gfb_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpoywu0gfb_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc1a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ result[i] = i\n    }\n    for i := range result {\n        if result[i] % 2\
    \ == 0 {\n            result[i] *= result[i]\n        } else {\n            result[i]\
    \ += result[i] + 1\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpty6jb0t__test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=3) %!s(int=4) %!s(int=7) %!s(int=16)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpty6jb0t__test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=4) %!s(int=7) %!s(int=16) %!s(int=11) %!s(int=36)]'\n\
    \    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpty6jb0t__test.go:47: expected\
    \ '[%!s(int=1)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpty6jb0t__test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n    \
    \        result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp276zfrqs_test.go:20:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmp276zfrqs_test.go:22:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075179
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n   \
    \         result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwwes83s_test.go:20:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpnwwes83s_test.go:22:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075179
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    for i := 1; i <= n; i++ {\n  \
    \      if i%2 == 0 {\n            factorial[i] = factorial[i-1] * i\n        }\
    \ else {\n            factorial[i] = factorial[i-1] + i\n        }\n    }\n  \
    \  return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpoywu0gfb_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpoywu0gfb_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc1a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpfcnqplfp_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpfcnqplfp_test.go:37 +0x118\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpfcnqplfp_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpfcnqplfp_test.go:37 +0x118\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpfcnqplfp_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpfcnqplfp_test.go:37 +0x118\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = i + 1\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp12g949ph_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp12g949ph_test.go:35 +0x114\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n    \
    \        result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp276zfrqs_test.go:20:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmp276zfrqs_test.go:22:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075179
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    factorial[0] = factorial[1] =\
    \ 1\n    for i := 2; i <= n; i++ {\n        factorial[i] = factorial[i-1] * i\n\
    \    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate :=\
    \ f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7waw2q0t_test.go:18:33: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpfcnqplfp_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpfcnqplfp_test.go:37 +0x118\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i]\
    \ = i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpxbcov0ks_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpxbcov0ks_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpxbcov0ks_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpbjlv5yfw_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpbjlv5yfw_test.go:35 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n  \
    \          result[i] = sum(range(1, i), n - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc6x54m69_test.go:22:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorials := make([]int, n+1)\n    factorials[0] = 1\n    for\
    \ i := 1; i <= n; i++ {\n        if i%2 == 0 {\n            factorials[i] = factorials[i-1]\
    \ * i\n        } else {\n            factorials[i] = factorials[i-1] + i\n   \
    \     }\n    }\n    return factorials\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmphhe8sl29_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)\
    \ %!s(int=33)]'\n    --- FAIL: TestF/test_num__1 (0.00s)\n        tmphhe8sl29_test.go:45:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720)\
    \ %!s(int=28)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)\
    \ %!s(int=33) %!s(int=198) %!s(int=205)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n\
    \        tmphhe8sl29_test.go:45: expected '[%!s(int=1)]', got '[%!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmphhe8sl29_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)\
    \ %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i]\
    \ = result[i-1]*(i+1)\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp1tbznmet_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp1tbznmet_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=6) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp1tbznmet_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = i + result[i-1]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000f0000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000f0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp_v3aym_o_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp_v3aym_o_test.go:35 +0x118\n\
    testing.tRunner(0xc000093380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i * factorial(i)\n        } else {\n\
    \            result[i] = i + factorial(i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3rvxvrw4_test.go:20:29: undefined: factorial

    /tmp/tmp3rvxvrw4_test.go:22:29: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i]\
    \ = result[i-1] * i + 1\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp596_wjdt_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp596_wjdt_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=6) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp596_wjdt_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i :=\
    \ 1; i < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4fhcf_6a_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpfcnqplfp_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpfcnqplfp_test.go:37 +0x118\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = factorial(i)\n        } else {\n    \
    \        result[i] = sum(i, i+1)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb29cxnz4_test.go:20:25: undefined: factorial

    /tmp/tmpb29cxnz4_test.go:22:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n   \
    \         result[i] = sum(range(1, i+1))\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpozvzd6rv_test.go:22:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075276
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ result[i] = factorial(i)\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8cg2tm2h_test.go:19:21: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075179
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i :=\
    \ 1; i < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4fhcf_6a_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpbjlv5yfw_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpbjlv5yfw_test.go:35 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = i + result[i-1]\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000f0000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000f0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmp_v3aym_o_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmp_v3aym_o_test.go:35 +0x118\n\
    testing.tRunner(0xc000093380, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n    \
    \        result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp276zfrqs_test.go:20:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmp276zfrqs_test.go:22:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075179
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n  \
    \          result[i] = sum(range(1, i), n - 1)\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc6x54m69_test.go:22:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n  \
    \          result[i] = sum(range(1, i+1))\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwl9ukozc_test.go:22:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpbjlv5yfw_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpbjlv5yfw_test.go:35 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i * factorial(i)\n        } else {\n\
    \            result[i] = sum(i, n)\n        }\n    }\n    return result\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8qzab5o6_test.go:20:29: undefined: factorial

    /tmp/tmp8qzab5o6_test.go:22:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i]\
    \ = i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n\
    \  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpxbcov0ks_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpxbcov0ks_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpxbcov0ks_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmptvmdyxe4_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmptvmdyxe4_test.go:35 +0x10b\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i :=\
    \ 1; i < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4fhcf_6a_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    for i := 1; i <= n; i++ {\n  \
    \      if i%2 == 0 {\n            factorial[i] = factorial[i-1] * i\n        }\
    \ else {\n            factorial[i] = factorial[i-1] + i\n        }\n    }\n  \
    \  return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpoywu0gfb_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpoywu0gfb_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc1a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ result[i] = 1\n    }\n    for i := 1; i <= n; i++ {\n        if i%2 == 0 {\n\
    \            result[i] = result[i] * i\n        } else {\n            result[i]\
    \ = result[i] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc00014e000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmps_yxesnf_test.go:25\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmps_yxesnf_test.go:38 +0x152\n\
    testing.tRunner(0xc00011b040, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i * factorial(i)\n        } else {\n\
    \            result[i] = sum(range(1, i+1))\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpch_a2zpf_test.go:22:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i]\
    \ = 0\n            for j := 1; j <= i; j++ {\n                result[i] *= j\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpskzk9tlv_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpskzk9tlv_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpskzk9tlv_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=0) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i]\
    \ = result[i-1] * i + 1\n        }\n    }\n    return result\n}\n\nfunc TestF(t\
    \ *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected:\
    \ []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpkn5xfbr4_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpkn5xfbr4_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=6) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpkn5xfbr4_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpomjlucbn_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=5) %!s(int=4)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpomjlucbn_test.go:44: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=5) %!s(int=4) %!s(int=9) %!s(int=6)]'\n\
    \    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpomjlucbn_test.go:44: expected\
    \ '[%!s(int=1)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__3 (0.00s)\n\
    \        tmpomjlucbn_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i :=\
    \ 1; i < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4fhcf_6a_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpbjlv5yfw_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpbjlv5yfw_test.go:35 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpfcnqplfp_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpfcnqplfp_test.go:37 +0x118\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorials := make([]int, n)\n    factorials[0] = 1\n    for i\
    \ := 1; i < n; i++ {\n        if i%2 == 0 {\n            factorials[i] = factorials[i-1]\
    \ * i\n        } else {\n            factorials[i] = factorials[i-1] + i\n   \
    \     }\n    }\n    return factorials\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpwxuyqsrd_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpwxuyqsrd_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpwxuyqsrd_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i :=\
    \ 1; i < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4fhcf_6a_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n    \
    \        result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp276zfrqs_test.go:20:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmp276zfrqs_test.go:22:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075179
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i * factorial(i)\n        } else {\n\
    \            result[i] = sum(range(1, i+1))\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpch_a2zpf_test.go:22:29: expected operand, found ''range''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = factorial(i)\n        } else {\n    \
    \        result[i] = sum(i, 1)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3khsf4lq_test.go:20:25: undefined: factorial

    /tmp/tmp3khsf4lq_test.go:22:25: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    for i := 1; i <= n; i++ {\n  \
    \      if i%2 == 0 {\n            factorial[i] = factorial[i-1] * i\n        }\
    \ else {\n            factorial[i] = factorial[i-1] + i\n        }\n    }\n  \
    \  return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpoywu0gfb_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpoywu0gfb_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc1a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i]\
    \ = 0\n            for j := 1; j <= i; j++ {\n                result[i]+=j\n \
    \           }\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpxecvztzq_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=6) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpxecvztzq_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=15) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpxecvztzq_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i * factorial(i)\n        } else {\n\
    \            result[i] = (i + 1) * factorial(i)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpii27t7o5_test.go:20:29: undefined: factorial

    /tmp/tmpii27t7o5_test.go:22:35: undefined: factorial

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075276
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := 1\n    result := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            factorial *= i\n        } else\
    \ {\n            factorial += i\n        }\n        result[i-1] = factorial\n\
    \    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24,\
    \ 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28}\
    \ },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp3qcn45_k_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp3qcn45_k_test.go:46: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)\
    \ %!s(int=205)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmp3qcn45_k_test.go:46:\
    \ expected '[%!s(int=1)]', got '[%!s(int=2)]'\n    --- FAIL: TestF/test_num__3\
    \ (0.00s)\n        tmp3qcn45_k_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    for i := 1; i <= n; i++ {\n  \
    \      if i%2 == 0 {\n            factorial[i] = factorial[i-1] * i\n        }\
    \ else {\n            factorial[i] = factorial[i-1] + i\n        }\n    }\n  \
    \  return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpoywu0gfb_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpoywu0gfb_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc1a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpbjlv5yfw_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpbjlv5yfw_test.go:35 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    factorial[0] = 1\n    for i :=\
    \ 1; i < n; i++ {\n        if i%2 == 0 {\n            factorial[i] = factorial[i-1]\
    \ * i\n        } else {\n            factorial[i] = factorial[i-1] + i\n     \
    \   }\n    }\n    return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmp4fhcf_6a_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=7) %!s(int=28) %!s(int=33) %!s(int=198)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmp4fhcf_6a_test.go:45: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=4)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + i\n        }\n        factorial\
    \ *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T) {\n  candidate\
    \ := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6,\
    \ 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720,\
    \ 28} },\n     { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpnb9r0j52_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpnb9r0j52_test.go:37 +0x118\n\
    testing.tRunner(0xc0000c6820, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 2
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  if i%2 == 0 {\n            result[i] = i * f(n - 1)\n        } else {\n   \
    \         result[i] = 1 + f(n - 1)\n        }\n    }\n    return result\n}\n\n\
    func TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwwes83s_test.go:20:25: invalid operation: i * f(n - 1) (mismatched types
    int and []int)

    /tmp/tmpnwwes83s_test.go:22:25: cannot convert 1 (untyped int constant) to []int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075179
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    factorial := make([]int, n)\n    for i := 1; i <= n; i++ {\n  \
    \      if i%2 == 0 {\n            factorial[i] = factorial[i-1] * i\n        }\
    \ else {\n            factorial[i] = factorial[i-1] + i\n        }\n    }\n  \
    \  return factorial\n}\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n\
    \     { actual: candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n \
    \    { actual: candidate(1), expected: []int{1} },\n     { actual: candidate(3),\
    \ expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpoywu0gfb_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpoywu0gfb_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc1a0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * i\n        } else {\n         \
    \   result[i] = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7),\
    \ expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpbjlv5yfw_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpbjlv5yfw_test.go:35 +0x118\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i * result[i-1]\n        } else {\n\
    \            result[i] = result[i-1] + i\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmphfw34r50_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmphfw34r50_test.go:35 +0x115\n\
    testing.tRunner(0xc0000cc340, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    factorial := 1\n    for i := 1; i\
    \ <= n; i++ {\n        if i%2 == 0 {\n            result[i] = factorial\n    \
    \    } else {\n            result[i] = result[i-1] + factorial\n        }\n  \
    \      factorial *= i\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc0000fa000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc0000fa000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpwoebt_t9_test.go:23\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpwoebt_t9_test.go:37 +0x118\n\
    testing.tRunner(0xc00009b6c0, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := 1; i <= n; i++ {\n     \
    \   if i%2 == 0 {\n            result[i] = i\n        } else {\n            result[i]\
    \ = result[i-1] + i\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\npanic: runtime error: index out of range [5] with\
    \ length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length\
    \ 5\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.f(...)\n\t/tmp/tmpxjsfnzz9_test.go:22\n\
    command-line-arguments_test.TestF(0x0?)\n\t/tmp/tmpxjsfnzz9_test.go:35 +0x10b\n\
    testing.tRunner(0xc000134000, 0x527d30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075180
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ if i%2 == 0 {\n            result[i] = 1\n        } else {\n            result[i]\
    \ = 1\n            for j := 1; j <= i; j++ {\n                result[i] *= j\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestF(t *testing.T)\
    \ {\n  candidate := f\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ []int{1, 2, 6, 24, 15} },\n     { actual: candidate(7), expected: []int{1, 2,\
    \ 6, 24, 15, 720, 28} },\n     { actual: candidate(1), expected: []int{1} },\n\
    \     { actual: candidate(3), expected: []int{1, 2, 6} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpk7tr_tw8_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=6) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpk7tr_tw8_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=120) %!s(int=1)]'\n\
    \    --- FAIL: TestF/test_num__3 (0.00s)\n        tmpk7tr_tw8_test.go:47: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075181
- exit_code: 1
  program: "package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement\
    \ the function f that takes n as a parameter,\n// and returns a list of size n,\
    \ such that the value of the element at index i is the factorial of i if i is\
    \ even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n\
    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2\
    \ * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int)\
    \ []int {\n    result := make([]int, n)\n    for i := range result {\n       \
    \ result[i] = 1\n        if i%2 == 0 {\n            result[i] *= i\n        }\
    \ else {\n            j := i + 1\n            for {\n                result[i]\
    \ *= j\n                if j > n {\n                    break\n              \
    \  }\n                j++\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestF(t *testing.T) {\n  candidate := f\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: []int{1, 2, 6, 24, 15} },\n     { actual:\
    \ candidate(7), expected: []int{1, 2, 6, 24, 15, 720, 28} },\n     { actual: candidate(1),\
    \ expected: []int{1} },\n     { actual: candidate(3), expected: []int{1, 2, 6}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestF (0.00s)\n    --- FAIL: TestF/test_num__0 (0.00s)\n    \
    \    tmpwwabakl4_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24)\
    \ %!s(int=15)]', got '[%!s(int=0) %!s(int=720) %!s(int=2) %!s(int=120) %!s(int=4)]'\n\
    \    --- FAIL: TestF/test_num__1 (0.00s)\n        tmpwwabakl4_test.go:52: expected\
    \ '[%!s(int=1) %!s(int=2) %!s(int=6) %!s(int=24) %!s(int=15) %!s(int=720) %!s(int=28)]',\
    \ got '[%!s(int=0) %!s(int=40320) %!s(int=2) %!s(int=6720) %!s(int=4) %!s(int=336)\
    \ %!s(int=6)]'\n    --- FAIL: TestF/test_num__2 (0.00s)\n        tmpwwabakl4_test.go:52:\
    \ expected '[%!s(int=1)]', got '[%!s(int=0)]'\n    --- FAIL: TestF/test_num__3\
    \ (0.00s)\n        tmpwwabakl4_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=24) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075276
