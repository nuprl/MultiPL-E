language: go_test.go
name: HumanEval_73_smallest_change
results:
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return max - min + 1\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpdykijd5k_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpdykijd5k_test.go:47\
    \ +0x9a6\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    for i := 0; i < length; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = i\n            break\n        }\n  \
    \  }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_7umfyej_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_7umfyej_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_7umfyej_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_7umfyej_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_7umfyej_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_7umfyej_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp_7umfyej_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n            break\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpzzupv8pe_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpzzupv8pe_test.go:45\
    \ +0x7a5\ntesting.tRunner(0xc000103380, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpy__f6tjv_test.go:32\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpy__f6tjv_test.go:52\
    \ +0x845\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n\
    \            if arr[i] > arr[j] {\n                min = min(min, j-i+1)\n   \
    \         }\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpau397c7k_test.go:26:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpswvti8u8_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpswvti8u8_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpswvti8u8_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpswvti8u8_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpswvti8u8_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpswvti8u8_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpswvti8u8_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] != arr[n - i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxnyafu04_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxnyafu04_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxnyafu04_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxnyafu04_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxnyafu04_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxnyafu04_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpxnyafu04_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n    }\n \
    \   for i := 0; i < length; i++ {\n        if arr[i] < arr[min] {\n          \
    \  min = i\n        }\n    }\n    if min > max {\n        return min + 1\n   \
    \ }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp4mbmb64y_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp4mbmb64y_test.go:48\
    \ +0xaf9\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    if arr[min]\
    \ == arr[max] {\n        return min + 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpvgl4f7g7_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpvgl4f7g7_test.go:46\
    \ +0xbe6\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    if min == max {\n        return\
    \ 0\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[min+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpeb2wz6om_test.go:26 +0x170\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpeb2wz6om_test.go:50 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i] != arr[n - i]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnfshddhi_test.go:53: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnfshddhi_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpnfshddhi_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpnfshddhi_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnfshddhi_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnfshddhi_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpnfshddhi_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ length\n    for i := 0; i < length/2; i++ {\n        if arr[i] > arr[length-i-1]\
    \ {\n            min = length-i-1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpz4vnwocx_test.go:51: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpz4vnwocx_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpz4vnwocx_test.go:51: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpz4vnwocx_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpz4vnwocx_test.go:51: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpz4vnwocx_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpz4vnwocx_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    if min == max {\n        return min\n\
    \    }\n    min += min\n    max -= max\n    for i := min; i <= max; i++ {\n  \
    \      if arr[i] != arr[max-i] {\n            return i\n        }\n    }\n   \
    \ return n\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpnfa60xgj_test.go:26 +0xe5\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpnfa60xgj_test.go:53 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    min := 0\n    for i := 0; i <\
    \ len(arr); i++ {\n        if arr[i] != arr[len(arr)-1-i] {\n            min++\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpta5sjjeh_test.go:49: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpta5sjjeh_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpta5sjjeh_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpta5sjjeh_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpta5sjjeh_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n\n    // The first element is the smallest change that needs to be made\
    \ to make the array palindromic\n    smallest := arr[0]\n    smallest += length\n\
    \n    // The second element is the smallest change that needs to be made to make\
    \ the array palindromic\n    smallest += length\n\n    // The third element is\
    \ the smallest change that needs to be made to make the array palindromic\n  \
    \  smallest += length\n\n    // The fourth element is the smallest change that\
    \ needs to be made to make the array palindromic\n    smallest += length\n\n \
    \   // The fifth element is the smallest change that needs to be made to make\
    \ the array palindromic\n    smallest += length\n\n    // The sixth element is\
    \ the smallest change that needs to be made to make the array palindromic\n  \
    \  smallest += length\n\n    // The seventh element is the smallest change that\
    \ needs to be made to make the array palindromic\n    smallest += length\n\n \
    \   // The eighth element is the smallest change that needs to be made to make\
    \ the array palindromic\n    smallest += length\n\n    // The ninth element is\
    \ the smallest change that needs to be made to make the array palindromic\n  \
    \  smallest += length\n\n    // The tenth element is the smallest change that\
    \ needs to be made to make the array palindromic\n    smallest += length\n\n \
    \   // The eleventh element is the smallest change that needs to be made to make\
    \ the array palindromic\n    smallest += length\n\n    // The twelfth element\
    \ is the smallest change that needs to be made to make the array palindromic\n\
    \    smallest += length\n\n    // The thirteenth element is the smallest change\
    \ that needs to be made to make the array palindromic\n    smallest += length\n\
    \n    // The fourteenth element is the smallest change that needs to be made to\
    \ make the array palindromic\n    smallest += length\n\n    // The fifteenth element\
    \ is the smallest change that needs to be made to make the array palindromic\n\
    \    smallest += length\n\n    // The sixteenth element is the smallest change\
    \ that needs to be made to make the array palindromic\n    smallest += length\n\
    \n    // The seventeenth element is the smallest change that needs to be made\
    \ to make the array palindromic\n    smallest += length\n\n    // The eighteenth\
    \ element is the smallest change that needs to be made to make the array palindromic\n\
    \    smallest += length\n\n    // The nineteenth element is the smallest change\
    \ that needs to be made to make the array palindromic\n    smallest += length\n\
    \n    // The twentieth element is the smallest change that needs to be made to\
    \ make the array palindromic\n    \nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgnz7t2ry_test.go:84:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) / 2\n    for i := 0; i < min; i++ {\n    \
    \    if arr[i] > arr[len(arr)-min] {\n            min++\n        }\n    }\n  \
    \  return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpzodt7sly_test.go:48: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpzodt7sly_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpzodt7sly_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpzodt7sly_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpzodt7sly_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp8ibxlmfj_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp8ibxlmfj_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp8ibxlmfj_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp8ibxlmfj_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp8ibxlmfj_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp8ibxlmfj_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp8ibxlmfj_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    min := 0\n    max := len(arr)\
    \ - 1\n    for i := 0; i < max; i++ {\n        if arr[i] > arr[i+1] {\n      \
    \      min = i\n            break\n        }\n    }\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] < arr[i+1] {\n            max = i\n            break\n\
    \        }\n    }\n    if min == max {\n        return 0\n    }\n    if min >\
    \ max {\n        min, max = max, min\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [:-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000be5f0?, 0x0?, 0x44e628?})\n\
    \t/tmp/tmp89xsz9un_test.go:40 +0x147\ncommand-line-arguments_test.smallest_change({0xc000113df0,\
    \ 0x8, 0x8})\n\t/tmp/tmp89xsz9un_test.go:40 +0xbe\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp89xsz9un_test.go:50 +0xd5\ntesting.tRunner(0xc000103380, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min == max {\n        return\
    \ 0\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [7:6] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [7:6]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0, 0x6, 0x8})\n\
    \t/tmp/tmpo_mt_dfd_test.go:40 +0x133\ncommand-line-arguments_test.smallest_change({0xc00010ddf0,\
    \ 0x8, 0x8})\n\t/tmp/tmpo_mt_dfd_test.go:40 +0xb3\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpo_mt_dfd_test.go:50 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075370
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxsb0n9pe_test.go:60: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxsb0n9pe_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxsb0n9pe_test.go:60: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxsb0n9pe_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxsb0n9pe_test.go:60: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxsb0n9pe_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075370
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = length-i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpm06oecjg_test.go:50: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpm06oecjg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpm06oecjg_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpm06oecjg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpm06oecjg_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpm06oecjg_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpm06oecjg_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpm06oecjg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := i\n \
    \       for j := i; j < n; j++ {\n            if arr[j] > arr[j+1] {\n       \
    \         max = j\n            }\n        }\n        if max != i {\n         \
    \   min = max\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb6wig3m6_test.go:24:5: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpxufiells_test.go:60: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpxufiells_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpxufiells_test.go:60: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpxufiells_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpxufiells_test.go:60: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpxufiells_test.go:60:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] != arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpddvvi1mk_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpddvvi1mk_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpddvvi1mk_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpddvvi1mk_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpddvvi1mk_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpddvvi1mk_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    max := len(arr) - 1\n    i := 0\n\
    \    for i < max {\n        if arr[i] > arr[i+1] {\n            min = i\n    \
    \        max = i\n        } else {\n            max = i\n        }\n        i++\n\
    \    }\n    if min == max {\n        return 0\n    }\n    return min + smallest_change(arr[0:min])\
    \ + smallest_change(arr[min+1:max])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001ce000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc000189df0, 0x0?, 0x8})\n\
    \t/tmp/tmpd4fhkqn0_test.go:34 +0x10d\ncommand-line-arguments_test.smallest_change({0xc00010ddf0,\
    \ 0x3?, 0x8})\n\t/tmp/tmpd4fhkqn0_test.go:34 +0x8e\ncommand-line-arguments_test.smallest_change({0xc00010ddf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpd4fhkqn0_test.go:34 +0x8e\ncommand-line-arguments_test.smallest_change({0xc00010ddf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpd4fhkqn0_test.go:34 +0x8e\ncommand-line-arguments_test.smallest_change({0xc00010ddf0,\
    \ 0x3b?, 0x8})\n\t/tmp/tmpd4fhkqn0_test.go:34 +0x8e\ncommand-line-arguments_test.smallest_change({0xc00010ddf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpd4fhkqn0_test.go:34 +0x8e\ncommand-line-arguments_test.smallest_change({0xc00010ddf0,\
    \ 0x5e3ea0?, 0x8})\n\t/tmp/tmpd4fhkqn0_test.go:34 +0x8e\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpd4fhkqn0_test.go:44 +0xd5\ntesting.tRunner(0xc00019aea0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    min := 0\n    max := len(arr)\
    \ - 1\n    \n    for i := 0; i < max; i++ {\n        if arr[i] != arr[max] {\n\
    \            min = min + 1\n        }\n    }\n    \n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3b80hn7j_test.go:53: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3b80hn7j_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3b80hn7j_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3b80hn7j_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3b80hn7j_test.go:53: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3b80hn7j_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max\n\
    \        if arr[i] > arr[n-i] {\n            max = i\n        }\n        if arr[i]\
    \ < arr[n-i] {\n            min = i\n        }\n        if max > min {\n     \
    \       break\n        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp_j5nv3zh_test.go:27\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp_j5nv3zh_test.go:47\
    \ +0x82c\ntesting.tRunner(0xc000003d40, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n\n    min := length\n    max := length\n\n    for i := 0; i < length/2;\
    \ i++ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n    }\n\
    \n    for i := 0; i < length/2; i++ {\n        if arr[i] < arr[min] {\n      \
    \      min = i\n        }\n    }\n\n    if min == max {\n        return length\n\
    \    }\n\n    min += length/2\n    max -= length/2\n\n    if arr[min] > arr[max]\
    \ {\n        return smallest_change(arr[:min])\n    }\n\n    return smallest_change(arr[min+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000bf5f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmprk07s32h_test.go:28 +0x17b\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmprk07s32h_test.go:60 +0xd5\ntesting.tRunner(0xc000103520, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ length\n    for i := 0; i < length/2; i++ {\n        if arr[i] > arr[len(arr)-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5t9ovbu1_test.go:50: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5t9ovbu1_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5t9ovbu1_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5t9ovbu1_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp5t9ovbu1_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp5t9ovbu1_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp5t9ovbu1_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp5t9ovbu1_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n            break\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpzzupv8pe_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpzzupv8pe_test.go:45\
    \ +0x7a5\ntesting.tRunner(0xc000103380, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7ysd9fnz_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7ysd9fnz_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7ysd9fnz_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7ysd9fnz_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp7ysd9fnz_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp7ysd9fnz_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7ysd9fnz_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3rderyma_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3rderyma_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3rderyma_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3rderyma_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3rderyma_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3rderyma_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3rderyma_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3rderyma_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    if min == max\
    \ {\n        return length\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpw4r_kckg_test.go:26 +0x175\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpw4r_kckg_test.go:46 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := n-1; i >= 0; i-- {\n        if arr[i] > arr[i+1] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min > max {\n        return\
    \ min\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpgeywc2a3_test.go:32 +0x15f\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpgeywc2a3_test.go:50 +0xd5\ntesting.tRunner(0xc000192680, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ length\n    for i := 0; i < length/2; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpv0yj_0w2_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpv0yj_0w2_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpv0yj_0w2_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpv0yj_0w2_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpv0yj_0w2_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpv0yj_0w2_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpv0yj_0w2_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpv0yj_0w2_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            min =\
    \ i\n        }\n    }\n    for i := n - 1; i >= min; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            max = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < max; i++ {\n        if arr[i] > arr[min] {\n            max\
    \ = i\n        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpkh28cd5x_test.go:26 +0x13c\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpkh28cd5x_test.go:57 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max\n\
    \        if arr[i] > arr[n-i] {\n            max = i\n        }\n        if arr[i]\
    \ < arr[n-i] {\n            min = i\n        }\n        if max > min {\n     \
    \       break\n        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp_j5nv3zh_test.go:27\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp_j5nv3zh_test.go:47\
    \ +0x82c\ntesting.tRunner(0xc000003d40, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7ysd9fnz_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7ysd9fnz_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7ysd9fnz_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7ysd9fnz_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp7ysd9fnz_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp7ysd9fnz_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7ysd9fnz_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n\n    // Find the middle element and compare with the middle element and\
    \ the\n    // middle element and so on...\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := length/2\n    middle := length/2\n    middle := length/2\n\
    \    middle := length/2\n    middle := length/2\n    middle := length/2\n    middle\
    \ := length/2\n    middle := \nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7ysux4j4_test.go:106:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075370
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    max := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > arr[i+1] {\n            max = i\n        } else {\n            min\
    \ = i\n        }\n    }\n    if min > max {\n        return min\n    }\n    min\
    \ += min\n    max -= max\n    return smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000be5f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp1yp752zd_test.go:25 +0xfa\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp1yp752zd_test.go:46 +0xd5\ntesting.tRunner(0xc00019b040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n\n    min :=\
    \ len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min]\
    \ {\n            min = i\n        }\n    }\n\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_dr69s7h_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_dr69s7h_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_dr69s7h_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_dr69s7h_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_dr69s7h_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_dr69s7h_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp_dr69s7h_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    if min == max\
    \ {\n        return length\n    }\n    if arr[min] == arr[max] {\n        return\
    \ length\n    }\n    return length + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000be5f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp1feaxvnl_test.go:26 +0x19b\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp1feaxvnl_test.go:49 +0xd5\ntesting.tRunner(0xc00019b040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    min += smallest_change(arr[:max])\n    max +=\
    \ smallest_change(arr[max:])\n    if min == max {\n        return min\n    }\n\
    \    return min + smallest_change(arr[:min]) + smallest_change(arr[min:])\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 4 [running]:\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0,\
    \ 0x1, 0x8})\n\t/tmp/tmpky77u8yh_test.go:18 +0x165 fp=0xc0201e0370 sp=0xc0201e0368\
    \ pc=0x4ef7c5\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2,\
    \ 0x8})\n\t/tmp/tmpky77u8yh_test.go:25 +0x4a fp=0xc0201e03b0 sp=0xc0201e0370 pc=0x4ef6aa\n\
    command-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2, 0x8})\n\t/tmp/tmpky77u8yh_test.go:30\
    \ +0x109 fp=0xc0201e03f0 sp=0xc0201e03b0 pc=0x4ef769\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0,\
    \ 0x2, 0x8})\n\t/tmp/tmpky77u8yh_test.go:30 +0x109 fp=0xc0201e0430 sp=0xc0201e03f0\
    \ pc=0x4ef769\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2,\
    \ 0x8})\n\t/tmp/tmpky77u8yh_test.go:30 +0x109 fp=0xc0201e0470 sp=0xc0201e0430\
    \ pc=0x4ef769\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2,\
    \ 0x8})\n\t/tmp/tmpky77u8yh_test.go:30 +0x109 fp=0xc0201e04b0 sp=0xc0201e0470\
    \ pc=0x4ef769\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2,\
    \ 0x8})\n\t/tmp/tmpky77u8yh_test.go:30 +0x109 fp=0xc0201e04f0 sp=0xc0201e04b0\
    \ pc=0x4ef769\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2,\
    \ 0x8})\n\t/tmp/tmpky77u8yh_test.go:30 +0x109 fp=0xc0201e0530 sp=0xc0201e04f0\
    \ pc=0x4ef769\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2,\
    \ 0x8})\n\t/tmp/tmpky77u8yh_test.go:30 +0x109 fp=0xc0201e0570 sp=0xc0201e0530\
    \ pc=0x4ef769\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2,\
    \ 0x8})\n\t/tmp/tmpky77u8yh_test.go:30 +0x109 fp=0xc0201e05b0 sp=0xc0201e0570\
    \ pc=0x4ef769\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x2,\
    \ 0x8})\n\t/tmp/t"
  timestamp: 1660075372
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpsjhen7yz_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpsjhen7yz_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpsjhen7yz_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpsjhen7yz_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpsjhen7yz_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpsjhen7yz_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpsjhen7yz_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075372
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >\
    \ arr[i+1] {\n            min = i\n            max = i+1\n        }\n    }\n \
    \   if min > max {\n        return min\n    }\n    return smallest_change(arr[:min])\
    \ + 1 + smallest_change(arr[max:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpx3ezv13g_test.go:25 +0x11f\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpx3ezv13g_test.go:43 +0xd5\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075372
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max\n\
    \        if arr[i] > arr[n-i-1] {\n            max = i\n        }\n        if\
    \ min > max {\n            min = max\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpa0yju7dg_test.go:57: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpa0yju7dg_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpa0yju7dg_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpa0yju7dg_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpa0yju7dg_test.go:57: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpa0yju7dg_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpn0d_o6t1_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpn0d_o6t1_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpn0d_o6t1_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpn0d_o6t1_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpn0d_o6t1_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpn0d_o6t1_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpn0d_o6t1_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-i]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwtufgnwn_test.go:25\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwtufgnwn_test.go:47\
    \ +0x754\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-i]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwtufgnwn_test.go:25\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwtufgnwn_test.go:47\
    \ +0x754\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n\n    // We need to change one element to any other element to make the\
    \ array palindromic.\n    // The first element can be any element (except the\
    \ first).\n    first := arr[0]\n    last := arr[length-1]\n\n    // The minimum\
    \ number of elements we need to change to make the array palindromic.\n    //\
    \ The first element can be any element (except the first).\n    min := 1\n\n \
    \   // The minimum number of elements we need to change to make the array palindromic.\n\
    \    // The last element can be any element (except the last).\n    max := length\n\
    \n    // The minimum number of elements we need to change to make the array palindromic.\n\
    \    // The middle element can be any element (except the middle element).\n \
    \   middle := length/2\n\n    // The minimum number of elements we need to change\
    \ to make the array palindromic.\n    // The middle element can be any element\
    \ (except the middle element).\n    middle := length/2\n\n    // The minimum number\
    \ of elements we need to change to make the array palindromic.\n    // The middle\
    \ element can be any element (except the middle element).\n    middle := length/2\n\
    \n    // The minimum number of elements we need to change to make the array palindromic.\n\
    \    // The middle element can be any element (except the middle element).\n \
    \   middle := length/2\n\n    // The minimum number of elements we need to change\
    \ to make the array palindromic.\n    // The middle element can be any element\
    \ (except the middle element).\n    middle := length/2\n\n    // The minimum number\
    \ of elements we need to change to make the array palindromic.\n    // The middle\
    \ element can be any element (except the middle element).\n    middle := length/2\n\
    \n    // The minimum number of elements we need to change to make the array palindromic.\n\
    \    // The middle element can be any element (except the middle element).\n \
    \   middle := length/2\n\n    // The minimum number of elements we need to change\
    \ to make the array palindromic.\n    // The middle element can be any element\
    \ (except the middle element).\n    middle := length/2\n\n    // The minimum number\
    \ of elements we need to change to make the array palindromic.\n    // The middle\
    \ element can be any element (except the middle element).\n    middle := length/2\n\
    \n    // The minimum number of elements we need to change to make the array palindromic.\n\
    \    // The middle element can be any element (except the middle element).\n \
    \   middle := length/2\n\n    // The minimum number of elements we need to change\
    \ to make the array palindromic.\n    // The middle element can be any element\
    \ (except the middle element).\n    middle := length/2\n\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg8dq9s18_test.go:82:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min > max {\n        return\
    \ min\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4528?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpcvix77w1_test.go:26 +0x9a\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpcvix77w1_test.go:57 +0x37f\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[i+1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp6jeio_g6_test.go:25\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp6jeio_g6_test.go:40\
    \ +0x786\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) / 2\n    for i := 0; i < min; i++ {\n    \
    \    if arr[i] != arr[min-i] {\n            min = i\n        }\n    }\n    return\
    \ min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphqg_m1il_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmphqg_m1il_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmphqg_m1il_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmphqg_m1il_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    i := 0\n    j := n - 1\n    min += j\n    max\
    \ += j\n    for i < max && j > min {\n        if arr[i] > arr[j] {\n         \
    \   i++\n            min++\n        } else {\n            j--\n            max--\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3_wcxp3o_test.go:61: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3_wcxp3o_test.go:61:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3_wcxp3o_test.go:61: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3_wcxp3o_test.go:61:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3_wcxp3o_test.go:61: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3_wcxp3o_test.go:61:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] != arr[n-i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpygujz0dk_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpygujz0dk_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpygujz0dk_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpygujz0dk_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpygujz0dk_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpygujz0dk_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpygujz0dk_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ arr[n-1] {\n            max = i\n        } else {\n            min = i\n   \
    \     }\n    }\n    if min == max {\n        return n\n    }\n    max -= min\n\
    \    min += min\n    i := 0\n    for j := min; j < max; j++ {\n        if arr[j]\
    \ != arr[n-1-j] {\n            i++\n        }\n    }\n    return i\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp44j79zrr_test.go:66: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp44j79zrr_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp44j79zrr_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp44j79zrr_test.go:66:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp44j79zrr_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4etcyka6_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4etcyka6_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp4etcyka6_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp4etcyka6_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp4etcyka6_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp4etcyka6_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp4etcyka6_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    min += min\n    max -= max\n    for i := min; i <= max; i++ {\n  \
    \      if arr[i] > arr[i+1] {\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n\
    \            min = i\n            max = i\n        } else {\n            max =\
    \ i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpl3y7onp3_test.go:26 +0xea\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpl3y7onp3_test.go:57 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i+1\n            break\n\
    \        }\n    }\n    if min == max {\n        return 0\n    }\n    min += 1\n\
    \    max -= 1\n    for i := min; i <= max; i++ {\n        if arr[i] > arr[i+1]\
    \ {\n            min = i\n            max = i+1\n            break\n        }\n\
    \    }\n    if min == max {\n        return 0\n    }\n    min += 1\n    max -=\
    \ 1\n    for i := min; i <= max; i++ {\n        if arr[i] > arr[i+1] {\n     \
    \       min = i\n            max = i+1\n            break\n        }\n    }\n\
    \    if min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n  \
    \  for i := min; i <= max; i++ {\n        if arr[i] > arr[i+1] {\n           \
    \ min = i\n            max = i+1\n            break\n        }\n    }\n    if\
    \ min == max {\n        return 0\n    }\n    min += 1\n    max -= 1\n    for i\
    \ := min; i <= max; i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n\
    \            max = i+1\n            break\n        }\n    }\n    if min == max\
    \ {\n        return 0\n    }\n    min += 1\n    max -= 1\n    for i := min; i\
    \ <= max; i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n       \
    \     max = i+1\n            break\n        }\n    }\n    if min == max {\n  \
    \      return 0\n    }\n    min += 1\n    max -= 1\n    for i := min; i <= max;\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            max\
    \ = i+1\n            break\n        }\n    }\n    if min == max {\n        return\
    \ 0\n    }\n    min += 1\n    max -= 1\n    for i := min; i <= max; i++ {\n  \
    \      if arr[i] > arr[i+1] {\n            min = i\n            max = i+1\n  \
    \          break\n        }\n    }\n    if min == max {\n        return 0\n  \
    \  }\n    min += 1\n    max -= 1\n    for i := min; i <= max; i++ {\n        if\
    \ arr[i] > arr[i+1] {\n            min = i\n            max = i+1\n          \
    \  break\n        }\n    }\n    if min == max {\n        return 0\n    }\n   \
    \ min += 1\n    max -= 1\n    for i := min; i <= max; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i+1\n            break\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkt_an5t0_test.go:138:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpf32f6de5_test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpf32f6de5_test.go:47\
    \ +0x986\ntesting.tRunner(0xc00019aea0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ != arr[max] {\n            min = i\n            max = i\n        }\n       \
    \ if arr[i] != arr[min] {\n            max = i\n        }\n    }\n    return max\
    \ - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4sw10ith_test.go:57: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp4sw10ith_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp4sw10ith_test.go:57: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ length\n    for i := 0; i < length/2; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = length-i\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp991ngs_m_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp991ngs_m_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp991ngs_m_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp991ngs_m_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp991ngs_m_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp991ngs_m_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp991ngs_m_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp991ngs_m_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    min += min / 2\n    max -= max / 2\n    for i := 0; i < n; i++ {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n    }\n    if min > max {\n  \
    \      return min\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5lswoh5q_test.go:72: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5lswoh5q_test.go:72:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5lswoh5q_test.go:72: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5lswoh5q_test.go:72:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp5lswoh5q_test.go:72: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    if min == max {\n        return\
    \ min + 1\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpnb7gl4tt_test.go:26 +0x17b\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpnb7gl4tt_test.go:50 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return 0\n\
    \    }\n    min += 1\n    max -= 1\n    i := 0\n    j := n - 1\n    k := 0\n \
    \   l := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r\
    \ := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    arr2 := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        arr2[i] = arr[i]\n    }\n    for i := 0; i < n; i++ {\n        if\
    \ arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min\
    \ {\n            min = arr[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n\
    \        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\n            min = arr[i]\n        }\n    }\n    for i := 0; i < n;\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    \
    \    if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n        if arr[i] < min {\n            min = arr[i]\n        }\n   \
    \ }\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n            max\
    \ = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n \
    \       }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] > max {\n  \
    \          max = arr[i]\n        }\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n  \
    \          min = arr[i]\n        }\n    }\n    for i := 0; i < n; i++ {\n    \
    \    if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i]\
    \ < min {\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvy7h6xmp_test.go:121:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaf_foht6_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    if min == max {\n        return\
    \ min + 1\n    }\n    if min > max {\n        return smallest_change(arr[:min])\
    \ + smallest_change(arr[min+1:])\n    }\n    return smallest_change(arr[:min])\
    \ + smallest_change(arr[min+1:max])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of\
    \ range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x0?, 0x44e628?})\n\
    \t/tmp/tmp5bh3ybcd_test.go:26 +0x1e6\ncommand-line-arguments_test.smallest_change({0xc0000d3df0,\
    \ 0x5e3ea0?, 0x8})\n\t/tmp/tmp5bh3ybcd_test.go:43 +0x136\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp5bh3ybcd_test.go:53 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := 0\n    max := len(arr) - 1\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            break\n\
    \        }\n    }\n    for i := 0; i < max; i++ {\n        if arr[i] < arr[i+1]\
    \ {\n            max = i\n            break\n        }\n    }\n    if min == max\
    \ {\n        return 0\n    }\n    return min + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160360\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.smallest_change({0xc04015fe08?,\
    \ 0x0?, 0x5?})\n\t/tmp/tmp5dzcwgyr_test.go:18 +0x170 fp=0xc020160370 sp=0xc020160368\
    \ pc=0x4ef7d0\ncommand-line-arguments_test.smallest_change({0xc04015fe08, 0x0,\
    \ 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36 +0xb3 fp=0xc0201603b0 sp=0xc020160370 pc=0x4ef713\n\
    command-line-arguments_test.smallest_change({0xc04015fe08, 0x0, 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36\
    \ +0xb3 fp=0xc0201603f0 sp=0xc0201603b0 pc=0x4ef713\ncommand-line-arguments_test.smallest_change({0xc04015fe08,\
    \ 0x0, 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36 +0xb3 fp=0xc020160430 sp=0xc0201603f0\
    \ pc=0x4ef713\ncommand-line-arguments_test.smallest_change({0xc04015fe08, 0x0,\
    \ 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36 +0xb3 fp=0xc020160470 sp=0xc020160430 pc=0x4ef713\n\
    command-line-arguments_test.smallest_change({0xc04015fe08, 0x0, 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36\
    \ +0xb3 fp=0xc0201604b0 sp=0xc020160470 pc=0x4ef713\ncommand-line-arguments_test.smallest_change({0xc04015fe08,\
    \ 0x0, 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36 +0xb3 fp=0xc0201604f0 sp=0xc0201604b0\
    \ pc=0x4ef713\ncommand-line-arguments_test.smallest_change({0xc04015fe08, 0x0,\
    \ 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36 +0xb3 fp=0xc020160530 sp=0xc0201604f0 pc=0x4ef713\n\
    command-line-arguments_test.smallest_change({0xc04015fe08, 0x0, 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36\
    \ +0xb3 fp=0xc020160570 sp=0xc020160530 pc=0x4ef713\ncommand-line-arguments_test.smallest_change({0xc04015fe08,\
    \ 0x0, 0x5})\n\t/tmp/tmp5dzcwgyr_test.go:36 +0xb3 fp=0xc0201605b0 sp=0xc020160570\
    \ pc=0x4ef713\ncommand-line-arguments_test.smallest_change({0xc04015fe08, 0x0,\
    \ 0x5})\n\t/tmp/tmp5d"
  timestamp: 1660075375
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n\n    // Initialize min and max to first and last element of arr\n   \
    \ min := arr[0]\n    max := arr[length-1]\n\n    // Initialize count and count\
    \ to 0\n    count := 0\n    count := 0\n\n    // Initialize min and max to first\
    \ and last element of arr\n    min := arr[0]\n    max := arr[length-1]\n\n   \
    \ // Initialize count and count to 0\n    count := 0\n    count := 0\n\n    //\
    \ Initialize min and max to first and last element of arr\n    min := arr[0]\n\
    \    max := arr[length-1]\n\n    // Initialize count and count to 0\n    count\
    \ := 0\n    count := 0\n\n    // Initialize min and max to first and last element\
    \ of arr\n    min := arr[0]\n    max := arr[length-1]\n\n    // Initialize count\
    \ and count to 0\n    count := 0\n    count := 0\n\n    // Initialize min and\
    \ max to first and last element of arr\n    min := arr[0]\n    max := arr[length-1]\n\
    \n    // Initialize count and count to 0\n    count := 0\n    count := 0\n\n \
    \   // Initialize min and max to first and last element of arr\n    min := arr[0]\n\
    \    max := arr[length-1]\n\n    // Initialize count and count to 0\n    count\
    \ := 0\n    count := 0\n\n    // Initialize min and max to first and last element\
    \ of arr\n    min := arr[0]\n    max := arr[length-1]\n\n    // Initialize count\
    \ and count to 0\n    count := 0\n    count := 0\n\n    // Initialize min and\
    \ max to first and last element of arr\n    min := arr[0]\n    max := arr[length-1]\n\
    \n    // Initialize count and count to 0\n    count := 0\n    count := 0\n\n \
    \   // Initialize min and max to first and last element of arr\n    min := arr[0]\n\
    \    max := arr[length-1]\n\n    // Initialize count and count to 0\n    count\
    \ := 0\n    count := 0\n\n    // Initialize min and max to first and last element\
    \ of arr\n    min := arr[0]\n    max := arr[length-1]\n\n    // Initialize count\
    \ and count to 0\n    count := 0\n    count := 0\n\n    // Initialize min and\
    \ max to first and last element of arr\n    min := arr[0]\n    max := arr[length-1]\n\
    \n    // Initialize count and count to 0\n    count := 0\n    count := 0\n\n \
    \   // Initialize min and max to first and last element of arr\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6t4lx8y7_test.go:114:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    i := 0\n    for i < max {\n        if arr[i] >\
    \ arr[n-1] {\n            min = i\n            max = n\n        } else {\n   \
    \         max = i\n        }\n        i++\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0360\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?,\
    \ 0x8?, 0x8?})\n\t/tmp/tmpeanqron4_test.go:18 +0x146 fp=0xc0201e0370 sp=0xc0201e0368\
    \ pc=0x4ef7a6\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmpeanqron4_test.go:35 +0xac fp=0xc0201e03b0 sp=0xc0201e0370 pc=0x4ef70c\n\
    command-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?, 0x8})\n\t/tmp/tmpeanqron4_test.go:35\
    \ +0xac fp=0xc0201e03f0 sp=0xc0201e03b0 pc=0x4ef70c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpeanqron4_test.go:35 +0xac fp=0xc0201e0430 sp=0xc0201e03f0\
    \ pc=0x4ef70c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmpeanqron4_test.go:35 +0xac fp=0xc0201e0470 sp=0xc0201e0430 pc=0x4ef70c\n\
    command-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?, 0x8})\n\t/tmp/tmpeanqron4_test.go:35\
    \ +0xac fp=0xc0201e04b0 sp=0xc0201e0470 pc=0x4ef70c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpeanqron4_test.go:35 +0xac fp=0xc0201e04f0 sp=0xc0201e04b0\
    \ pc=0x4ef70c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?,\
    \ 0x8})\n\t/tmp/tmpeanqron4_test.go:35 +0xac fp=0xc0201e0530 sp=0xc0201e04f0 pc=0x4ef70c\n\
    command-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?, 0x8})\n\t/tmp/tmpeanqron4_test.go:35\
    \ +0xac fp=0xc0201e0570 sp=0xc0201e0530 pc=0x4ef70c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0,\
    \ 0x0?, 0x8})\n\t/tmp/tmpeanqron4_test.go:35 +0xac fp=0xc0201e05b0 sp=0xc0201e0570\
    \ pc=0x4ef70c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0, 0x0?,\
    \ 0x8})\n\t/"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    max := arr[n-1]\n    i := 0\n    j := n - 1\n    for i\
    \ < j {\n        if arr[i] > max {\n            max = arr[i]\n            j =\
    \ i\n        }\n        if arr[j] < min {\n            min = arr[j]\n        \
    \    i = j\n        }\n        i++\n        j--\n    }\n    return j - i\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpi4brojk9_test.go:62: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpi4brojk9_test.go:62:\
    \ expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpi4brojk9_test.go:62: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpi4brojk9_test.go:62:\
    \ expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpi4brojk9_test.go:62: expected '%!s(int=0)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpi4brojk9_test.go:62:\
    \ expected '%!s(int=0)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpi4brojk9_test.go:62: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min == max {\n        return min + 1\n\
    \    }\n    min += 2\n    max -= 2\n    i := 0\n    for i < min {\n        arr[i]\
    \ = arr[i] + arr[i+1]\n        i++\n    }\n    for i < max {\n        arr[i] =\
    \ arr[i] - arr[i+1]\n        i++\n    }\n    return smallest_change(arr)\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0378\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?,\
    \ 0x8?, 0x8?})\n\t/tmp/tmpya8peqlu_test.go:18 +0x11b fp=0xc0201e0388 sp=0xc0201e0380\
    \ pc=0x4ef77b\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e03b0 sp=0xc0201e0388\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e03d8 sp=0xc0201e03b0\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e0400 sp=0xc0201e03d8\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e0428 sp=0xc0201e0400\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e0450 sp=0xc0201e0428\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e0478 sp=0xc0201e0450\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e04a0 sp=0xc0201e0478\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e04c8 sp=0xc0201e04a0\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfdf0?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmpya8peqlu_test.go:47 +0xcc fp=0xc0201e04f0 sp=0xc0201e04c8\
    \ pc=0x4ef72c\ncommand-line-arguments_test.smallest_change({0xc0401dfd"
  timestamp: 1660075377
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    return min + smallest_change(arr[:min]) +\
    \ smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpvy198gd3_test.go:56: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpvy198gd3_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpvy198gd3_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpvy198gd3_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpvy198gd3_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    // Find\
    \ the minimum number of elements we need to change to make the array palindromic\n\
    \    // by considering only the first half of the array.\n    min := len(arr)\
    \ / 2\n    for i := 0; i < min; i++ {\n        // If the current element is smaller\
    \ than the minimum number of elements we need\n        // to change to make the\
    \ array palindromic, then we know that we need to change the\n        // current\
    \ element to any element that is smaller than the current element.\n        if\
    \ arr[i] < arr[len(arr)-min] {\n            min++\n        }\n    }\n\n    //\
    \ If there are more than half of the elements in the array, then we know that\
    \ we\n    // need to change at least one element to make the array palindromic.\
    \ Since we only\n    // need to change half of the elements in the array, we can\
    \ just return the minimum\n    // number of elements we need to change to make\
    \ the array palindromic.\n    if len(arr) > min {\n        return min\n    }\n\
    \n    // If there are only half of the elements in the array, then we know that\
    \ we\n    // need to change at least one element to make the array palindromic.\
    \ Since we only\n    // need to change half of the elements in the array, we can\
    \ just return the minimum\n    // number of elements we need to change to make\
    \ the array palindromic.\n    return len(arr)\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpaxirmgs__test.go:70: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpaxirmgs__test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpaxirmgs__test.go:70: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpaxirmgs__test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpaxirmgs__test.go:70: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpaxirmgs__test.go:70:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpaxirmgs__test.go:70: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    length := len(arr)\n    min :=\
    \ length\n    for i := 0; i < length/2; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = length-i\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp991ngs_m_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp991ngs_m_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp991ngs_m_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp991ngs_m_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp991ngs_m_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp991ngs_m_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp991ngs_m_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp991ngs_m_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpukbdwf56_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpukbdwf56_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpukbdwf56_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpukbdwf56_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] != arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpddvvi1mk_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpddvvi1mk_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpddvvi1mk_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpddvvi1mk_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpddvvi1mk_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpddvvi1mk_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    min > max {\n        min, max = max, min\n   \
    \ }\n    min > 0 {\n        arr[min-1], arr[max] = arr[max], arr[min-1]\n    \
    \    smallest_change(arr[:min-1])\n        smallest_change(arr[min+1:])\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_wi2pk94_test.go:26:18: missing '','' in composite literal

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length / 2\n    if length%2 == 0 {\n        min = length /\
    \ 2\n    }\n    for i := 0; i < min; i++ {\n        if arr[i] != arr[length-i-1]\
    \ {\n            min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpswvti8u8_test.go:55: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpswvti8u8_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpswvti8u8_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpswvti8u8_test.go:55:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpswvti8u8_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpswvti8u8_test.go:55:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpswvti8u8_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    return max - min + 1\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmdzctwyp_test.go:60: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmdzctwyp_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpmdzctwyp_test.go:60: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpmdzctwyp_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            min\
    \ = i\n        }\n    }\n    for i := n - 1; i >= min; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            max = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[max] {\n            max\
    \ = i\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpfn5ymcuj_test.go:26 +0x133\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpfn5ymcuj_test.go:57 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpjybtbfyf_test.go:48: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpjybtbfyf_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpjybtbfyf_test.go:48: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpjybtbfyf_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    return n - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpmqrsc11b_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpmqrsc11b_test.go:52: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmphkccwizv_test.go:50: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmphkccwizv_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmphkccwizv_test.go:50: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmphkccwizv_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmphkccwizv_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmphkccwizv_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmphkccwizv_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmphkccwizv_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := 0\n    max := len(arr) - 1\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] != arr[max] {\n            min = i\n            break\n\
    \        }\n    }\n    for i := 0; i < max; i++ {\n        if arr[i] != arr[min]\
    \ {\n            max = i\n            break\n        }\n    }\n    return max\
    \ - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp15b18hzn_test.go:56: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp15b18hzn_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp15b18hzn_test.go:56: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp15b18hzn_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp15b18hzn_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp15b18hzn_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaf_foht6_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075373
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min = length-i-1\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp3hg4cqez_test.go:50: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp3hg4cqez_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp3hg4cqez_test.go:50: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp3hg4cqez_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp3hg4cqez_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp3hg4cqez_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp3hg4cqez_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max\
    \ = min\n            break\n        }\n    }\n    return max - min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpb9aollf__test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpb9aollf__test.go:47\
    \ +0x9b9\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    max := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] > arr[i+1] {\n            min = i\n            max = i\n        }\n \
    \   }\n    if min == max {\n        return min + 1\n    }\n    min += 1\n    max\
    \ -= 1\n    for i := min; i <= max; i++ {\n        if arr[i] > arr[i+1] {\n  \
    \          min = i\n            max = i\n        }\n    }\n    if min == max {\n\
    \        return min + 1\n    }\n    return 0\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp5tma2ktw_test.go:25 +0x6d\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp5tma2ktw_test.go:54 +0xd5\ntesting.tRunner(0xc000192820, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min == max {\n        return n\n    }\n    min += 1\n\
    \    max -= 1\n    for i := min; i <= max; i++ {\n        if arr[i] > arr[n-1]\
    \ {\n            max = i\n        } else {\n            min = i\n        }\n \
    \   }\n    if min == max {\n        return n\n    }\n    min += 1\n    max -=\
    \ 1\n    for i := min; i <= max; i++ {\n        if arr[i] < arr[n-1] {\n     \
    \       min = i\n        } else {\n            max = i\n        }\n    }\n   \
    \ if min == max {\n        return n\n    }\n    min += 1\n    max -= 1\n    for\
    \ i := min; i <= max; i++ {\n        if arr[i] > arr[n-1] {\n            min =\
    \ i\n        } else {\n            max = i\n        }\n    }\n    if min == max\
    \ {\n        return n\n    }\n    return n\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpu1ex9bcz_test.go:94: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpu1ex9bcz_test.go:94:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpu1ex9bcz_test.go:94: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpu1ex9bcz_test.go:94:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpu1ex9bcz_test.go:94: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpu1ex9bcz_test.go:94:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpu1ex9bcz_test.go:94: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    min += min / 2\n    max -= max / 2\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n  \
    \      }\n        if arr[i] < min {\n            min = arr[i]\n        }\n   \
    \ }\n    return max - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2gwuqouq_test.go:58: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2gwuqouq_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2gwuqouq_test.go:58: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2gwuqouq_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2gwuqouq_test.go:58: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2gwuqouq_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    max := arr[n-1]\n    for i :=\
    \ n - 2; i >= 0; i-- {\n        if arr[i] > max {\n            max = arr[i]\n\
    \        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpeilnwlo__test.go:58: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpeilnwlo__test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpeilnwlo__test.go:58: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpeilnwlo__test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpeilnwlo__test.go:58: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpeilnwlo__test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3rderyma_test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3rderyma_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3rderyma_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3rderyma_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3rderyma_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3rderyma_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3rderyma_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3rderyma_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\n\
    \    max := len(arr)\n    for i := 0; i < max; i++ {\n        if arr[i] > arr[max-1]\
    \ {\n            max = i\n        }\n    }\n    for i := 0; i < min; i++ {\n \
    \       if arr[i] < arr[min-1] {\n            min = i\n        }\n    }\n    return\
    \ max - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2xzfllvy_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2xzfllvy_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2xzfllvy_test.go:57: expected '%!s(int=0)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2xzfllvy_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp2xzfllvy_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for min < max {\n        midpoint := (min\
    \ + max) / 2\n        if arr[midpoint] == arr[midpoint-1] {\n            min =\
    \ midpoint + 1\n        } else {\n            max = midpoint - 1\n        }\n\
    \    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpuv_rytfe_test.go:27\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpuv_rytfe_test.go:47\
    \ +0x87f\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075377
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n\n    // The first element is the smallest change to make the array palindromic.\n\
    \    smallest := arr[0]\n    smallest += length\n\n    // The second element is\
    \ the smallest change to make the array palindromic.\n    smallest += length\n\
    \n    // The third element is the smallest change to make the array palindromic.\n\
    \    smallest += length\n\n    // The fourth element is the smallest change to\
    \ make the array palindromic.\n    smallest += length\n\n    // The fifth element\
    \ is the smallest change to make the array palindromic.\n    smallest += length\n\
    \n    // The sixth element is the smallest change to make the array palindromic.\n\
    \    smallest += length\n\n    // The seventh element is the smallest change to\
    \ make the array palindromic.\n    smallest += length\n\n    // The eighth element\
    \ is the smallest change to make the array palindromic.\n    smallest += length\n\
    \n    // The ninth element is the smallest change to make the array palindromic.\n\
    \    smallest += length\n\n    // The tenth element is the smallest change to\
    \ make the array palindromic.\n    smallest += length\n\n    // The eleventh element\
    \ is the smallest change to make the array palindromic.\n    smallest += length\n\
    \n    // The twelfth element is the smallest change to make the array palindromic.\n\
    \    smallest += length\n\n    // The thirteenth element is the smallest change\
    \ to make the array palindromic.\n    smallest += length\n\n    // The fourteenth\
    \ element is the smallest change to make the array palindromic.\n    smallest\
    \ += length\n\n    // The fifteenth element is the smallest change to make the\
    \ array palindromic.\n    smallest += length\n\n    // The sixteenth element is\
    \ the smallest change to make the array palindromic.\n    smallest += length\n\
    \n    // The seventeenth element is the smallest change to make the array palindromic.\n\
    \    smallest += length\n\n    // The eighteenth element is the smallest change\
    \ to make the array palindromic.\n    smallest += length\n\n    // The nineteenth\
    \ element is the smallest change to make the array palindromic.\n    smallest\
    \ += length\n\n    // The twentieth element is the smallest change to make the\
    \ array palindromic.\n    smallest += length\n\n    // The twenty-first element\
    \ is the smallest change to make the array palindromic.\n    smallest += length\n\
    \n    // The twenty-second element is the smallest change to make the \nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt30u_tcd_test.go:89:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] != arr[length-i-1] {\n            min = length-i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpm06oecjg_test.go:50: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpm06oecjg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpm06oecjg_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpm06oecjg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpm06oecjg_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpm06oecjg_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpm06oecjg_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpm06oecjg_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n - 1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i\n        } else {\n \
    \           max = i\n        }\n    }\n    if min == max {\n        return min\
    \ + 1\n    }\n    min += 2\n    max -= 2\n    for i := min; i <= max; i++ {\n\
    \        if arr[i] > arr[i+1] {\n            min = i\n        } else {\n     \
    \       max = i\n        }\n    }\n    if min == max {\n        return min + 1\n\
    \    }\n    return smallest_change(arr[:min]) + smallest_change(arr[min+1:max])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp9c5f6_zb_test.go:26 +0x1a8\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp9c5f6_zb_test.go:58 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075378
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n - 1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            max = i\n     \
    \   } else {\n            min = i\n        }\n    }\n    if min == max {\n   \
    \     return 0\n    }\n    min += 1\n    max -= 1\n    for i := min; i <= max;\
    \ i++ {\n        if arr[i] > arr[n-1] {\n            max = i\n        } else {\n\
    \            min = i\n        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmps3l1wtv8_test.go:64: expected '%!s(int=4)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmps3l1wtv8_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=-3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmps3l1wtv8_test.go:64: expected '%!s(int=1)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmps3l1wtv8_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmps3l1wtv8_test.go:64: expected '%!s(int=0)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmps3l1wtv8_test.go:64:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075378
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\n\
    \    max := len(arr)\n    for i := 0; i < max; i++ {\n        if arr[i] != arr[max-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7671yy6b_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7671yy6b_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7671yy6b_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7671yy6b_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp7671yy6b_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp7671yy6b_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp7671yy6b_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075378
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    min := len(arr)\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] != arr[len(arr)-1-i] {\n         \
    \   min++\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp5mtofzg1_test.go:49: expected '%!s(int=4)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp5mtofzg1_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=9)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp5mtofzg1_test.go:49: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp5mtofzg1_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp5mtofzg1_test.go:49: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp5mtofzg1_test.go:49:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp5mtofzg1_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp5mtofzg1_test.go:49:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075378
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr)\n    for i := 0; i < min/2; i++ {\n      \
    \  if arr[i] != arr[len(arr)-(i+1)] {\n            min = i\n        }\n    }\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpddzwrwsl_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpddzwrwsl_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpddzwrwsl_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpddzwrwsl_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpddzwrwsl_test.go:48: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpddzwrwsl_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpddzwrwsl_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpddzwrwsl_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075378
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return n\n    }\n\
    \    min += 1\n    max -= 1\n    i := 0\n    for j := min; j < max; j++ {\n  \
    \      if arr[j] != arr[j+n] {\n            i++\n        }\n    }\n    return\
    \ i\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [9] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [9] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp_i81nnv5_test.go:40 +0xbf\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp_i81nnv5_test.go:54 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075378
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return min\n    }\n    return smallest_change(arr[:min])\
    \ + smallest_change(arr[min+1:max])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp4makjezm_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp4makjezm_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp4makjezm_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp4makjezm_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp4makjezm_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[max] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[min] {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return length\n    }\n    return min + smallest_change(arr[min+1\
    \ : max])\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000be5f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmptm54c3d8_test.go:26 +0x130\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmptm54c3d8_test.go:46 +0xd5\ntesting.tRunner(0xc000103380, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 1; i < len(arr); i++ {\n        if arr[i] > arr[min-1] {\n     \
    \       min++\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp1usd25_3_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp1usd25_3_test.go:38\
    \ +0x7a6\ntesting.tRunner(0xc00019aea0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    max := arr[n-1]\n    i := 0\n    j := n - 1\n    k := n\
    \ - 1\n    for i < j {\n        if arr[i] > max {\n            max = arr[i]\n\
    \            k = i\n        }\n        if arr[j] > max {\n            max = arr[j]\n\
    \            k = j\n        }\n        if arr[i] < min {\n            min = arr[i]\n\
    \            i = k\n        }\n        if arr[j] < min {\n            min = arr[j]\n\
    \            j = k\n        }\n        i++\n        j--\n    }\n    return k\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2k6zfr3p_test.go:71: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2k6zfr3p_test.go:71:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2k6zfr3p_test.go:71: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp2k6zfr3p_test.go:71:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp2k6zfr3p_test.go:71: expected '%!s(int=0)', got '%!s(int=3)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[len(arr)-i-1] {\n            min = length-i\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpnm56impm_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpnm56impm_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpnm56impm_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpnm56impm_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpnm56impm_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpnm56impm_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpnm56impm_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpnm56impm_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ != arr[max] {\n            min = i\n            max = i\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] != arr[min] {\n            min\
    \ = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpbvlo0p90_test.go:59: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpbvlo0p90_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpbvlo0p90_test.go:59: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpbvlo0p90_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpbvlo0p90_test.go:59: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpbvlo0p90_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpbvlo0p90_test.go:59: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    max += min\n    for i := 0; i < n; i++ {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp2z1m7ugr_test.go:65: expected '%!s(int=4)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp2z1m7ugr_test.go:65:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp2z1m7ugr_test.go:65: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp2z1m7ugr_test.go:65:\
    \ expected '%!s(int=1)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp2z1m7ugr_test.go:65: expected '%!s(int=0)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp2z1m7ugr_test.go:65:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp2z1m7ugr_test.go:65: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n    \
    \        min = arr[i]\n        }\n    }\n    if min > max {\n        return 0\n\
    \    }\n    return min + smallest_change(arr[:max]) + smallest_change(arr[max:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [:9] with capacity 8 [recovered]\n\tpanic: runtime error: slice\
    \ bounds out of range [:9] with capacity 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp3q7l5li3_test.go:36 +0x118\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp3q7l5li3_test.go:46 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n            break\n        }\n    }\n    return min + smallest_change(arr[:min])\
    \ + smallest_change(arr[min+1:])\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of\
    \ range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000be5f0?, 0x44e628?,\
    \ 0x5648fb?})\n\t/tmp/tmp4vbkl7a4_test.go:24 +0x11e\ncommand-line-arguments_test.smallest_change({0xc000113df0,\
    \ 0x8, 0x8})\n\t/tmp/tmp4vbkl7a4_test.go:29 +0x8f\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp4vbkl7a4_test.go:39 +0xd5\ntesting.tRunner(0xc0001031e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    max := 0\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] < min {\n            min\
    \ = arr[i]\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp7kmkvuq1_test.go:54: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp7kmkvuq1_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp7kmkvuq1_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp7kmkvuq1_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp7kmkvuq1_test.go:54: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp7kmkvuq1_test.go:54:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp7kmkvuq1_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n\
    \            if arr[i] > arr[j] {\n                min = min(min, j-i+1)\n   \
    \             break\n            }\n        }\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprof6gddl_test.go:26:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[i+1] {\n            min = i\n            max = i+1\n\
    \        }\n    }\n    if min > max {\n        return 0\n    }\n    min += 1\n\
    \    max -= 1\n    count := 0\n    for i := min; i <= max; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpeboum9m1_test.go:65: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpeboum9m1_test.go:65:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpeboum9m1_test.go:65: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpeboum9m1_test.go:65:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpeboum9m1_test.go:65: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := 0\n    max := len(arr) - 1\n    for i := 0; i < max;\
    \ i++ {\n        if arr[i] > arr[i+1] {\n            min = i\n            break\n\
    \        }\n    }\n    for i := 0; i < max; i++ {\n        if arr[i] < arr[i+1]\
    \ {\n            max = i\n            break\n        }\n    }\n    return max\
    \ - min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgmh56dmi_test.go:56: expected '%!s(int=4)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgmh56dmi_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgmh56dmi_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgmh56dmi_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpgmh56dmi_test.go:56: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpgmh56dmi_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpgmh56dmi_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    min > max ? max = min : min = max\n    min > 1\
    \ ? max = min : min = max\n    min > 2 ? max = min : min = max\n    min > 3 ?\
    \ max = min : min = max\n    min > 4 ? max = min : min = max\n    min > 5 ? max\
    \ = min : min = max\n    min > 6 ? max = min : min = max\n    min > 7 ? max =\
    \ min : min = max\n    min > 8 ? max = min : min = max\n    min > 9 ? max = min\
    \ : min = max\n    min > 10 ? max = min : min = max\n    min > 11 ? max = min\
    \ : min = max\n    min > 12 ? max = min : min = max\n    min > 13 ? max = min\
    \ : min = max\n    min > 14 ? max = min : min = max\n    min > 15 ? max = min\
    \ : min = max\n    min > 16 ? max = min : min = max\n    min > 17 ? max = min\
    \ : min = max\n    min > 18 ? max = min : min = max\n    min > 19 ? max = min\
    \ : min = max\n    min > 20 ? max = min : min = max\n    min > 21 ? max = min\
    \ : min = max\n    min > 22 ? max = min : min = max\n    min > 23 ? max = min\
    \ : min = max\n    min > 24 ? max = min : min = max\n    min > 25 ? max = min\
    \ : min = max\n    min > 26 ? max = min : min = max\n    min > 27 ? max = min\
    \ : min = max\n    min > 28 ? max = min : min = max\n    min > 29 ? max = min\
    \ : min = max\n    min > 30 ? max = min : min = max\n    min > 31 ? max = min\
    \ : min = max\n    min > 32 ? max = min : min = max\n    min > 33 ? max = min\
    \ : min = max\n    min > 34 ? max = min : min = max\n    min > 35 ? max = min\
    \ : min = max\n    min > 36 ? max = min : min = max\n    min > 37 ? max = min\
    \ : min = max\n    min > 38 ? max = min : min = max\n    min > 39 ? max = min\
    \ : min = max\n    min > 40 ? max = min : min = max\n    min > 41 ? max = min\
    \ : min = max\n    min > 42 ? max = min : min = max\n    min > 43 ? max = min\
    \ : min = max\n    min > \nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpflwlg1kn_test.go:25:15: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075378
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min == max {\n        return min + 1\n    }\n    min\
    \ += min + 1\n    max -= min + 1\n    for i := min; i <= max; i++ {\n        if\
    \ arr[i] > arr[n-1] {\n            max = i\n        } else {\n            min\
    \ = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpo36kfci9_test.go:67: expected '%!s(int=4)', got '%!s(int=16)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpo36kfci9_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=14)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpo36kfci9_test.go:67: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpo36kfci9_test.go:67:\
    \ expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpo36kfci9_test.go:67: expected '%!s(int=0)', got '%!s(int=10)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpo36kfci9_test.go:67:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpo36kfci9_test.go:67: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp0yi3d4zf_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp0yi3d4zf_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075375
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[i+1]\
    \ {\n            min = i + 1\n            break\n        }\n    }\n    return\
    \ min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpxa10pzpu_test.go:25\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpxa10pzpu_test.go:40\
    \ +0x786\ntesting.tRunner(0xc0001031e0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[i+1] {\n            min = i\n            break\n    \
    \    }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp1c760if6_test.go:21\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp1c760if6_test.go:42\
    \ +0x7a5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075379
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    for i := 1; i < n; i++ {\n        if arr[i] < min {\n \
    \           min = arr[i]\n        }\n    }\n    max := arr[0]\n    for i := 1;\
    \ i < n; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n\
    \    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpo5oqymx0_test.go:58: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpo5oqymx0_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpo5oqymx0_test.go:58: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpo5oqymx0_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpo5oqymx0_test.go:58: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpo5oqymx0_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return min\n    }\n\
    \    min += min\n    max -= max\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return min\n    }\n\
    \    return 0\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpkznukctp_test.go:72: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpkznukctp_test.go:72:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpkznukctp_test.go:72: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpkznukctp_test.go:72:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpkznukctp_test.go:72: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min == max {\n        return 0\n    }\n    return min\
    \ + smallest_change(arr[:min]) + smallest_change(arr[max+1:])\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0001d25e0, 0x0?, 0x2})\n\
    \t/tmp/tmpst9yodle_test.go:35 +0x118\ncommand-line-arguments_test.smallest_change({0xc0001d25d8,\
    \ 0x3b?, 0x3})\n\t/tmp/tmpst9yodle_test.go:35 +0xea\ncommand-line-arguments_test.smallest_change({0xc0001d25d0,\
    \ 0x0?, 0x4})\n\t/tmp/tmpst9yodle_test.go:35 +0xea\ncommand-line-arguments_test.smallest_change({0xc0001d25b8,\
    \ 0x5e3ea0?, 0x7})\n\t/tmp/tmpst9yodle_test.go:35 +0xea\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpst9yodle_test.go:46 +0x172\ntesting.tRunner(0xc000199040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i-1\n            break\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmpdpz9b09p_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpdpz9b09p_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := 0; i < n; i++ {\n        for j := n - 1; j >= i; j--\
    \ {\n            if arr[j] != arr[j] {\n                min = min(min, j-i+1)\n\
    \                break\n            }\n        }\n    }\n    return min\n}\n\n\
    func TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpusqpvswa_test.go:27:23: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] > arr[n-i]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpwtufgnwn_test.go:25\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpwtufgnwn_test.go:47\
    \ +0x754\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075373
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max\n\
    \        if arr[i] > arr[n-i-1] {\n            max = i\n        }\n        if\
    \ arr[i] < arr[n-i-1] {\n            min = i\n        }\n    }\n    if min ==\
    \ max {\n        return 0\n    }\n    if min > max {\n        min, max = max,\
    \ min\n    }\n    return max-min+1\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe23i3gld_test.go:26:9: max declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max\
    \ = min\n            break\n        }\n    }\n    return max - min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpb9aollf__test.go:26\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpb9aollf__test.go:47\
    \ +0x9b9\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := arr[0]\n    max := arr[n-1]\n    for i := 1; i < n; i++ {\n       \
    \ if arr[i] < min {\n            min = arr[i]\n        }\n        if arr[i] >\
    \ max {\n            max = arr[i]\n        }\n    }\n    return max - min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpund_6v_6_test.go:56: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpund_6v_6_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpund_6v_6_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpund_6v_6_test.go:56:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpund_6v_6_test.go:56: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpund_6v_6_test.go:56:\
    \ expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] != arr[min] {\n            min = i\n        }\n    }\n    return\
    \ min + 1\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp_trk6m6i_test.go:48: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp_trk6m6i_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp_trk6m6i_test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp_trk6m6i_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp_trk6m6i_test.go:48: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp_trk6m6i_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp_trk6m6i_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp_trk6m6i_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    max := length\n    for i := 0; i < length/2; i++\
    \ {\n        if arr[i] > arr[i+1] {\n            min = i\n            max = i+1\n\
    \        }\n    }\n    if min == max {\n        return length\n    }\n    if min\
    \ > max {\n        min, max = max, min\n    }\n    min += 1\n    max -= 1\n  \
    \  i := 0\n    j := length - 1\n    k := 0\n    min := 0\n    max := 0\n    for\
    \ i < max && j < min {\n        if arr[i] != arr[j] {\n            arr[k] = arr[j]\n\
    \            arr[j] = arr[i]\n            arr[i] = arr[k]\n            k += 1\n\
    \            j += 1\n            i -= 1\n        } else {\n            j += 1\n\
    \        }\n    }\n    return k\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo22oe0ae_test.go:42:9: no new variables on left side of :=

    /tmp/tmpo22oe0ae_test.go:43:9: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i]\
    \ > arr[i-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] > arr[max-1] {\n            max\
    \ = i\n            break\n        }\n    }\n    return max - min + 1\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpmdzctwyp_test.go:60: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpmdzctwyp_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmpmdzctwyp_test.go:60: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpmdzctwyp_test.go:60:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[min] {\n\
    \            min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmptonqol0h_test.go:51: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmptonqol0h_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmptonqol0h_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmptonqol0h_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmptonqol0h_test.go:51: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmptonqol0h_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmptonqol0h_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075381
- exit_code: null
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for min < max {\n        midpoint := (min +\
    \ max) / 2\n        if arr[midpoint] == arr[midpoint-1] {\n            min++\n\
    \        } else {\n            min = 0\n        }\n        if arr[midpoint] ==\
    \ arr[midpoint+1] {\n            max--\n        } else {\n            max = n-1\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075394
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0dvykfsr_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0dvykfsr_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0dvykfsr_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0dvykfsr_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0dvykfsr_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0dvykfsr_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp0dvykfsr_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        if arr[i] >\
    \ arr[n-1] {\n            max = i\n        } else {\n            min = i\n   \
    \     }\n    }\n    if min > max {\n        return min\n    }\n    min += min\
    \ / 2\n    max -= max / 2\n    if min > max {\n        return min\n    }\n   \
    \ return smallest_change(arr[:min]) + smallest_change(arr[min+1:max])\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4528, 0x5e3ea0?,\
    \ 0x2})\n\t/tmp/tmpt30s4fev_test.go:40 +0x15f\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpt30s4fev_test.go:57 +0x37f\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[len(arr)-i-1] {\n            min = length-i-1\n            break\n   \
    \     }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n\
    \  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__1\
    \ (0.00s)\n        tmp54nrnmaw_test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__2 (0.00s)\n        tmp54nrnmaw_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__3\
    \ (0.00s)\n        tmp54nrnmaw_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__4 (0.00s)\n        tmp54nrnmaw_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=5)'\n    --- FAIL: TestSmallest_Change/test_num__5\
    \ (0.00s)\n        tmp54nrnmaw_test.go:53: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__6 (0.00s)\n        tmp54nrnmaw_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp54nrnmaw_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    min := 0\n    max := n-1\n    for i := 0; i\
    \ < n; i++ {\n        if arr[i] > max {\n            max = i\n        }\n    \
    \    if arr[i] < min {\n            min = i\n        }\n    }\n    if min > max\
    \ {\n        return n\n    }\n    min += min\n    max -= max\n    for i := 0;\
    \ i < n; i++ {\n        if arr[i] > max {\n            max = i\n        }\n  \
    \      if arr[i] < min {\n            min = i\n        }\n    }\n    if min >\
    \ max {\n        return n\n    }\n    min += min\n    max -= max\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n        }\n\
    \        if arr[i] < min {\n            min = i\n        }\n    }\n    if min\
    \ > max {\n        return n\n    }\n    min += min\n    max -= max\n    for i\
    \ := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n       \
    \ }\n        if arr[i] < min {\n            min = i\n        }\n    }\n    if\
    \ min > max {\n        return n\n    }\n    min += min\n    max -= max\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n     \
    \   }\n        if arr[i] < min {\n            min = i\n        }\n    }\n    if\
    \ min > max {\n        return n\n    }\n    min += min\n    max -= max\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n     \
    \   }\n        if arr[i] < min {\n            min = i\n        }\n    }\n    if\
    \ min > max {\n        return n\n    }\n    min += min\n    max -= max\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n     \
    \   }\n        if arr[i] < min {\n            min = i\n        }\n    }\n    if\
    \ min > max {\n        return n\n    }\n    min += min\n    max -= max\n    for\
    \ i := 0; i < n; i++ {\n        if arr[i] > max {\n            max = i\n     \
    \   }\n        if arr[i] < min {\n            min = i\n        }\n    }\n    if\
    \ min > max {\n        return n\n    }\n    min += min\n    max -= max\n    for\
    \ i := 0\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zpjis4z_test.go:132:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075380
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i + 1\n            break\n        }\n    }\n\
    \    for i := 0; i < n; i++ {\n        if arr[i] > arr[min] {\n            max\
    \ = min\n            break\n        }\n        if arr[i] < arr[max] {\n      \
    \      max = i\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmp6c1e2sdd_test.go:26 +0xd9\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmp6c1e2sdd_test.go:50 +0xd5\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return -1\n    }\n    min += 1\n\
    \    max -= 1\n    i := 0\n    j := n-1\n    k := 0\n    for i < max && j < min\
    \ {\n        if arr[i] != arr[j] {\n            arr[k] = arr[j]\n            arr[j]\
    \ = arr[i]\n            arr[i] = arr[k]\n            k += 1\n            j +=\
    \ 1\n            i -= 1\n        } else {\n            j += 1\n        }\n   \
    \ }\n    return k\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpjt11oniz_test.go:75: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpjt11oniz_test.go:75:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpjt11oniz_test.go:75: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpjt11oniz_test.go:75:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpjt11oniz_test.go:75: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpjt11oniz_test.go:75:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length < 2 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ != arr[length-i-1] {\n            min = length-i\n            break\n      \
    \  }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n \
    \ candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=4)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpqldvack__test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpqldvack__test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n \
    \           min = i\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpy7x9mxn8_test.go:24\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpy7x9mxn8_test.go:38\
    \ +0x7f3\ntesting.tRunner(0xc000198ea0, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    if length == 0 {\n        return 0\n\
    \    }\n    min := length\n    for i := 0; i < length/2; i++ {\n        if arr[i]\
    \ > arr[length-i-1] {\n            min = length-i\n            break\n       \
    \ }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp3w7eqb3x_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp3w7eqb3x_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > max {\n            max = i\n        }\n        if arr[i] < min {\n       \
    \     min = i\n        }\n    }\n    if min > max {\n        return n\n    }\n\
    \    min += 1\n    max -= 1\n    i := 0\n    j := n - 1\n    k := 0\n    min +=\
    \ 1\n    max -= 1\n    for i < min {\n        arr[i] = arr[j]\n        i++\n \
    \       j--\n        k++\n    }\n    for j < max {\n        arr[i] = arr[k]\n\
    \        i++\n        k--\n    }\n    return i - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpy_xc4jk7_test.go:77: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpy_xc4jk7_test.go:77:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpy_xc4jk7_test.go:77: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpy_xc4jk7_test.go:77:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmpy_xc4jk7_test.go:77: expected '%!s(int=1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[i+1] {\n            max =\
    \ i\n            break\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return max\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c45f0?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmpwe3l69i7_test.go:26 +0xb7\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpwe3l69i7_test.go:50 +0xd5\ntesting.tRunner(0xc0001924e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp0dvykfsr_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp0dvykfsr_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp0dvykfsr_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp0dvykfsr_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp0dvykfsr_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp0dvykfsr_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp0dvykfsr_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            max = i+1\n            break\n\
    \        }\n    }\n    if min == max {\n        return n\n    }\n    min += min\
    \ % 2\n    max += max % 2\n    for i := min; i <= max; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            n\
    \ -= 2\n        }\n    }\n    return n\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of\
    \ range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4538?, 0x5e3ea0?,\
    \ 0x37930?})\n\t/tmp/tmppjcyhmc8_test.go:38 +0xec\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmppjcyhmc8_test.go:55 +0x1cd\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i > 0; i-- {\n        if arr[i] > arr[i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpukbdwf56_test.go:53: expected '%!s(int=4)', got '%!s(int=6)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpukbdwf56_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpukbdwf56_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpukbdwf56_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075376
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[len(arr)-(i+1)]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpb_hcch6t_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpb_hcch6t_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpb_hcch6t_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpb_hcch6t_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpb_hcch6t_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpb_hcch6t_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpb_hcch6t_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpb_hcch6t_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] != arr[len(arr)-i-1] {\n\
    \            min = i\n            break\n        }\n    }\n    return min\n}\n\
    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwbozwme3_test.go:52: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwbozwme3_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpwbozwme3_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpwbozwme3_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpwbozwme3_test.go:52: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpwbozwme3_test.go:52:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpwbozwme3_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpwbozwme3_test.go:52:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\n\
    \    max := len(arr)\n    for i := 0; i < max; i++ {\n        if arr[i] > arr[len(arr)-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    for i := 0;\
    \ i < min; i++ {\n        if arr[i] < arr[len(arr)-i-1] {\n            max = i\n\
    \            break\n        }\n    }\n    return max - min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpgbd67xmp_test.go:59: expected '%!s(int=4)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpgbd67xmp_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=-5)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpgbd67xmp_test.go:59: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpgbd67xmp_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpgbd67xmp_test.go:59: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpgbd67xmp_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpgbd67xmp_test.go:59: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpgbd67xmp_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[i+1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[i+1] {\n            max =\
    \ i\n            break\n        }\n    }\n    if min > max {\n        return min\n\
    \    }\n    return smallest_change(arr[:min]) + 1 + smallest_change(arr[max:])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of\
    \ range [2] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4560?, 0x44e628?,\
    \ 0x5648fb?})\n\t/tmp/tmpdm67q4jk_test.go:26 +0x150\ncommand-line-arguments_test.smallest_change({0xc0000c4550,\
    \ 0x4, 0x4})\n\t/tmp/tmpdm67q4jk_test.go:40 +0xff\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpdm67q4jk_test.go:55 +0x317\ntesting.tRunner(0xc000120340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[n-1] {\n            max = i\n        } else {\n            min = i\n \
    \       }\n    }\n    if min > max {\n        return -1\n    }\n    min += 1\n\
    \    max -= 1\n    for i := min; i <= max; i++ {\n        if arr[i] > arr[n-1]\
    \ {\n            max = i\n        } else {\n            min = i\n        }\n \
    \   }\n    if min > max {\n        return -1\n    }\n    return min\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp90vzb9w6_test.go:70: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp90vzb9w6_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp90vzb9w6_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp90vzb9w6_test.go:70:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp90vzb9w6_test.go:70: expected '%!s(int=0)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp90vzb9w6_test.go:70:\
    \ expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestSmallest_Change/test_num__7\
    \ (0.00s)\n        tmp90vzb9w6_test.go:70: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    max := n\n    for i := n\
    \ - 1; i >= 0; i-- {\n        if arr[i] > arr[n-1] {\n            min = i\n  \
    \          break\n        }\n    }\n    for i := 0; i < n; i++ {\n        if arr[i]\
    \ > arr[min] {\n            max = i\n            break\n        }\n    }\n   \
    \ if min == max {\n        return 0\n    }\n    return min + 1 - max\n}\n\nfunc\
    \ TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected:\
    \ 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1, 2, 3, 2, 1}), expected:\
    \ 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual:\
    \ candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0, 1}),\
    \ expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmp95874y1d_test.go:29\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmp95874y1d_test.go:52\
    \ +0x916\ntesting.tRunner(0xc000192680, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    length := len(arr)\n    min := length\n    for i := 0; i <\
    \ length/2; i++ {\n        if arr[i] > arr[length-i-1] {\n            min = length-i\n\
    \            break\n        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmp95p95n75_test.go:50: expected '%!s(int=4)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmp95p95n75_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=7)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmp95p95n75_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmp95p95n75_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmp95p95n75_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmp95p95n75_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmp95p95n75_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmp95p95n75_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7idah_f_test.go:274:6: expected ''('', found TestSmallest_Change

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075368
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := 0\n    max := n-1\n    for i :=\
    \ 0; i < n; i++ {\n        if arr[i] > arr[n-1] {\n            max = i\n     \
    \   } else {\n            min = i\n        }\n    }\n    if min > max {\n    \
    \    return min\n    }\n    return smallest_change(arr[:min]) + smallest_change(arr[min+1:max])\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [4:3] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [4:3]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change({0xc0000c4550, 0x5e3ea0?,\
    \ 0x4})\n\t/tmp/tmpznf47tbz_test.go:32 +0x10e\ncommand-line-arguments_test.TestSmallest_Change(0x0?)\n\
    \t/tmp/tmpznf47tbz_test.go:47 +0x317\ntesting.tRunner(0xc0001a01a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := len(arr)\
    \ - 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[min] {\n \
    \           min = i\n        }\n    }\n    return min + 1\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpoykvat67_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__7 (0.00s)\n        tmpoykvat67_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075371
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := 0; i < n; i++ {\n        max := max\n\
    \        if arr[i] > arr[max] {\n            max = i\n        }\n        if arr[i]\
    \ < arr[min] {\n            min = i\n        }\n    }\n    return max - min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [8] with length 8 [recovered]\n\tpanic: runtime error: index out of\
    \ range [8] with length 8\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpo52xxt09_test.go:27\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpo52xxt09_test.go:44\
    \ +0x1b\ntesting.tRunner(0xc000198ea0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    min := len(arr) - 1\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] > arr[len(arr)-i-1] {\n            min = i\n        }\n   \
    \ }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate\
    \ := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpwpsrrs8p_test.go:48: expected '%!s(int=0)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpwpsrrs8p_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    max := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i]\
    \ > arr[n-1] {\n            min = i\n            break\n        }\n    }\n   \
    \ for i := 0; i < n; i++ {\n        if arr[i] < arr[min] {\n            max =\
    \ i\n            break\n        }\n    }\n    return max - min\n}\n\nfunc TestSmallest_Change(t\
    \ *testing.T) {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}),\
    \ expected: 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual:\
    \ candidate([]int{3, 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}),\
    \ expected: 0 },\n     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\npanic: runtime error: index out\
    \ of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of\
    \ range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.smallest_change(...)\n\t/tmp/tmpy__f6tjv_test.go:32\n\
    command-line-arguments_test.TestSmallest_Change(0x0?)\n\t/tmp/tmpy__f6tjv_test.go:52\
    \ +0x845\ntesting.tRunner(0xc0001a0340, 0x528f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075369
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    min := n\n    for i := n - 1; i >= 0; i--\
    \ {\n        if arr[i] != arr[n-i-1] {\n            min = i\n            break\n\
    \        }\n    }\n    return min\n}\n\nfunc TestSmallest_Change(t *testing.T)\
    \ {\n  candidate := smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmpygujz0dk_test.go:50: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmpygujz0dk_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmpygujz0dk_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmpygujz0dk_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmpygujz0dk_test.go:50: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmpygujz0dk_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSmallest_Change/test_num__6\
    \ (0.00s)\n        tmpygujz0dk_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075374
- exit_code: 2
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := 0\n    max := n-1\n    min += smallest_change_helper(arr, min, max)\n\
    \    return min\n}\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate :=\
    \ smallest_change\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2,\
    \ 3, 5, 4, 7, 9, 6}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 3, 2, 2}), expected: 1 },\n     { actual: candidate([]int{1, 4, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3,\
    \ 1, 1, 3}), expected: 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n\
    \     { actual: candidate([]int{0, 1}), expected: 1 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu3z31a5g_test.go:25:12: undefined: smallest_change_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075381
- exit_code: 1
  program: "package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given an array arr of integers, find the minimum number of elements\
    \ that\n// need to be changed to make the array palindromic. A palindromic array\
    \ is an array that\n// is read the same backwards and forwards. In one change,\
    \ you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1,\
    \ 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2,\
    \ 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr\
    \ []int) int {\n    n := len(arr)\n    if n < 2 {\n        return 0\n    }\n \
    \   min := n\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] != arr[n-i-1]\
    \ {\n            min = i\n            break\n        }\n    }\n    return min\n\
    }\n\nfunc TestSmallest_Change(t *testing.T) {\n  candidate := smallest_change\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 5, 4, 7, 9, 6}),\
    \ expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 3, 2, 2}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 4, 2}), expected: 1 },\n     { actual:\
    \ candidate([]int{1, 4, 4, 2}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 2, 3, 2, 1}), expected: 0 },\n     { actual: candidate([]int{3, 1, 1, 3}), expected:\
    \ 0 },\n     { actual: candidate([]int{1}), expected: 0 },\n     { actual: candidate([]int{0,\
    \ 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSmallest_Change (0.00s)\n    --- FAIL: TestSmallest_Change/test_num__0\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=4)', got '%!s(int=7)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__1 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=6)'\n    --- FAIL: TestSmallest_Change/test_num__2\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__3 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestSmallest_Change/test_num__4\
    \ (0.00s)\n        tmppvdb9u7f_test.go:53: expected '%!s(int=0)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSmallest_Change/test_num__5 (0.00s)\n        tmppvdb9u7f_test.go:53:\
    \ expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075369
