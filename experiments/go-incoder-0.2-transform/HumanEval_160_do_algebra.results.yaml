language: go_test.go
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklrtexb_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvei785h_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    result := 0\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"/\":\n            result /= operand[i]\n        case \"**\":\n           \
    \ result **= operand[i]\n        default:\n            fmt.Println(\"Invalid operator\"\
    )\n            return -1\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpououjuk7_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result // operand[i]\n        case \"**\":\n     \
    \       result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1wr02luw_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"No operator given\")\n    case 1:\n        switch operator[0]\
    \ {\n        case \"+\":\n            result = operand[0] + operand[1]\n     \
    \   case \"-\":\n            result = operand[0] - operand[1]\n        case \"\
    *\":\n            result = operand[0] * operand[1]\n        case \"/\":\n    \
    \        result = operand[0] / operand[1]\n        case \"**\":\n            result\
    \ = operand[0] ** operand[1]\n        default:\n            fmt.Println(\"Unknown\
    \ operator\")\n        }\n    default:\n        switch len(operand) {\n      \
    \  case 0:\n            fmt.Println(\"No operand given\")\n        case 1:\n \
    \           switch operator[0] {\n            case \"+\":\n                result\
    \ = operand[0] + operand[1]\n            case \"-\":\n                result =\
    \ operand[0] - operand[1]\n            case \"*\":\n                result = operand[0]\
    \ * operand[1]\n            case \"/\":\n                result = operand[0] /\
    \ operand[1]\n            case \"**\":\n                result = operand[0] **\
    \ operand[1]\n            default:\n                fmt.Println(\"Unknown operator\"\
    )\n            }\n        default:\n            switch operator[0] {\n       \
    \     case \"+\":\n                result = operand[0] + do_algebra(operator[1:],\
    \ operand[1:])\n            case \"-\":\n                result = operand[0] -\
    \ do_algebra(operator[1:], operand[1:])\n            case \"*\":\n           \
    \     result = operand[0] * do_algebra(operator[1:], operand[1:])\n          \
    \  case \"/\":\n                result = operand[0] / do_algebra(operator[1:],\
    \ operand[1:])\n            case \"**\":\n                result = operand[0]\
    \ ** do_algebra(operator[1:], operand[1:])\n            default:\n           \
    \     fmt.Println(\"Unknown operator\")\n            }\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94vieins_test.go:42:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    /tmp/tmp94vieins_test.go:61:40: invalid operation: cannot indirect operand[1]
    (variable of type int)

    /tmp/tmp94vieins_test.go:76:40: invalid operation: cannot indirect do_algebra(operator[1:],
    operand[1:]) (value of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"/\":\n     \
    \       result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fmt.Println(\"Unknown operator\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0re5x633_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklrtexb_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"No operator\")\n    case 1:\n        switch operator[0] {\n\
    \        case \"+\":\n            result = operand[0] + operand[1]\n        case\
    \ \"-\":\n            result = operand[0] - operand[1]\n        case \"*\":\n\
    \            result = operand[0] * operand[1]\n        case \"//\":\n        \
    \    result = operand[0] // operand[1]\n        case \"**\":\n            result\
    \ = operand[0] ** operand[1]\n        default:\n            fmt.Println(\"Invalid\
    \ operator\")\n        }\n    default:\n        switch operator[0] {\n       \
    \ case \"+\":\n            result = do_algebra(operator[1:], operand) + do_algebra(operator[1:],\
    \ operand)\n        case \"-\":\n            result = do_algebra(operator[1:],\
    \ operand) - do_algebra(operator[1:], operand)\n        case \"*\":\n        \
    \    result = do_algebra(operator[1:], operand) * do_algebra(operator[1:], operand)\n\
    \        case \"//\":\n            result = do_algebra(operator[1:], operand)\
    \ // do_algebra(operator[1:], operand)\n        case \"**\":\n            result\
    \ = do_algebra(operator[1:], operand) ** (do_algebra(operator[1:], operand))\n\
    \        default:\n            fmt.Println(\"Invalid operator\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx_xmn5cm_test.go:42:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    /tmp/tmpx_xmn5cm_test.go:57:59: invalid operation: cannot indirect (do_algebra(operator[1:],
    operand)) (value of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Error: operator and operand list must be of same length\")\n        return -1\n\
    \    }\n    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i]\n     \
    \   case \"-\":\n            result -= operand[i]\n        case \"*\":\n     \
    \       result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result **= operand[i]\n        default:\n \
    \           fmt.Println(\"Error: invalid operator\")\n            return -1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpac34dxmi_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Error: Invalid operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjrdth2nv_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"No operator\")\n    case 1:\n        fmt.Println(\"Only one\
    \ operator\")\n    case 2:\n        switch operator[0] {\n        case \"+\":\n\
    \            result = operand[0] + operand[1]\n        case \"-\":\n         \
    \   result = operand[0] - operand[1]\n        case \"*\":\n            result\
    \ = operand[0] * operand[1]\n        case \"/\":\n            result = operand[0]\
    \ / operand[1]\n        case \"**\":\n            result = operand[0] ** operand[1]\n\
    \        default:\n            fmt.Println(\"Invalid operator\")\n        }\n\
    \    default:\n        fmt.Println(\"Invalid number of operators\")\n    }\n \
    \   return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfjj8p9m0_test.go:44:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Initialize result to zero.\n    var result int = 0\n  \
    \  // Initialize a temporary variable for holding the current operand.\n    var\
    \ temp int = 0\n    // Initialize a temporary variable for holding the current\
    \ operator.\n    var temp_operator string = \"\"\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_operand int = 0\n \
    \   // Initialize a temporary variable for holding the current operator.\n   \
    \ var temp_result int = 0\n    // Initialize a temporary variable for holding\
    \ the current operator.\n    var temp_operand int = 0\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_result int = 0\n  \
    \  // Initialize a temporary variable for holding the current operator.\n    var\
    \ temp_operand int = 0\n    // Initialize a temporary variable for holding the\
    \ current operator.\n    var temp_result int = 0\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_operand int = 0\n \
    \   // Initialize a temporary variable for holding the current operator.\n   \
    \ var temp_result int = 0\n    // Initialize a temporary variable for holding\
    \ the current operator.\n    var temp_operand int = 0\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_result int = 0\n  \
    \  // Initialize a temporary variable for holding the current operator.\n    var\
    \ temp_operand int = 0\n    // Initialize a temporary variable for holding the\
    \ current operator.\n    var temp_result int = 0\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_operand int = 0\n \
    \   // Initialize a temporary variable for holding the current operator.\n   \
    \ var temp_result int = 0\n    // Initialize a temporary variable for holding\
    \ the current operator.\n    var temp_operand int = 0\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_result int = 0\n  \
    \  // Initialize a temporary variable for holding the current operator.\n    var\
    \ temp_operand int = 0\n    // Initialize a temporary variable for holding the\
    \ current operator.\n    var temp_result int = 0\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_operand int = 0\n \
    \   // Initialize a temporary variable for holding the current operator.\n   \
    \ var temp_result int = 0\n    // Initialize a temporary variable for holding\
    \ the current operator.\n    var temp_operand int = 0\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_result int = 0\n  \
    \  // Initialize a temporary variable for holding the current operator.\n    var\
    \ temp_operand int = 0\n    // Initialize a temporary variable for holding the\
    \ current operator.\n    var temp_result int = 0\n    // Initialize a temporary\
    \ variable for holding the current operator.\n    var temp_operand int = 0\n \
    \   // Initialize a temporary variable for holding the current operator.\n   \
    \ var temp_result int = 0\n    // Initialize a temporary variable for holding\
    \ the current operator.\n    var temp_operand int = 0\n    // Initialize a temporary\
    \ variable for holding the \nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ihm4rsu_test.go:88:6: expected ''('', found TestDo_Algebra

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Initialize result to 0\n    var result int = 0\n\n    //\
    \ Iterate through each operator in operator list\n    for _, op := range operator\
    \ {\n        // Iterate through each operand in operand list\n        for _, operand\
    \ := range operand {\n            // Perform the operation on the operand\n  \
    \          switch op {\n            case \"+\":\n                result += operand\n\
    \            case \"-\":\n                result -= operand\n            case\
    \ \"*\":\n                result *= operand\n            case \"//\":\n      \
    \          result /= operand\n            case \"**\":\n                result\
    \ **= operand\n            }\n        }\n    }\n\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp92tpc9ll_test.go:45:25: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    /\":\n            result = result / operand[i]\n        case \"**\":\n       \
    \     result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Unknown operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz087whoe_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvei785h_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"Error: operator list is empty.\")\n    case 1:\n        fmt.Println(\"\
    Error: operator list has only one operator.\")\n    case 2:\n        switch operator[0]\
    \ {\n        case \"+\":\n            result = operand[0] + operand[1]\n     \
    \   case \"-\":\n            result = operand[0] - operand[1]\n        case \"\
    *\":\n            result = operand[0] * operand[1]\n        case \"//\":\n   \
    \         result = operand[0] // operand[1]\n        case \"**\":\n          \
    \  result = operand[0] ** operand[1]\n        default:\n            fmt.Println(\"\
    Error: unknown operator.\")\n        }\n    default:\n        fmt.Println(\"Error:\
    \ operator list has more than one operator.\")\n    }\n    return result\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd3fr6h6t_test.go:44:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"/\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc7wbwb9h_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"/\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc7wbwb9h_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"No operator given\")\n    case 1:\n        fmt.Println(\"\
    Only one operator given\")\n    case 2:\n        switch operator[0] {\n      \
    \  case \"+\":\n            result = operand[0] + operand[1]\n        case \"\
    -\":\n            result = operand[0] - operand[1]\n        case \"*\":\n    \
    \        result = operand[0] * operand[1]\n        case \"/\":\n            result\
    \ = operand[0] / operand[1]\n        case \"**\":\n            result = operand[0]\
    \ ** operand[1]\n        default:\n            fmt.Println(\"Unknown operator\"\
    )\n        }\n    default:\n        fmt.Println(\"Too many operators\")\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpthpxpzar_test.go:44:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvei785h_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"/\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Unknown operator: \" + operator[i])\n \
    \       }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphry3imzj_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    \n    // Your code here\n   \
    \ \n    return 0\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpvkxl9r0d_test.go:49: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpvkxl9r0d_test.go:49:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpvkxl9r0d_test.go:49: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Error: Operator and operand list length mismatch\")\n        return -1\n    }\n\
    \    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        default:\n        \
    \    fmt.Println(\"Error: Invalid operator\")\n            return -1\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3sax4plz_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    The length of operator list is different than operand list minus one.\")\n   \
    \     return -1\n    }\n    result := 0\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfrzeg07m_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fmt.Println(\"Unknown operator\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp189jx1pa_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    \n    result := 0\n    \n   \
    \ for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n       \
    \ case \"+\":\n            result += operand[i]\n        case \"-\":\n       \
    \     result -= operand[i]\n        case \"*\":\n            result *= operand[i]\n\
    \        case \"/\":\n            result /= operand[i]\n        case \"**\":\n\
    \            result **= operand[i]\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpebtn_mrk_test.go:42:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ -1\n    }\n    result := 0\n    switch operator[0] {\n    case \"+\":\n    \
    \    result = operand[0] + operand[1]\n    case \"-\":\n        result = operand[0]\
    \ - operand[1]\n    case \"*\":\n        result = operand[0] * operand[1]\n  \
    \  case \"/\":\n        result = operand[0] / operand[1]\n    case \"**\":\n \
    \       result = operand[0] ** operand[1]\n    default:\n        return -1\n \
    \   }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpns88jb0a_test.go:41:32: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Operator and operand list length must be equal.\")\n        return -1\n    }\n\
    \    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1hbrh1i1_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    The length of operator list is different than operand list minus one.\")\n   \
    \     return -1\n    }\n    result := 0\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfrzeg07m_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    /\":\n            result = result / operand[i]\n        case \"**\":\n       \
    \     result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Unknown operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz087whoe_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fmt.Println(\"Invalid\
    \ operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp661f0u1y_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fmt.Println(\"Invalid operator\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3n9uj1sn_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvei785h_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"/\":\n     \
    \       result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ljtz6xf_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"Operator list is empty\")\n    case 1:\n\
    \        fmt.Println(\"Operator list has one element\")\n    case 2:\n       \
    \ fmt.Println(\"Operator list has two elements\")\n    default:\n        fmt.Println(\"\
    Operator list has more than two elements\")\n    }\n    switch len(operand) {\n\
    \    case 0:\n        fmt.Println(\"Operand list is empty\")\n    case 1:\n  \
    \      fmt.Println(\"Operand list has one element\")\n    case 2:\n        fmt.Println(\"\
    Operand list has two elements\")\n    default:\n        fmt.Println(\"Operand\
    \ list has more than two elements\")\n    }\n    switch len(operator) {\n    case\
    \ 0:\n        fmt.Println(\"Operator list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operator list has one element\")\n    case 2:\n        fmt.Println(\"Operator\
    \ list has two elements\")\n    default:\n        fmt.Println(\"Operator list\
    \ has more than two elements\")\n    }\n    switch len(operand) {\n    case 0:\n\
    \        fmt.Println(\"Operand list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operand list has one element\")\n    case 2:\n        fmt.Println(\"Operand list\
    \ has two elements\")\n    default:\n        fmt.Println(\"Operand list has more\
    \ than two elements\")\n    }\n    switch len(operator) {\n    case 0:\n     \
    \   fmt.Println(\"Operator list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operator list has one element\")\n    case 2:\n        fmt.Println(\"Operator\
    \ list has two elements\")\n    default:\n        fmt.Println(\"Operator list\
    \ has more than two elements\")\n    }\n    switch len(operand) {\n    case 0:\n\
    \        fmt.Println(\"Operand list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operand list has one element\")\n    case 2:\n        fmt.Println(\"Operand list\
    \ has two elements\")\n    default:\n        fmt.Println(\"Operand list has more\
    \ than two elements\")\n    }\n    switch len(operator) {\n    case 0:\n     \
    \   fmt.Println(\"Operator list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operator list has one element\")\n    case 2:\n        fmt.Println(\"Operator\
    \ list has two elements\")\n    default:\n        fmt.Println(\"Operator list\
    \ has more than two elements\")\n    }\n    switch len(operand) {\n    case 0:\n\
    \        fmt.Println(\"Operand list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operand list has one element\")\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo1tdhi7u_test.go:104:6: expected ''('', found TestDo_Algebra

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"No operator given\")\n    case 1:\n        switch operator[0]\
    \ {\n        case \"+\":\n            result = operand[0] + operand[1]\n     \
    \   case \"-\":\n            result = operand[0] - operand[1]\n        case \"\
    *\":\n            result = operand[0] * operand[1]\n        case \"//\":\n   \
    \         result = operand[0] / operand[1]\n        case \"**\":\n           \
    \ result = operand[0] ** operand[1]\n        default:\n            fmt.Println(\"\
    Unknown operator\")\n        }\n    case 2:\n        switch operator[0] {\n  \
    \      case \"+\":\n            result = operand[0] + operand[1]\n        case\
    \ \"-\":\n            result = operand[0] - operand[1]\n        case \"*\":\n\
    \            result = operand[0] * operand[1]\n        case \"//\":\n        \
    \    result = operand[0] / operand[1]\n        case \"**\":\n            result\
    \ = operand[0] ** operand[1]\n        default:\n            fmt.Println(\"Unknown\
    \ operator\")\n        }\n    default:\n        fmt.Println(\"Unknown number of\
    \ operators\")\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4pwjdhvo_test.go:42:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    /tmp/tmp4pwjdhvo_test.go:57:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code goes here\n    result := 0\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp0emq5yp_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklrtexb_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code goes here\n    result := 0\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp0emq5yp_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Unknown operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi319vncq_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"No operator\")\n    case 1:\n        fmt.Println(\"\
    One operator\")\n        switch operator[0] {\n        case \"+\":\n         \
    \   result = operand[0] + operand[1]\n        case \"-\":\n            result\
    \ = operand[0] - operand[1]\n        case \"*\":\n            result = operand[0]\
    \ * operand[1]\n        case \"/\":\n            result = operand[0] / operand[1]\n\
    \        case \"**\":\n            result = operand[0] ** operand[1]\n       \
    \ }\n    case 2:\n        fmt.Println(\"Two operators\")\n        switch operator[0]\
    \ {\n        case \"+\":\n            result = operand[0] + operand[1]\n     \
    \   case \"-\":\n            result = operand[0] - operand[1]\n        case \"\
    *\":\n            result = operand[0] * operand[1]\n        case \"/\":\n    \
    \        result = operand[0] / operand[1]\n        case \"**\":\n            result\
    \ = operand[0] ** operand[1]\n        }\n        switch operator[1] {\n      \
    \  case \"+\":\n            result = operand[0] + operand[1]\n        case \"\
    -\":\n            result = operand[0] - operand[1]\n        case \"*\":\n    \
    \        result = operand[0] * operand[1]\n        case \"/\":\n            result\
    \ = operand[0] / operand[1]\n        case \"**\":\n            result = operand[0]\
    \ ** operand[1]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6z7wul3x_test.go:44:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    /tmp/tmp6z7wul3x_test.go:58:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    /tmp/tmp6z7wul3x_test.go:70:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"Error: operator list is empty.\")\n    case 1:\n        fmt.Println(\"\
    Error: operator list has only one element.\")\n    case 2:\n        switch operator[0]\
    \ {\n        case \"+\":\n            result = operand[0] + operand[1]\n     \
    \   case \"-\":\n            result = operand[0] - operand[1]\n        case \"\
    *\":\n            result = operand[0] * operand[1]\n        case \"/\":\n    \
    \        result = operand[0] / operand[1]\n        case \"**\":\n            result\
    \ = operand[0] ** operand[1]\n        default:\n            fmt.Println(\"Error:\
    \ unknown operator in operator list.\")\n        }\n    default:\n        fmt.Println(\"\
    Error: operator list has more than one element.\")\n    }\n    return result\n\
    }\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgyk_a90o_test.go:44:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklrtexb_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvei785h_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvei785h_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeh379j25_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code goes here\n    result := 0\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp0emq5yp_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int = 0\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbaiwr_vw_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"No operator given\")\n    case 1:\n        fmt.Println(\"\
    Only one operator given\")\n    case 2:\n        switch operator[0] {\n      \
    \  case \"+\":\n            result = operand[0] + operand[1]\n        case \"\
    -\":\n            result = operand[0] - operand[1]\n        case \"*\":\n    \
    \        result = operand[0] * operand[1]\n        case \"/\":\n            result\
    \ = operand[0] / operand[1]\n        case \"**\":\n            result = operand[0]\
    \ ** operand[1]\n        default:\n            fmt.Println(\"Unknown operator\"\
    )\n        }\n    default:\n        fmt.Println(\"More than two operators given\"\
    )\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpalruvriz_test.go:44:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    The length of operator list is different from operand list length\")\n       \
    \ return -1\n    }\n    result := 0\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"The operator is not supported\")\n    \
    \        return -1\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi95petry_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        return -1\n\
    \    }\n    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i]\n     \
    \   case \"-\":\n            result -= operand[i]\n        case \"*\":\n     \
    \       result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result **= operand[i]\n        }\n    }\n \
    \   return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnskq3g6g_test.go:42:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    switch len(operator) {\n    case 0:\n\
    \        fmt.Println(\"No operator given\")\n        return 0\n    case 1:\n \
    \       fmt.Println(\"Only one operator given\")\n        return 0\n    default:\n\
    \        switch len(operand) {\n        case 0:\n            fmt.Println(\"No\
    \ operand given\")\n            return 0\n        case 1:\n            fmt.Println(\"\
    Only one operand given\")\n            return 0\n        default:\n          \
    \  switch operator[0] {\n            case \"+\":\n                result = operand[0]\
    \ + operand[1]\n            case \"-\":\n                result = operand[0] -\
    \ operand[1]\n            case \"*\":\n                result = operand[0] * operand[1]\n\
    \            case \"/\":\n                result = operand[0] / operand[1]\n \
    \           case \"**\":\n                result = operand[0] ** operand[1]\n\
    \            default:\n                fmt.Println(\"No such operator\")\n   \
    \             return 0\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpot02qqir_test.go:54:40: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        return -1\n\
    \    }\n    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i]\n     \
    \   case \"-\":\n            result -= operand[i]\n        case \"*\":\n     \
    \       result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result **= operand[i]\n        }\n    }\n \
    \   return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnskq3g6g_test.go:42:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"No operator\")\n    case 1:\n        switch\
    \ operator[0] {\n        case \"+\":\n            result = operand[0] + operand[1]\n\
    \        case \"-\":\n            result = operand[0] - operand[1]\n        case\
    \ \"*\":\n            result = operand[0] * operand[1]\n        case \"/\":\n\
    \            result = operand[0] / operand[1]\n        case \"**\":\n        \
    \    result = operand[0] ** operand[1]\n        }\n    default:\n        switch\
    \ operator[0] {\n        case \"+\":\n            result = do_algebra(operator[1:],\
    \ operand) + do_algebra(operator[1:], operand)\n        case \"-\":\n        \
    \    result = do_algebra(operator[1:], operand) - do_algebra(operator[1:], operand)\n\
    \        case \"*\":\n            result = do_algebra(operator[1:], operand) *\
    \ do_algebra(operator[1:], operand)\n        case \"/\":\n            result =\
    \ do_algebra(operator[1:], operand) // do_algebra(operator[1:], operand)\n   \
    \     case \"**\":\n            result = do_algebra(operator[1:], operand) **\
    \ (do_algebra(operator[1:], operand))\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqxzp0gvk_test.go:43:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    /tmp/tmpqxzp0gvk_test.go:56:59: invalid operation: cannot indirect (do_algebra(operator[1:],
    operand)) (value of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvei785h_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fmt.Println(\"Invalid operator\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3n9uj1sn_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"/\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4mmuwjey_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Error! Operator and operand list length must be equal.\")\n        return -1\n\
    \    }\n    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i]\n     \
    \   case \"-\":\n            result -= operand[i]\n        case \"*\":\n     \
    \       result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result **= operand[i]\n        default:\n \
    \           fmt.Println(\"Error! Invalid operator.\")\n            return -1\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9dpo2rnk_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fmt.Println(\"Invalid operator\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3n9uj1sn_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Initialize result to zero\n    var result int = 0\n   \
    \ // Iterate over each operator in operator list\n    for _, op := range operator\
    \ {\n        // Iterate over each operand in operand list\n        for _, operand\
    \ := range operand {\n            // Perform the operation on the operand\n  \
    \          switch op {\n            case \"+\":\n                result += operand\n\
    \            case \"-\":\n                result -= operand\n            case\
    \ \"*\":\n                result *= operand\n            case \"//\":\n      \
    \          result /= operand\n            case \"**\":\n                result\
    \ **= operand\n            }\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqghwowcv_test.go:44:25: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    \n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i]\n        case \"-\":\n            result -= operand[i]\n        case\
    \ \"*\":\n            result *= operand[i]\n        case \"//\":\n           \
    \ result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    \n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0ozi6yiy_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073490
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"No operator given\")\n    case 1:\n        switch operator[0]\
    \ {\n        case \"+\":\n            result = operand[0] + operand[1]\n     \
    \   case \"-\":\n            result = operand[0] - operand[1]\n        case \"\
    *\":\n            result = operand[0] * operand[1]\n        case \"/\":\n    \
    \        result = operand[0] / operand[1]\n        case \"**\":\n            result\
    \ = operand[0] ** operand[1]\n        default:\n            fmt.Println(\"Unknown\
    \ operator\")\n        }\n    default:\n        fmt.Println(\"Too many operators\"\
    )\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpldiyx57r_test.go:42:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fmt.Println(\"Invalid\
    \ operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp661f0u1y_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073489
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    /\":\n            result = result / operand[i]\n        case \"**\":\n       \
    \     result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfhit9wa0_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklrtexb_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"/\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc7wbwb9h_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073439
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Error: Operator and operand list length must be the same.\")\n        return -1\n\
    \    }\n    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i]\n     \
    \   case \"-\":\n            result -= operand[i]\n        case \"*\":\n     \
    \       result *= operand[i]\n        case \"//\":\n            result /= operand[i]\n\
    \        case \"**\":\n            result **= operand[i]\n        default:\n \
    \           fmt.Println(\"Error: Operator not recognized.\")\n            return\
    \ -1\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T)\
    \ {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpghvp_m4n_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    \n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwwblgwqa_test.go:40:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Printf(\"Invalid operator: %v\\n\", operator[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuvrmawxd_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result // operand[i]\n        case \"**\":\n     \
    \       result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzf7755nw_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result // operand[i]\n        case \"**\":\n     \
    \       result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzf7755nw_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073440
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDo_Algebra (0.00s)\n    --- FAIL: TestDo_Algebra/test_num__0\
    \ (0.00s)\n        tmpyat515lp_test.go:47: expected '%!s(int=37)', got '%!s(int=0)'\n\
    \    --- FAIL: TestDo_Algebra/test_num__1 (0.00s)\n        tmpyat515lp_test.go:47:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestDo_Algebra/test_num__2\
    \ (0.00s)\n        tmpyat515lp_test.go:47: expected '%!s(int=8)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Write your code here\n    result := 0\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"No operator given\")\n    case 1:\n  \
    \      switch operator[0] {\n        case \"+\":\n            result = operand[0]\
    \ + operand[1]\n        case \"-\":\n            result = operand[0] - operand[1]\n\
    \        case \"*\":\n            result = operand[0] * operand[1]\n        case\
    \ \"/\":\n            result = operand[0] / operand[1]\n        case \"**\":\n\
    \            result = operand[0] ** operand[1]\n        }\n    default:\n    \
    \    fmt.Println(\"Too many operators\")\n    }\n    return result\n}\n\nfunc\
    \ TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppk7t50nr_test.go:43:36: invalid operation: cannot indirect operand[1]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"Operator list is empty\")\n    case 1:\n\
    \        fmt.Println(\"Operator list has one operator\")\n    case 2:\n      \
    \  fmt.Println(\"Operator list has two operators\")\n    default:\n        fmt.Println(\"\
    Operator list has more than two operators\")\n    }\n    switch len(operand) {\n\
    \    case 0:\n        fmt.Println(\"Operand list is empty\")\n    case 1:\n  \
    \      fmt.Println(\"Operand list has one operand\")\n    case 2:\n        fmt.Println(\"\
    Operand list has two operands\")\n    default:\n        fmt.Println(\"Operand\
    \ list has more than two operands\")\n    }\n    switch len(operator) {\n    case\
    \ 0:\n        fmt.Println(\"Operator list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operator list has one operator\")\n    case 2:\n        fmt.Println(\"Operator\
    \ list has two operators\")\n    default:\n        fmt.Println(\"Operator list\
    \ has more than two operators\")\n    }\n    switch len(operand) {\n    case 0:\n\
    \        fmt.Println(\"Operand list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operand list has one operand\")\n    case 2:\n        fmt.Println(\"Operand list\
    \ has two operands\")\n    default:\n        fmt.Println(\"Operand list has more\
    \ than two operands\")\n    }\n    switch len(operator) {\n    case 0:\n     \
    \   fmt.Println(\"Operator list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operator list has one operator\")\n    case 2:\n        fmt.Println(\"Operator\
    \ list has two operators\")\n    default:\n        fmt.Println(\"Operator list\
    \ has more than two operators\")\n    }\n    switch len(operand) {\n    case 0:\n\
    \        fmt.Println(\"Operand list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operand list has one operand\")\n    case 2:\n        fmt.Println(\"Operand list\
    \ has two operands\")\n    default:\n        fmt.Println(\"Operand list has more\
    \ than two operands\")\n    }\n    switch len(operator) {\n    case 0:\n     \
    \   fmt.Println(\"Operator list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operator list has one operator\")\n    case 2:\n        fmt.Println(\"Operator\
    \ list has two operators\")\n    default:\n        fmt.Println(\"Operator list\
    \ has more than two operators\")\n    }\n    switch len(operand) {\n    case 0:\n\
    \        fmt.Println(\"Operand list is empty\")\n    case 1:\n        fmt.Println(\"\
    Operand list has one operand\")\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp39gium1d_test.go:104:6: expected ''('', found TestDo_Algebra

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Invalid input\")\n        return -1\n    }\n    result := 0\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i]\n        case \"-\":\n            result -=\
    \ operand[i]\n        case \"*\":\n            result *= operand[i]\n        case\
    \ \"//\":\n            result /= operand[i]\n        case \"**\":\n          \
    \  result **= operand[i]\n        default:\n            fmt.Println(\"Invalid\
    \ input\")\n            return -1\n        }\n    }\n    return result\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy8mybjqn_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  default:\n            fmt.Println(\"Invalid operator\")\n        }\n    }\n\
    \    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklrtexb_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"Operator list is empty\")\n    case 1:\n\
    \        fmt.Println(\"Operator list has one element\")\n    case 2:\n       \
    \ fmt.Println(\"Operator list has two elements\")\n    default:\n        fmt.Println(\"\
    Operator list has more than two elements\")\n    }\n    switch len(operand) {\n\
    \    case 0:\n        fmt.Println(\"Operand list is empty\")\n    case 1:\n  \
    \      fmt.Println(\"Operand list has one element\")\n    case 2:\n        fmt.Println(\"\
    Operand list has two elements\")\n    default:\n        fmt.Println(\"Operand\
    \ list has more than two elements\")\n    }\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        default:\n            fmt.Println(\"Unknown operator\")\n        }\n\
    \    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_iinu_dq_test.go:60:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"/\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4mmuwjey_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Error: Operator and operand list must be of same length\")\n        return -1\n\
    \    }\n    \n    result := 0\n    for i := 0; i < len(operator); i++ {\n    \
    \    switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxr6s7ush_test.go:44:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    if len(operator) != len(operand)-1 {\n        fmt.Println(\"\
    Error! Operator and operand list length mismatch\")\n        return -1\n    }\n\
    \    result := 0\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i]\n        case \"-\"\
    :\n            result -= operand[i]\n        case \"*\":\n            result *=\
    \ operand[i]\n        case \"//\":\n            result /= operand[i]\n       \
    \ case \"**\":\n            result **= operand[i]\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp304l9l68_test.go:43:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    /\":\n            result = result / operand[i]\n        case \"**\":\n       \
    \     result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Invalid operator\")\n        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t\
    \ *testing.T) {\n  candidate := do_algebra\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n\
    \     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected:\
    \ 9 },\n     { actual: candidate([]string{\"//\", \"*\"}, []int{7, 3, 4}), expected:\
    \ 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfhit9wa0_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    // Your code here\n    result := 0\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i]\n        case \"-\":\n            result -= operand[i]\n     \
    \   case \"*\":\n            result *= operand[i]\n        case \"//\":\n    \
    \        result /= operand[i]\n        case \"**\":\n            result **= operand[i]\n\
    \        }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n\
    \  candidate := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1smtktli_test.go:40:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result / operand[i]\n        case \"**\":\n      \
    \      result = result ** operand[i]\n        }\n    }\n    return result\n}\n\
    \nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2,\
    \ 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\",\
    \ \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcvei785h_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073438
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i]\n\
    \        case \"-\":\n            result -= operand[i]\n        case \"*\":\n\
    \            result *= operand[i]\n        case \"//\":\n            result /=\
    \ operand[i]\n        case \"**\":\n            result **= operand[i]\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestDo_Algebra(t *testing.T) {\n  candidate\
    \ := do_algebra\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    **\", \"*\", \"+\"}, []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"\
    +\", \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplsqf48se_test.go:39:21: expected operand, found ''*=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073437
- exit_code: 2
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    var result int\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result = result\
    \ + operand[i]\n        case \"-\":\n            result = result - operand[i]\n\
    \        case \"*\":\n            result = result * operand[i]\n        case \"\
    //\":\n            result = result // operand[i]\n        case \"**\":\n     \
    \       result = result ** operand[i]\n        default:\n            fmt.Println(\"\
    Unknown operator:\", operator[i])\n        }\n    }\n    return result\n}\n\n\
    func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3, 4, 5}),\
    \ expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"}, []int{2,\
    \ 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\", \"*\"},\
    \ []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv7dw580y_test.go:39:32: invalid operation: cannot indirect operand[i]
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073491
- exit_code: 1
  program: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given two lists operator, and operand. The first list has basic algebra operations,\
    \ and \n// the second list is a list of integers. Use the two given lists to build\
    \ the algebric \n// expression and return the evaluation of this expression.\n\
    // The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n\
    // Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** )\
    \ \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result\
    \ = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list\
    \ is equal to the length of operand list minus one.\n// Operand is a list of of\
    \ non-negative integers.\n// Operator list has at least one operator, and operand\
    \ list has at least two operands.\nfunc do_algebra(operator []string, operand\
    \ []int) int {\n    result := 0\n    switch len(operator) {\n    case 0:\n   \
    \     fmt.Println(\"do_algebra: operator list is empty\")\n    case 1:\n     \
    \   fmt.Println(\"do_algebra: operator list is one element long\")\n    case 2:\n\
    \        fmt.Println(\"do_algebra: operator list is two elements long\")\n   \
    \ default:\n        fmt.Println(\"do_algebra: operator list is more than two elements\
    \ long\")\n    }\n    switch len(operand) {\n    case 0:\n        fmt.Println(\"\
    do_algebra: operand list is empty\")\n    case 1:\n        fmt.Println(\"do_algebra:\
    \ operand list is one element long\")\n    case 2:\n        fmt.Println(\"do_algebra:\
    \ operand list is two elements long\")\n    default:\n        fmt.Println(\"do_algebra:\
    \ operand list is more than two elements long\")\n    }\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"do_algebra: operator list is empty\")\n\
    \    case 1:\n        fmt.Println(\"do_algebra: operator list is one element long\"\
    )\n    case 2:\n        fmt.Println(\"do_algebra: operator list is two elements\
    \ long\")\n    default:\n        fmt.Println(\"do_algebra: operator list is more\
    \ than two elements long\")\n    }\n    switch len(operand) {\n    case 0:\n \
    \       fmt.Println(\"do_algebra: operand list is empty\")\n    case 1:\n    \
    \    fmt.Println(\"do_algebra: operand list is one element long\")\n    case 2:\n\
    \        fmt.Println(\"do_algebra: operand list is two elements long\")\n    default:\n\
    \        fmt.Println(\"do_algebra: operand list is more than two elements long\"\
    )\n    }\n    switch len(operator) {\n    case 0:\n        fmt.Println(\"do_algebra:\
    \ operator list is empty\")\n    case 1:\n        fmt.Println(\"do_algebra: operator\
    \ list is one element long\")\n    case 2:\n        fmt.Println(\"do_algebra:\
    \ operator list is two elements long\")\n    default:\n        fmt.Println(\"\
    do_algebra: operator list is more than two elements long\")\n    }\n    switch\
    \ len(operand) {\n    case 0:\n        fmt.Println(\"do_algebra: operand list\
    \ is empty\")\n    case 1:\n        fmt.Println(\"do_algebra: operand list is\
    \ one element long\")\n    case 2:\n        fmt.Println(\"do_algebra: operand\
    \ list is two elements long\")\n    default:\n        fmt.Println(\"do_algebra:\
    \ operand list is more than two elements long\")\n    }\n    switch len(operator)\
    \ {\n    case 0:\n        fmt.Println(\"do_algebra: operator list is empty\")\n\
    \    case 1:\n        fmt.Println(\"do_algebra: operator list is one element long\"\
    )\n    case 2:\n        fmt.Println(\"do_algebra: operator list is two elements\
    \ long\")\n    default:\nfunc TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"},\
    \ []int{2, 3, 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\"\
    , \"*\", \"-\"}, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"\
    //\", \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxj78y39j_test.go:96:6: expected ''('', found TestDo_Algebra

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073491
