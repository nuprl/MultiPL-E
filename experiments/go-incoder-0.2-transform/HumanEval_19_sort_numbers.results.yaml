language: go_test.go
name: HumanEval_19_sort_numbers
results:
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimRight(numbers, \" \")\n    numbers := strings.TrimLeft(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvp_r5vre_test.go:59:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxpew7rkm_test.go:14:15: undefined: strings

    /tmp/tmpxpew7rkm_test.go:15:13: no new variables on left side of :=

    /tmp/tmpxpew7rkm_test.go:15:16: undefined: strings

    /tmp/tmpxpew7rkm_test.go:16:5: undefined: sort

    /tmp/tmpxpew7rkm_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSpace(numbers)\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers := strings.TrimPrefix(numbers, \" \")\n    numbers := strings.TrimSuffix(numbers,\
    \ \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfie1tbg6_test.go:57:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = fmt.Sprintf(\"%v\", i)\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd9a8eerw_test.go:14:13: no new variables on left side of :=

    /tmp/tmpd9a8eerw_test.go:14:16: undefined: strings

    /tmp/tmpd9a8eerw_test.go:15:13: no new variables on left side of :=

    /tmp/tmpd9a8eerw_test.go:15:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpd9a8eerw_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpd9a8eerw_test.go:19:5: undefined: sort

    /tmp/tmpd9a8eerw_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \" \", \"-\", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \" \", \"-\", -1)\n\
    \    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n    \nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp96_yydjb_test.go:53:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1sh2weby_test.go:14:13: no new variables on left side of :=

    /tmp/tmp1sh2weby_test.go:14:16: undefined: strings

    /tmp/tmp1sh2weby_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1sh2weby_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp1sh2weby_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp1sh2weby_test.go:19:5: undefined: sort

    /tmp/tmp1sh2weby_test.go:20:13: no new variables on left side of :=

    /tmp/tmp1sh2weby_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i][:len(numbers[i])-1]\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrsoh5_j_test.go:14:13: no new variables on left side of :=

    /tmp/tmphrsoh5_j_test.go:14:16: undefined: strings

    /tmp/tmphrsoh5_j_test.go:15:13: no new variables on left side of :=

    /tmp/tmphrsoh5_j_test.go:15:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmphrsoh5_j_test.go:17:22: invalid operation: cannot slice numbers[i] (value
    of type byte)

    /tmp/tmphrsoh5_j_test.go:19:5: undefined: sort

    /tmp/tmphrsoh5_j_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmp3yxkx_test.go:14:13: no new variables on left side of :=

    /tmp/tmpmmp3yxkx_test.go:14:16: undefined: strings

    /tmp/tmpmmp3yxkx_test.go:15:13: no new variables on left side of :=

    /tmp/tmpmmp3yxkx_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpmmp3yxkx_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpmmp3yxkx_test.go:19:5: undefined: sort

    /tmp/tmpmmp3yxkx_test.go:20:13: no new variables on left side of :=

    /tmp/tmpmmp3yxkx_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = fmt.Sprintf(\"\
    %v\", i)\n    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \"\
    \ \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuvsch_sk_test.go:14:13: no new variables on left side of :=

    /tmp/tmpuvsch_sk_test.go:14:16: undefined: strings

    /tmp/tmpuvsch_sk_test.go:15:13: no new variables on left side of :=

    /tmp/tmpuvsch_sk_test.go:15:16: undefined: strings

    /tmp/tmpuvsch_sk_test.go:16:13: no new variables on left side of :=

    /tmp/tmpuvsch_sk_test.go:16:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpuvsch_sk_test.go:18:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpuvsch_sk_test.go:20:5: undefined: sort

    /tmp/tmpuvsch_sk_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ipgwro1_test.go:14:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:14:16: undefined: strings

    /tmp/tmp7ipgwro1_test.go:15:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp7ipgwro1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp7ipgwro1_test.go:19:5: undefined: sort

    /tmp/tmp7ipgwro1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprbdd1n68_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n    numbers :=\
    \ strings.Join(numbers, \" \")\n    numbers := strings.Replace(numbers, \"zero\"\
    , \"one\", -1)\n    numbers := strings.Replace(numbers, \"one\", \"two\", -1)\n\
    \    numbers := strings.Replace(numbers, \"two\", \"three\", -1)\n    numbers\
    \ := strings.Replace(numbers, \"three\", \"four\", -1)\n    numbers := strings.Replace(numbers,\
    \ \"four\", \"five\", -1)\n    numbers := strings.Replace(numbers, \"five\", \"\
    six\", -1)\n    numbers := strings.Replace(numbers, \"six\", \"seven\", -1)\n\
    \    numbers := strings.Replace(numbers, \"seven\", \"eight\", -1)\n    numbers\
    \ := strings.Replace(numbers, \"eight\", \"nine\", -1)\n    numbers := strings.Replace(numbers,\
    \ \"nine\", \"zero\", -1)\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi_nlcdej_test.go:14:13: no new variables on left side of :=

    /tmp/tmpi_nlcdej_test.go:14:16: undefined: strings

    /tmp/tmpi_nlcdej_test.go:15:13: no new variables on left side of :=

    /tmp/tmpi_nlcdej_test.go:15:23: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpi_nlcdej_test.go:16:13: no new variables on left side of :=

    /tmp/tmpi_nlcdej_test.go:16:16: undefined: strings

    /tmp/tmpi_nlcdej_test.go:17:13: no new variables on left side of :=

    /tmp/tmpi_nlcdej_test.go:17:16: undefined: strings

    /tmp/tmpi_nlcdej_test.go:18:13: no new variables on left side of :=

    /tmp/tmpi_nlcdej_test.go:18:16: undefined: strings

    /tmp/tmpi_nlcdej_test.go:18:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn7yso_j7_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9r2tgco6_test.go:14:13: no new variables on left side of :=

    /tmp/tmp9r2tgco6_test.go:14:16: undefined: strings

    /tmp/tmp9r2tgco6_test.go:15:13: no new variables on left side of :=

    /tmp/tmp9r2tgco6_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmp9r2tgco6_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \"\\r\")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsyd26j0h_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixbl9e4j_test.go:14:15: undefined: strings

    /tmp/tmpixbl9e4j_test.go:15:13: no new variables on left side of :=

    /tmp/tmpixbl9e4j_test.go:15:16: undefined: strings

    /tmp/tmpixbl9e4j_test.go:16:5: undefined: sort

    /tmp/tmpixbl9e4j_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, v := range numbers\
    \ {\n        numbers[i] = int(v)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9drzr40_test.go:14:13: no new variables on left side of :=

    /tmp/tmpz9drzr40_test.go:14:16: undefined: strings

    /tmp/tmpz9drzr40_test.go:15:13: no new variables on left side of :=

    /tmp/tmpz9drzr40_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpz9drzr40_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpz9drzr40_test.go:19:5: undefined: sort

    /tmp/tmpz9drzr40_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append([]string{\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}, numbers...)\n\
    \    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc\
    \ TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    three\"), expected: \"three\" },\n     { actual: candidate(\"three five nine\"\
    ), expected: \"three five nine\" },\n     { actual: candidate(\"five zero four\
    \ seven nine eight\"), expected: \"zero four five seven eight nine\" },\n    \
    \ { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
    \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy7mlitnk_test.go:14:13:\
    \ no new variables on left side of :=\n/tmp/tmpy7mlitnk_test.go:14:16: undefined:\
    \ strings\n/tmp/tmpy7mlitnk_test.go:15:13: no new variables on left side of :=\n\
    /tmp/tmpy7mlitnk_test.go:15:16: cannot use append([]string{\u2026}, numbers...)\
    \ (value of type []string) as type string in assignment\n/tmp/tmpy7mlitnk_test.go:15:113:\
    \ cannot use numbers (variable of type string) as type []string in argument to\
    \ append\n/tmp/tmpy7mlitnk_test.go:16:5: undefined: sort\n/tmp/tmpy7mlitnk_test.go:17:12:\
    \ undefined: strings\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmposgyu2gg_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsnuwow20_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqzq0ru1_test.go:14:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:14:16: undefined: strings

    /tmp/tmpeqzq0ru1_test.go:15:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpeqzq0ru1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpeqzq0ru1_test.go:19:5: undefined: sort

    /tmp/tmpeqzq0ru1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ipgwro1_test.go:14:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:14:16: undefined: strings

    /tmp/tmp7ipgwro1_test.go:15:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp7ipgwro1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp7ipgwro1_test.go:19:5: undefined: sort

    /tmp/tmp7ipgwro1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqzq0ru1_test.go:14:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:14:16: undefined: strings

    /tmp/tmpeqzq0ru1_test.go:15:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpeqzq0ru1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpeqzq0ru1_test.go:19:5: undefined: sort

    /tmp/tmpeqzq0ru1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9r2tgco6_test.go:14:13: no new variables on left side of :=

    /tmp/tmp9r2tgco6_test.go:14:16: undefined: strings

    /tmp/tmp9r2tgco6_test.go:15:13: no new variables on left side of :=

    /tmp/tmp9r2tgco6_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmp9r2tgco6_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe703fa68_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i][:1]\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrjh_jnn_test.go:14:13: no new variables on left side of :=

    /tmp/tmpsrjh_jnn_test.go:14:16: undefined: strings

    /tmp/tmpsrjh_jnn_test.go:15:13: no new variables on left side of :=

    /tmp/tmpsrjh_jnn_test.go:15:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpsrjh_jnn_test.go:17:22: invalid operation: cannot slice numbers[i] (value
    of type byte)

    /tmp/tmpsrjh_jnn_test.go:19:5: undefined: sort

    /tmp/tmpsrjh_jnn_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ipgwro1_test.go:14:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:14:16: undefined: strings

    /tmp/tmp7ipgwro1_test.go:15:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp7ipgwro1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp7ipgwro1_test.go:19:5: undefined: sort

    /tmp/tmp7ipgwro1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        number, err := strconv.Atoi(number)\n        if err != nil\
    \ {\n            fmt.Println(err)\n        }\n        numbers[i] = number\n  \
    \  }\n    sort.Ints(numbers)\n    numbers := strings.Join(numbers, \" \")\n  \
    \  return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxwvijxd8_test.go:14:13: no new variables on left side of :=

    /tmp/tmpxwvijxd8_test.go:14:16: undefined: strings

    /tmp/tmpxwvijxd8_test.go:15:13: no new variables on left side of :=

    /tmp/tmpxwvijxd8_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpxwvijxd8_test.go:17:24: undefined: strconv

    /tmp/tmpxwvijxd8_test.go:23:5: undefined: sort

    /tmp/tmpxwvijxd8_test.go:24:13: no new variables on left side of :=

    /tmp/tmpxwvijxd8_test.go:24:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ipgwro1_test.go:14:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:14:16: undefined: strings

    /tmp/tmp7ipgwro1_test.go:15:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp7ipgwro1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp7ipgwro1_test.go:19:5: undefined: sort

    /tmp/tmp7ipgwro1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyl654a4m_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6q9913am_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers,\
    \ \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw6kd6al9_test.go:65:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ipgwro1_test.go:14:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:14:16: undefined: strings

    /tmp/tmp7ipgwro1_test.go:15:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp7ipgwro1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp7ipgwro1_test.go:19:5: undefined: sort

    /tmp/tmp7ipgwro1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ numbers := strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmmp3yxkx_test.go:14:13: no new variables on left side of :=

    /tmp/tmpmmp3yxkx_test.go:14:16: undefined: strings

    /tmp/tmpmmp3yxkx_test.go:15:13: no new variables on left side of :=

    /tmp/tmpmmp3yxkx_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpmmp3yxkx_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpmmp3yxkx_test.go:19:5: undefined: sort

    /tmp/tmpmmp3yxkx_test.go:20:13: no new variables on left side of :=

    /tmp/tmpmmp3yxkx_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0zyy_57i_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe703fa68_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe703fa68_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \",\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"-\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"0\")\n    numbers = strings.Trim(numbers, \"1\")\n    numbers = strings.Trim(numbers,\
    \ \"2\")\n    numbers = strings.Trim(numbers, \"3\")\n    numbers = strings.Trim(numbers,\
    \ \"4\")\n    numbers = strings.Trim(numbers, \"5\")\n    numbers = strings.Trim(numbers,\
    \ \"6\")\n    numbers = strings.Trim(numbers, \"7\")\n    numbers = strings.Trim(numbers,\
    \ \"8\")\n    numbers = strings.Trim(numbers, \"9\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"a\")\n    numbers = strings.Trim(numbers,\
    \ \"b\")\n    numbers = strings.Trim(numbers, \"c\")\n    numbers = strings.Trim(numbers,\
    \ \"d\")\n    numbers = strings.Trim(numbers, \"e\")\n    numbers = strings.Trim(numbers,\
    \ \"f\")\n    numbers = strings.Trim(numbers, \"g\")\n    numbers = strings.Trim(numbers,\
    \ \"h\")\n    numbers = strings.Trim(numbers, \"i\")\n    numbers = strings.Trim(numbers,\
    \ \"j\")\n    numbers = strings.Trim(numbers, \"k\")\n    numbers = strings.Trim(numbers,\
    \ \"l\")\n    numbers = strings.Trim(numbers, \"m\")\n    numbers = strings.Trim(numbers,\
    \ \"n\")\n    numbers = strings.Trim(numbers, \"o\")\n    numbers = strings.Trim(numbers,\
    \ \"p\")\n    numbers = strings.Trim(numbers, \"q\")\n    numbers = strings.Trim(numbers,\
    \ \"r\")\n    numbers = strings.Trim(numbers, \"s\")\n    numbers = strings.Trim(numbers,\
    \ \"t\")\n    numbers = strings.Trim(numbers, \"u\")\n    numbers = strings.Trim(numbers,\
    \ \"v\")\n    numbers = strings.Trim(numbers, \"w\")\n    numbers = strings.Trim(numbers,\
    \ \"x\")\n    numbers = strings.Trim(numbers, \"y\")\n    numbers = strings.Trim(numbers,\
    \ \"z\")\n    numbers = strings.Trim(numbers, \"0\")\n    numbers = strings.\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzl1mianr_test.go:63:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_va19c4t_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmposgyu2gg_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwkozwsv_test.go:14:13: no new variables on left side of :=

    /tmp/tmppwkozwsv_test.go:14:16: undefined: strings

    /tmp/tmppwkozwsv_test.go:15:13: no new variables on left side of :=

    /tmp/tmppwkozwsv_test.go:15:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmppwkozwsv_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmppwkozwsv_test.go:19:5: undefined: sort

    /tmp/tmppwkozwsv_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(number\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcns7wx7d_test.go:56:41: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] =\
    \ int(numbers[i])\n    }\n    sort.Ints(numbers)\n    numbers := make([]string,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] =\
    \ strconv.Itoa(numbers[i])\n    }\n    return strings.Join(numbers, \" \")\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpedchuoxe_test.go:14:13: no new variables on left side of :=

    /tmp/tmpedchuoxe_test.go:14:16: undefined: strings

    /tmp/tmpedchuoxe_test.go:15:13: no new variables on left side of :=

    /tmp/tmpedchuoxe_test.go:15:16: undefined: strings

    /tmp/tmpedchuoxe_test.go:16:13: no new variables on left side of :=

    /tmp/tmpedchuoxe_test.go:16:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpedchuoxe_test.go:18:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpedchuoxe_test.go:20:5: undefined: sort

    /tmp/tmpedchuoxe_test.go:21:13: no new variables on left side of :=

    /tmp/tmpedchuoxe_test.go:21:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpedchuoxe_test.go:21:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2caqar3g_test.go:14:13: no new variables on left side of :=

    /tmp/tmp2caqar3g_test.go:14:16: undefined: strings

    /tmp/tmp2caqar3g_test.go:15:13: no new variables on left side of :=

    /tmp/tmp2caqar3g_test.go:15:16: undefined: strings

    /tmp/tmp2caqar3g_test.go:16:13: no new variables on left side of :=

    /tmp/tmp2caqar3g_test.go:16:16: undefined: strings

    /tmp/tmp2caqar3g_test.go:17:13: no new variables on left side of :=

    /tmp/tmp2caqar3g_test.go:17:16: undefined: sort_numbers_test

    /tmp/tmp2caqar3g_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = numbers[i]\
    \ + \"0\"\n    }\n    numbers := strings.Join(numbers, \" \")\n    numbers :=\
    \ strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = numbers[i] + \"9\"\n    }\n\
    \    numbers := strings.Join(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i] + \"0\"\n    }\n    numbers := strings.Join(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = numbers[i]\
    \ + \"9\"\n    }\n    numbers := strings.Join(numbers, \" \")\n    numbers :=\
    \ strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = numbers[i] + \"0\"\n    }\n\
    \    numbers := strings.Join(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i] + \"9\"\n    }\n    numbers := strings.Join(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = numbers[i]\
    \ + \"0\"\n    }\n    numbers := strings.Join(numbers, \" \")\n    numbers :=\
    \ strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n\
    \    for i := range numbers {\n        numbers[i] = numbers[i] + \"9\"\n    }\n\
    \    numbers := strings.Join(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = numbers[i] + \"0\"\n    }\n    numbers := strings.Join(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = numbers[i]\
    \ + \"9\"\n    }\n    numbers := strings.Join(numbers, \" \")\n    numbers :=\
    \ strings.Split(numbers, \" \")\n    numbers := make([]string, \nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptt4zsy2o_test.go:77:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyl654a4m_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe703fa68_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqzq0ru1_test.go:14:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:14:16: undefined: strings

    /tmp/tmpeqzq0ru1_test.go:15:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpeqzq0ru1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpeqzq0ru1_test.go:19:5: undefined: sort

    /tmp/tmpeqzq0ru1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwkozwsv_test.go:14:13: no new variables on left side of :=

    /tmp/tmppwkozwsv_test.go:14:16: undefined: strings

    /tmp/tmppwkozwsv_test.go:15:13: no new variables on left side of :=

    /tmp/tmppwkozwsv_test.go:15:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmppwkozwsv_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmppwkozwsv_test.go:19:5: undefined: sort

    /tmp/tmppwkozwsv_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe703fa68_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu_87hrmh_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxpew7rkm_test.go:14:15: undefined: strings

    /tmp/tmpxpew7rkm_test.go:15:13: no new variables on left side of :=

    /tmp/tmpxpew7rkm_test.go:15:16: undefined: strings

    /tmp/tmpxpew7rkm_test.go:16:5: undefined: sort

    /tmp/tmpxpew7rkm_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2caqar3g_test.go:14:13: no new variables on left side of :=

    /tmp/tmp2caqar3g_test.go:14:16: undefined: strings

    /tmp/tmp2caqar3g_test.go:15:13: no new variables on left side of :=

    /tmp/tmp2caqar3g_test.go:15:16: undefined: strings

    /tmp/tmp2caqar3g_test.go:16:13: no new variables on left side of :=

    /tmp/tmp2caqar3g_test.go:16:16: undefined: strings

    /tmp/tmp2caqar3g_test.go:17:13: no new variables on left side of :=

    /tmp/tmp2caqar3g_test.go:17:16: undefined: sort_numbers_test

    /tmp/tmp2caqar3g_test.go:18:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string,\
    \ len(numbers))\n    for i := range numbers {\n        numbers[i] = numbers[i]\
    \ + strings.ToLower(fmt.Sprintf(\"%v\", i))\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe_gd80rj_test.go:14:13: no new variables on left side of :=

    /tmp/tmpe_gd80rj_test.go:14:16: undefined: strings

    /tmp/tmpe_gd80rj_test.go:15:13: no new variables on left side of :=

    /tmp/tmpe_gd80rj_test.go:15:16: undefined: strings

    /tmp/tmpe_gd80rj_test.go:16:13: no new variables on left side of :=

    /tmp/tmpe_gd80rj_test.go:16:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpe_gd80rj_test.go:18:35: undefined: strings

    /tmp/tmpe_gd80rj_test.go:20:5: undefined: sort

    /tmp/tmpe_gd80rj_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0zyy_57i_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string, len(numbers))\n\
    \    for i, number := range numbers {\n        numbers[i] = number\n    }\n  \
    \  sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqucm1fcx_test.go:14:13: no new variables on left side of :=

    /tmp/tmpqucm1fcx_test.go:14:16: undefined: strings

    /tmp/tmpqucm1fcx_test.go:15:13: no new variables on left side of :=

    /tmp/tmpqucm1fcx_test.go:15:16: undefined: strings

    /tmp/tmpqucm1fcx_test.go:16:13: no new variables on left side of :=

    /tmp/tmpqucm1fcx_test.go:16:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpqucm1fcx_test.go:18:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpqucm1fcx_test.go:20:5: undefined: sort

    /tmp/tmpqucm1fcx_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \",\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\t\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\r\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Tri\nfunc TestSort_Numbers(t *testing.T) {\n \
    \ candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpx6dzhifi_test.go:64:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(number\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoxy9tf_0_test.go:56:40: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]string,\
    \ len(numbers))\n    for i, number := range numbers {\n        numbers[i] = number\n\
    \    }\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n}\n\
    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikzolsna_test.go:14:13: no new variables on left side of :=

    /tmp/tmpikzolsna_test.go:14:16: undefined: strings

    /tmp/tmpikzolsna_test.go:15:13: no new variables on left side of :=

    /tmp/tmpikzolsna_test.go:15:16: undefined: strings

    /tmp/tmpikzolsna_test.go:16:13: no new variables on left side of :=

    /tmp/tmpikzolsna_test.go:16:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpikzolsna_test.go:18:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpikzolsna_test.go:20:5: undefined: sort

    /tmp/tmpikzolsna_test.go:21:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \"\\n\")\n    numbers = strings.Trim(numbers, \"\\r\")\n    numbers = strings.Trim(numbers,\
    \ \"\\t\")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmt4j5mk2_test.go:65:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0zyy_57i_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixbl9e4j_test.go:14:15: undefined: strings

    /tmp/tmpixbl9e4j_test.go:15:13: no new variables on left side of :=

    /tmp/tmpixbl9e4j_test.go:15:16: undefined: strings

    /tmp/tmpixbl9e4j_test.go:16:5: undefined: sort

    /tmp/tmpixbl9e4j_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0zyy_57i_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsnuwow20_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqzq0ru1_test.go:14:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:14:16: undefined: strings

    /tmp/tmpeqzq0ru1_test.go:15:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpeqzq0ru1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpeqzq0ru1_test.go:19:5: undefined: sort

    /tmp/tmpeqzq0ru1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6q9913am_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n\
    \    numbers := make([]string, len(numbers))\n    for i := 0; i < len(numbers);\
    \ i++ {\n        numbers[i] = strconv.Itoa(numbers[i])\n    }\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp161cddmr_test.go:14:13: no new variables on left side of :=

    /tmp/tmp161cddmr_test.go:14:16: undefined: strings

    /tmp/tmp161cddmr_test.go:15:13: no new variables on left side of :=

    /tmp/tmp161cddmr_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp161cddmr_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp161cddmr_test.go:19:5: undefined: sort

    /tmp/tmp161cddmr_test.go:20:13: no new variables on left side of :=

    /tmp/tmp161cddmr_test.go:20:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmp161cddmr_test.go:22:22: undefined: strconv

    /tmp/tmp161cddmr_test.go:24:12: undefined: strings

    /tmp/tmp161cddmr_test.go:24:12: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := make([]int,\
    \ len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        numbers[i] =\
    \ int(numbers[i])\n    }\n    sort.Ints(numbers)\n    numbers := strings.Join(numbers,\
    \ \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate\
    \ := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"), expected:\
    \ \"\" },\n     { actual: candidate(\"three\"), expected: \"three\" },\n     {\
    \ actual: candidate(\"three five nine\"), expected: \"three five nine\" },\n \
    \    { actual: candidate(\"five zero four seven nine eight\"), expected: \"zero\
    \ four five seven eight nine\" },\n     { actual: candidate(\"six five four three\
    \ two one zero\"), expected: \"zero one two three four five six\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppti_8en8_test.go:14:13: no new variables on left side of :=

    /tmp/tmppti_8en8_test.go:14:16: undefined: strings

    /tmp/tmppti_8en8_test.go:15:13: no new variables on left side of :=

    /tmp/tmppti_8en8_test.go:15:16: undefined: strings

    /tmp/tmppti_8en8_test.go:16:13: no new variables on left side of :=

    /tmp/tmppti_8en8_test.go:16:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmppti_8en8_test.go:18:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmppti_8en8_test.go:20:5: undefined: sort

    /tmp/tmppti_8en8_test.go:21:13: no new variables on left side of :=

    /tmp/tmppti_8en8_test.go:21:16: undefined: strings

    /tmp/tmppti_8en8_test.go:21:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppjaxkp4z_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \"\\n\")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3qurvw_f_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppjaxkp4z_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6q9913am_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3yvca3m_test.go:14:15: undefined: strings

    /tmp/tmpv3yvca3m_test.go:15:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:15:16: undefined: strings

    /tmp/tmpv3yvca3m_test.go:16:13: no new variables on left side of :=

    /tmp/tmpv3yvca3m_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpv3yvca3m_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyl654a4m_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\")\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnpn32x9v_test.go:14:13: no new variables on left side of :=

    /tmp/tmpnpn32x9v_test.go:14:16: undefined: strings

    /tmp/tmpnpn32x9v_test.go:15:13: no new variables on left side of :=

    /tmp/tmpnpn32x9v_test.go:15:23: first argument to append must be a slice; have
    numbers (variable of type string)

    /tmp/tmpnpn32x9v_test.go:16:5: undefined: sort

    /tmp/tmpnpn32x9v_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \",\")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \".\")\n    numbers := strings.Trim(numbers,\
    \ \"0\")\n    numbers := strings.Trim(numbers, \"1\")\n    numbers := strings.Trim(numbers,\
    \ \"2\")\n    numbers := strings.Trim(numbers, \"3\")\n    numbers := strings.Trim(numbers,\
    \ \"4\")\n    numbers := strings.Trim(numbers, \"5\")\n    numbers := strings.Trim(numbers,\
    \ \"6\")\n    numbers := strings.Trim(numbers, \"7\")\n    numbers := strings.Trim(numbers,\
    \ \"8\")\n    numbers := strings.Trim(numbers, \"9\")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Tri\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4tmm_twp_test.go:65:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \"\\n\")\n    numbers := strings.Trim(numbers,\
    \ \"\\r\")\n    numbers := strings.Trim(numbers, \"\\t\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe703fa68_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSpace(numbers)\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSuffix(numbers,\
    \ \" \")\n    numbers = strings.TrimPrefix(numbers, \" \")\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq97wpvjg_test.go:57:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers \nfunc TestSort_Numbers(t *testing.T) {\n  candidate :=\
    \ sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6q9913am_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers, \" \"))\n   \
    \ numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptww3wxc7_test.go:54:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    numbers := strings.TrimSuffix(numbers, \" \")\n    numbers := strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := strings.TrimSpace(strings.Join(numbers,\
    \ \" \"))\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsyq5tbaf_test.go:56:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = strings.ToLower(numbers[i])\n    }\n    sort.Strings(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmyvm4uv1_test.go:14:13: no new variables on left side of :=

    /tmp/tmpmyvm4uv1_test.go:14:16: undefined: strings

    /tmp/tmpmyvm4uv1_test.go:15:13: no new variables on left side of :=

    /tmp/tmpmyvm4uv1_test.go:15:16: undefined: strings

    /tmp/tmpmyvm4uv1_test.go:16:13: no new variables on left side of :=

    /tmp/tmpmyvm4uv1_test.go:16:16: undefined: strings

    /tmp/tmpmyvm4uv1_test.go:17:13: no new variables on left side of :=

    /tmp/tmpmyvm4uv1_test.go:17:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmpmyvm4uv1_test.go:19:22: undefined: strings

    /tmp/tmpmyvm4uv1_test.go:21:5: undefined: sort

    /tmp/tmpmyvm4uv1_test.go:21:5: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, v := range numbers\
    \ {\n        numbers[i] = int(v)\n    }\n    sort.Ints(numbers)\n    numbers :=\
    \ strings.Join(numbers, \" \")\n    return numbers\n}\n\nfunc TestSort_Numbers(t\
    \ *testing.T) {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"three\"), expected:\
    \ \"three\" },\n     { actual: candidate(\"three five nine\"), expected: \"three\
    \ five nine\" },\n     { actual: candidate(\"five zero four seven nine eight\"\
    ), expected: \"zero four five seven eight nine\" },\n     { actual: candidate(\"\
    six five four three two one zero\"), expected: \"zero one two three four five\
    \ six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9zwo_tp_test.go:14:13: no new variables on left side of :=

    /tmp/tmpe9zwo_tp_test.go:14:16: undefined: strings

    /tmp/tmpe9zwo_tp_test.go:15:13: no new variables on left side of :=

    /tmp/tmpe9zwo_tp_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpe9zwo_tp_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpe9zwo_tp_test.go:19:5: undefined: sort

    /tmp/tmpe9zwo_tp_test.go:20:13: no new variables on left side of :=

    /tmp/tmpe9zwo_tp_test.go:20:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers,\
    \ \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw6kd6al9_test.go:65:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0zyy_57i_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1d4e0idi_test.go:14:15: undefined: strings

    /tmp/tmp1d4e0idi_test.go:15:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:15:16: undefined: strings

    /tmp/tmp1d4e0idi_test.go:16:13: no new variables on left side of :=

    /tmp/tmp1d4e0idi_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmp1d4e0idi_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqzq0ru1_test.go:14:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:14:16: undefined: strings

    /tmp/tmpeqzq0ru1_test.go:15:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpeqzq0ru1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpeqzq0ru1_test.go:19:5: undefined: sort

    /tmp/tmpeqzq0ru1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Trim(numbers,\
    \ \" \")\n    number\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmposgyu2gg_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = int(number)\n    }\n    sort.Ints(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeqzq0ru1_test.go:14:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:14:16: undefined: strings

    /tmp/tmpeqzq0ru1_test.go:15:13: no new variables on left side of :=

    /tmp/tmpeqzq0ru1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpeqzq0ru1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpeqzq0ru1_test.go:19:5: undefined: sort

    /tmp/tmpeqzq0ru1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpphdi96zm_test.go:14:13: no new variables on left side of :=

    /tmp/tmpphdi96zm_test.go:14:16: undefined: strings

    /tmp/tmpphdi96zm_test.go:15:13: no new variables on left side of :=

    /tmp/tmpphdi96zm_test.go:15:16: undefined: strings

    /tmp/tmpphdi96zm_test.go:16:13: no new variables on left side of :=

    /tmp/tmpphdi96zm_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpphdi96zm_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu_87hrmh_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Split(numbers, \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n\
    \    return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu419zbak_test.go:14:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:14:16: undefined: strings

    /tmp/tmpu419zbak_test.go:15:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:15:16: undefined: strings

    /tmp/tmpu419zbak_test.go:16:13: no new variables on left side of :=

    /tmp/tmpu419zbak_test.go:16:16: undefined: sort_numbers_test

    /tmp/tmpu419zbak_test.go:17:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i := range numbers\
    \ {\n        numbers[i] = int(numbers[i])\n    }\n    sort.Ints(numbers)\n   \
    \ return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ipgwro1_test.go:14:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:14:16: undefined: strings

    /tmp/tmp7ipgwro1_test.go:15:13: no new variables on left side of :=

    /tmp/tmp7ipgwro1_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmp7ipgwro1_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmp7ipgwro1_test.go:19:5: undefined: sort

    /tmp/tmp7ipgwro1_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyl654a4m_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := sort_numbers_test.SortNumbers(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkwuz2fft_test.go:14:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:14:16: undefined: strings

    /tmp/tmpkwuz2fft_test.go:15:13: no new variables on left side of :=

    /tmp/tmpkwuz2fft_test.go:15:16: undefined: sort_numbers_test

    /tmp/tmpkwuz2fft_test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \"\")\n    numbers := append(numbers,\
    \ \"\")\n    numbers := append(numbers, \nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv3389z6v_test.go:78:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]int, len(numbers))\n    for i, v := range numbers\
    \ {\n        numbers[i] = int(v)\n    }\n    sort.Ints(numbers)\n    return strings.Join(numbers,\
    \ \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9drzr40_test.go:14:13: no new variables on left side of :=

    /tmp/tmpz9drzr40_test.go:14:16: undefined: strings

    /tmp/tmpz9drzr40_test.go:15:13: no new variables on left side of :=

    /tmp/tmpz9drzr40_test.go:15:16: cannot use make([]int, len(numbers)) (value of
    type []int) as type string in assignment

    /tmp/tmpz9drzr40_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmpz9drzr40_test.go:19:5: undefined: sort

    /tmp/tmpz9drzr40_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := make([]string, len(numbers))\n    for i, number := range\
    \ numbers {\n        numbers[i] = number\n    }\n    sort.Strings(numbers)\n \
    \   return strings.Join(numbers, \" \")\n}\n\nfunc TestSort_Numbers(t *testing.T)\
    \ {\n  candidate := sort_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"three\"), expected: \"three\"\
    \ },\n     { actual: candidate(\"three five nine\"), expected: \"three five nine\"\
    \ },\n     { actual: candidate(\"five zero four seven nine eight\"), expected:\
    \ \"zero four five seven eight nine\" },\n     { actual: candidate(\"six five\
    \ four three two one zero\"), expected: \"zero one two three four five six\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppwkozwsv_test.go:14:13: no new variables on left side of :=

    /tmp/tmppwkozwsv_test.go:14:16: undefined: strings

    /tmp/tmppwkozwsv_test.go:15:13: no new variables on left side of :=

    /tmp/tmppwkozwsv_test.go:15:16: cannot use make([]string, len(numbers)) (value
    of type []string) as type string in assignment

    /tmp/tmppwkozwsv_test.go:17:9: cannot assign to numbers[i] (value of type byte)

    /tmp/tmppwkozwsv_test.go:19:5: undefined: sort

    /tmp/tmppwkozwsv_test.go:20:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.TrimSpace(numbers)\n\
    \    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Split(numbers,\
    \ \" \")\n    \nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0zyy_57i_test.go:66:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074307
- exit_code: 2
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Split(numbers,\
    \ \" \")\n    sort.Strings(numbers)\n    return strings.Join(numbers, \" \")\n\
    }\n\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi1ssjh1__test.go:14:13: no new variables on left side of :=

    /tmp/tmpi1ssjh1__test.go:14:16: undefined: strings

    /tmp/tmpi1ssjh1__test.go:15:5: undefined: sort

    /tmp/tmpi1ssjh1__test.go:16:12: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers = strings.TrimSpace(numbers)\n\
    \    numbers = strings.TrimSuffix(numbers, \" \")\n    numbers = strings.TrimPrefix(numbers,\
    \ \" \")\n    numbers = strings.Trim(numbers, \" \")\n    numbers = strings.Replace(numbers,\
    \ \"-\", \" \", -1)\n    numbers = strings.Replace(numbers, \"/\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"\\\\\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \":\", \" \", -1)\n    numbers = strings.Replace(numbers, \",\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"'\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"\\\"\", \" \", -1)\n    numbers = strings.Replace(numbers, \"%\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"(\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \")\", \" \", -1)\n    numbers = strings.Replace(numbers, \"*\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"#\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"%\", \" \", -1)\n    numbers = strings.Replace(numbers, \"<\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \">\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"=\", \" \", -1)\n    numbers = strings.Replace(numbers, \"?\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"!\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"@\", \" \", -1)\n    numbers = strings.Replace(numbers, \"{\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"}\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"[\", \" \", -1)\n    numbers = strings.Replace(numbers, \"]\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"(\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \")\", \" \", -1)\n    numbers = strings.Replace(numbers, \"-\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"_\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"+\", \" \", -1)\n    numbers = strings.Replace(numbers, \"=\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \"%\", \" \", -1)\n    numbers = strings.Replace(numbers,\
    \ \"#\", \" \", -1)\n    numbers = strings.Replace(numbers, \"<\", \" \", -1)\n\
    \    numbers = strings.Replace(numbers, \">\", \" \", -1)\n    numbers = strings.Replace(number\n\
    func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
    \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
    \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwpa_syuc_test.go:51:37: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    func sort_numbers(numbers string) string {\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \",\")\n    numbers := strings.Trim(numbers,\
    \ \"\\n\")\n    numbers := strings.Trim(numbers, \"\\r\")\n    numbers := strings.Trim(numbers,\
    \ \"\\t\")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\n    numbers := strings.Trim(numbers, \" \")\n    numbers := strings.Trim(numbers,\
    \ \" \")\nfunc TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"\
    three five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"\
    five zero four seven nine eight\"), expected: \"zero four five seven eight nine\"\
    \ },\n     { actual: candidate(\"six five four three two one zero\"), expected:\
    \ \"zero one two three four five six\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw6kd6al9_test.go:65:6: expected ''('', found TestSort_Numbers

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074385
