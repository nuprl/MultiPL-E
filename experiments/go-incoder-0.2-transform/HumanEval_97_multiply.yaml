name: HumanEval_97_multiply
language: go_test.go
prompt: "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Complete the function that takes two integers and returns \n// the product of\
  \ their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>>\
  \ multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020,\
  \ 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int\
  \ {\n"
tests: "func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19,\
  \ 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n \
  \    { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76,\
  \ 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n    \
  \ { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h :=\
    \ 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n\
    \    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u\
    \ := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n   \
    \ if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n \
    \   \n    if a > 9 {\n        a = a - 10\n    }\n    if b > 9 {\n        b = b\
    \ - 10\n    }\n    \n    if a > 0 {\n        c = a % 10\n    }\n    if b > 0 {\n\
    \        d = b % 10\n    }\n    if c > 0 {\n        e = c % 10\n    }\n    if\
    \ d > 0 {\n        f = d % 10\n    }\n    if e > 0 {\n        g = e % 10\n   \
    \ }\n    if f > 0 {\n        h = f % 10\n    }\n    if g > 0 {\n        i = g\
    \ % 10\n    }\n    if h > 0 {\n        j = h % 10\n    }\n    if i > 0 {\n   \
    \     k = i % 10\n    }\n    if j > 0 {\n        l = j % 10\n    }\n    if k >\
    \ 0 {\n        m = k % 10\n    }\n    if l > 0 {\n        n = l % 10\n    }\n\
    \    if m > 0 {\n        o = m % 10\n    }\n    if n > 0 {\n        p = n % 10\n\
    \    }\n    if o > 0 {\n        q = o % 10\n    }\n    if p > 0 {\n        r =\
    \ p % 10\n    }\n    if q > 0 {\n        s = q % 10\n    }\n    if r > 0 {\n \
    \       t = r % 10\n    }\n    if s > 0 {\n        u = s % 10\n    }\n    if t\
    \ > 0 {\n        v = t % 10\n    }\n    if u > 0 {\n        w = u % 10\n    }\n\
    \    if v > 0 {\n        x = v % 10\n    }\n    if w > 0 {\n        y = w % 10\n\
    \    }\n    if x > 0 {\n        z = x % 10\n    }\n    \n    if z > 0 {\n    \
    \    return z * 10 + y * 10 + x * 10 + w * 10 + v * 10 + u * 10 + t * 10 + s *\
    \ 10 + r * 10 + p * 10 + o * 10 + j * 10 + k", "    // Write your code here\n\
    \    if b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n  \
    \  }\n    if b < 0 {\n        b = -b\n    }\n    c := 0\n    for i := 0; i < b;\
    \ i++ {\n        c = c * 10 + a%10\n        a = a / 10\n    }\n    return c\n\
    }\n", "    // Write your code here\n    c := 0\n    for i := 0; i < len(a); i++\
    \ {\n        c += a[i] * b[i]\n    }\n    return c\n}\n", "    c := a * b\n  \
    \  if c < 0 {\n        c *= -1\n    }\n    return c\n}\n", "    if b == 0 {\n\
    \        return 0\n    }\n    c := 0\n    for i := 0; i < b; i++ {\n        c\
    \ = c * 10 + a % 10\n        a = a / 10\n    }\n    return c\n}\n", "    c :=\
    \ 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] - '0'\n    }\n    for\
    \ i := 0; i < len(b); i++ {\n        c += b[i] - '0'\n    }\n    return c\n}\n",
  "    c := 0\n    d := 0\n    e := 0\n    f := 0\n    g := 0\n    h := 0\n    i :=\
    \ 0\n    j := 0\n    k := 0\n    l := 0\n    m := 0\n    n := 0\n    o := 0\n\
    \    p := 0\n    q := 0\n    r := 0\n    s := 0\n    t := 0\n    u := 0\n    v\
    \ := 0\n    w := 0\n    x := 0\n    y := 0\n    z := 0\n    \n    switch {\n \
    \   case a > 0 && b > 0:\n        c = a * b\n    case a > 0 && b < 0:\n      \
    \  c = a * (-b)\n    case a < 0 && b > 0:\n        c = a * (b)\n    case a < 0\
    \ && b < 0:\n        c = a * (-b)\n    }\n    \n    switch {\n    case c > 1000:\n\
    \        d = c / 1000\n        c -= d * 1000\n    case c > 100:\n        d = c\
    \ / 100\n        c -= d * 100\n    case c > 10:\n        d = c / 10\n        c\
    \ -= d * 10\n    case c > 1:\n        d = c\n        c = 0\n    }\n    \n    switch\
    \ {\n    case d > 1000:\n        e = d / 1000\n        d -= e * 1000\n    case\
    \ d > 100:\n        e = d / 100\n        d -= e * 100\n    case d > 10:\n    \
    \    e = d / 10\n        d -= e * 10\n    case d > 1:\n        e = d\n       \
    \ d = 0\n    }\n    \n    switch {\n    case e > 1000:\n        f = e / 1000\n\
    \        e -= f * 1000\n    case e > 100:\n        f = e / 100\n        e -= f\
    \ * 100\n    case e > 10:\n        f = e / 10\n        e -= f * 10\n    case e\
    \ > 1:\n        f = e\n        e = 0\n    }\n    \n    switch {\n    case f >\
    \ 1000:\n        g = f / 1000\n        f -= g * 1000\n    case f > 100:\n    \
    \    g = f / 100\n        f -= g * 100\n    case f > 10:\n        g = f / 10\n\
    \        f -= g * 10\n    case f > 1:\n        g = f\n        f = 0\n    }\n \
    \   \n    switch {\n    case g > 1000:\n        h = g / 1000\n        g -= h *\
    \ 1000\n    case g > 100:\n        h = g / 100\n        g -= h * 100\n    case\
    \ g > 10:\n        h = g / 10\n        g -= ", "    c := 0\n    d := 0\n    e\
    \ := 0\n    f := 0\n    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n\
    \    l := 0\n    m := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r\
    \ := 0\n    s := 0\n    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n\
    \    y := 0\n    z := 0\n    \n    switch {\n    case a < b:\n        c = a\n\
    \        d = b\n    case a > b:\n        c = b\n        d = a\n    default:\n\
    \        c = a\n        d = b\n    }\n    \n    switch {\n    case c < 10:\n \
    \       e = c\n        f = d\n    case c > 10:\n        e = d\n        f = c\n\
    \    default:\n        e = c\n        f = d\n    }\n    \n    switch {\n    case\
    \ e < 10:\n        g = e\n        h = f \n    case e > 10:\n        g = f\n  \
    \      h = e\n    default:\n        g = e\n        h = f\n    }\n    \n    switch\
    \ {\n    case g < 10:\n        i = g\n        j = h\n    case g > 10:\n      \
    \  i = h\n        j = g\n    default:\n        i = g\n        j = h\n    }\n \
    \   \n    switch {\n    case i < 10:\n        k = i\n        l = j\n    case i\
    \ > 10:\n        k = j\n        l = i\n    default:\n        k = i\n        l\
    \ = j\n    }\n    \n    switch {\n    case k < 10:\n        m = k\n        n =\
    \ l\n    case k > 10:\n        m = l\n        n = k\n    default:\n        m =\
    \ k\n        n = l\n    }\n    \n    switch {\n    case m < 10:\n        o = m\n\
    \        p = n\n    case m > 10:\n        o = n\n        p = m\n    default:\n\
    \        o = m\n        p = n\n    }\n    \n    switch {\n    case o < 10:\n \
    \       q = o\n        r = p\n    case o > 10:\n        q = p\n        r = o\n\
    \    default:\n        q = o\n        r = p\n    }\n    \n    switch {\n    case\
    \ q < 10:\n        s = q\n        t = r\n    case q > 10:\n        s = r\n   \
    \     t = q\n    default:\n        s = q\n        t = r\n    }\n    \n    switch\
    \ {\n    case s < 10:\n        u = s\n        v = t\n    case s > 10:\n      \
    \  u = t\n        v = s\n", "    c := 0\n    d := 0\n    e := 0\n    f := 0\n\
    \    g := 0\n    h := 0\n    i := 0\n    j := 0\n    k := 0\n    l := 0\n    m\
    \ := 0\n    n := 0\n    o := 0\n    p := 0\n    q := 0\n    r := 0\n    s := 0\n\
    \    t := 0\n    u := 0\n    v := 0\n    w := 0\n    x := 0\n    y := 0\n    z\
    \ := 0\n    \n    switch {\n    case a < b:\n        c, d = a, b\n    case a >\
    \ b:\n        c, d = b, a\n    }\n    \n    switch {\n    case c < 10:\n     \
    \   e = c\n    case c < 100:\n        e = c\n    case c < 1000:\n        e = c\n\
    \    case c < 10000:\n        e = c\n    case c < 100000:\n        e = c\n   \
    \ case c < 1000000:\n        e = c\n    case c < 10000000:\n        e = c\n  \
    \  case c < 100000000:\n        e = c\n    case c < 1000000000:\n        e = c\n\
    \    case c < 10000000000:\n        e = c\n    case c < 100000000000:\n      \
    \  e = c\n    case c < 1000000000000:\n        e = c\n    case c < 10000000000000:\n\
    \        e = c\n    case c < 100000000000000:\n        e = c\n    case c < 1000000000000000:\n\
    \        e = c\n    case c < 10000000000000000:\n        e = c\n    case c < 100000000000000000:\n\
    \        e = c\n    case c < 1000000000000000000:\n        e = c\n    case c <\
    \ 10000000000000000000:\n        e = c\n    case c < 100000000000000000000:\n\
    \        e = c\n    case c < 1000000000000000000000:\n        e = c\n    case\
    \ c < 10000000000000000000000:\n        e = c\n    case c < 100000000000000000000000:\n\
    \        e = c\n    case c < 1000000000000000000000000:\n        e = c\n    case\
    \ c < 10000000000000000000000000:\n        e = c\n    case c < 100000000000000000000000000:\n\
    \        e = c\n    case c < 1000000000000000000000000000:\n        e = c\n  \
    \  case c < 10000000000000000000000000000:\n        e = c\n    case c < 100000000000000000000000000000:\n\
    \        e = c\n    case c < 1000000000000000000000000000000:\n        e = c\n\
    \    case c < 10000000000000000000000000000000:\n        e = c\n    case c < 100000000000000000000000000",
  "    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n    }\n\
    \    return c\n}\n", "    c := 0\n    for i := 0; i < len(a); i++ {\n        c\
    \ += a[i] * b[i]\n    }\n    return c\n}\n", "    c := 0\n    for i := 0; i <\
    \ len(a); i++ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++\
    \ {\n        c += b[i] - '0'\n    }\n    return c\n}\n", "    mult := 0\n    mult\
    \ += a / 10\n    mult *= b\n    mult += a % 10\n    mult += b / 10\n    mult *=\
    \ b\n    mult += a % 10\n    mult += b % 10\n    return mult\n}\n", "    // Write\
    \ your code here\n    \n    return 0\n}\n", "    c := 0\n    for i := 0; i < len(a);\
    \ i++ {\n        c += a[i] - '0'\n    }\n    for i := 0; i < len(b); i++ {\n \
    \       c += b[i] - '0'\n    }\n    return c\n}\n", "    // Write your code here\n\
    \    if a > 0 && b > 0 {\n        return a * b / 10\n    }\n    return 0\n}\n",
  "    c := 0\n    for i := 0; i < len(a); i++ {\n        c += a[i] * b[i]\n    }\n\
    \    return c\n}\n", "    // Write your code here\n    \n    return 0\n}\n", " \
    \   mult := 0\n    \n    if a > 0 && b > 0 {\n        mult += a % 10 * b / 10\n\
    \        a = a / 10\n        b = b / 10\n    }\n    \n    if a > 0 {\n       \
    \ mult += a\n        a = a / 10\n    }\n    \n    if b > 0 {\n        mult +=\
    \ b\n        b = b / 10\n    }\n    \n    return mult\n}\n", "    c := 0\n   \
    \ for i := 0; i < 10; i++ {\n        c += a%10 * b%10\n        a /= 10\n     \
    \   b /= 10\n    }\n    return c\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
