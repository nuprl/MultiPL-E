language: go_test.go
name: HumanEval_8_sum_product
results:
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, n := range numbers {\n    \
    \    sum[i] = n\n        product[i] = 1\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp1kx4nvy8_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp1kx4nvy8_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=1)]]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, n := range numbers {\n    \
    \    sum[i] = n\n        product[i] = 1\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp1kx4nvy8_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp1kx4nvy8_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=1)]]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n\n    for i := range numbers {\n     \
    \   sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n\n    for i :=\
    \ range numbers {\n        sum[i] += sum[i-1]\n        product[i] *= product[i-1]\n\
    \    }\n\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t\
    \ *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1,\
    \ 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100,\
    \ 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5,\
    \ 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}),\
    \ expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgitvrkzy_test.go:24:9: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmpgitvrkzy_test.go:25:9: invalid operation: operator * not defined on product[i]
    (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n\n    for i := range numbers {\n        sum[i] = numbers[i]\n\
    \        product[i] = numbers[i]\n    }\n\n    for i := range numbers {\n    \
    \    sum[i] += sum[i-1]\n        product[i] *= product[i-1]\n    }\n\n    return\
    \ []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate\
    \ := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}), expected:\
    \ []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_8j7umb7_test.go:28:9: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmp_8j7umb7_test.go:29:9: invalid operation: operator * not defined on product[i]
    (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n\n    for i := range numbers {\n     \
    \   sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n\n    for i :=\
    \ range numbers {\n        sum[i] = sum[i] + product[i]\n        product[i] =\
    \ product[i] * numbers[i]\n    }\n\n    return sum\n}\n\nfunc TestSum_Product(t\
    \ *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1,\
    \ 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100,\
    \ 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5,\
    \ 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}),\
    \ expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsw57d0w_test.go:24:18: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmptsw57d0w_test.go:25:22: invalid operation: product[i] * numbers[i] (mismatched
    types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n\n    for i := range numbers {\n     \
    \   sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n\n    for i :=\
    \ range numbers {\n        sum[i] = sum[i] + product[i]\n        product[i] =\
    \ product[i] * numbers[i]\n    }\n\n    return sum\n}\n\nfunc TestSum_Product(t\
    \ *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1,\
    \ 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100,\
    \ 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5,\
    \ 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}),\
    \ expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsw57d0w_test.go:24:18: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmptsw57d0w_test.go:25:22: invalid operation: product[i] * numbers[i] (mismatched
    types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        sum[i]\
    \ = number\n        product[i] = number\n        i++\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n\n    for i := range numbers {\n     \
    \   sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n\n    for i :=\
    \ range numbers {\n        sum[i] += sum[i-1]\n        product[i] *= product[i-1]\n\
    \    }\n\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t\
    \ *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1,\
    \ 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100,\
    \ 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5,\
    \ 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}),\
    \ expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgitvrkzy_test.go:24:9: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmpgitvrkzy_test.go:25:9: invalid operation: operator * not defined on product[i]
    (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    sum[0] = numbers[0]\n    product[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        sum[i] = sum[i-1] + numbers[i]\n  \
    \      product[i] = numbers[i]\n    }\n    return []interface{}{sum, product}\n\
    }\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0, 1}\
    \ },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3, 1}\
    \ },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100, 0}\
    \ },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15, 105}\
    \ },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr13gl_27_test.go:23:18: invalid operation: sum[i - 1] + numbers[i] (mismatched
    types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, n := range numbers {\n    \
    \    sum[i] = n\n        product[i] = 1\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp1kx4nvy8_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp1kx4nvy8_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=1)]]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpaaavkomm_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        sum[i]\
    \ = number\n        product[i] = number\n        i++\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n\n    sum[0] = numbers[0]\n    product[0] = numbers[0]\n\n  \
    \  for i := 1; i < len(numbers); i++ {\n        sum[i] = sum[i-1] + numbers[i]\n\
    \        product[i] = product[i-1] * numbers[i]\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzy0ljj0_test.go:26:18: invalid operation: sum[i - 1] + numbers[i] (mismatched
    types interface{} and int)

    /tmp/tmpvzy0ljj0_test.go:27:22: invalid operation: product[i - 1] * numbers[i]
    (mismatched types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := 0; i < len(numbers); i++\
    \ {\n        sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n   \
    \ for i := 0; i < len(numbers); i++ {\n        sum[i] += sum[i-1]\n        product[i]\
    \ *= product[i-1]\n    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t\
    \ *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1,\
    \ 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100,\
    \ 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5,\
    \ 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}),\
    \ expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5vyt33q_test.go:22:9: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmpn5vyt33q_test.go:23:9: invalid operation: operator * not defined on product[i]
    (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := 0; i < len(numbers); i++\
    \ {\n        sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n   \
    \ for i := 0; i < len(numbers); i++ {\n        sum[i] += sum[i-1]\n        product[i]\
    \ *= product[i-1]\n    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t\
    \ *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1,\
    \ 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100,\
    \ 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5,\
    \ 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}),\
    \ expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5vyt33q_test.go:22:9: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmpn5vyt33q_test.go:23:9: invalid operation: operator * not defined on product[i]
    (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    for i := range numbers {\n        sum[i] = numbers[i]\n \
    \       product[i] = numbers[i]\n    }\n    for i := range numbers {\n       \
    \ sum[i] = sum[i] + product[i]\n        product[i] = product[i] * numbers[i]\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate\
    \ := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}), expected:\
    \ []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k5grhi3_test.go:25:18: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmp3k5grhi3_test.go:26:22: invalid operation: product[i] * numbers[i] (mismatched
    types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, n := range numbers {\n    \
    \    sum[i] = n\n        product[i] = 1\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp1kx4nvy8_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp1kx4nvy8_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp1kx4nvy8_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=1)]]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    sum[0] = numbers[0]\n    product[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        sum[i] = sum[i-1] + numbers[i]\n  \
    \      product[i] = product[i-1] * numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvd18xrmn_test.go:23:18: invalid operation: sum[i - 1] + numbers[i] (mismatched
    types interface{} and int)

    /tmp/tmpvd18xrmn_test.go:24:22: invalid operation: product[i - 1] * numbers[i]
    (mismatched types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := 0; i < len(numbers); i++\
    \ {\n        sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n   \
    \ for i := 0; i < len(numbers); i++ {\n        sum[i] += sum[i-1]\n        product[i]\
    \ *= product[i-1]\n    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t\
    \ *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1,\
    \ 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100,\
    \ 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5,\
    \ 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}),\
    \ expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn5vyt33q_test.go:22:9: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmpn5vyt33q_test.go:23:9: invalid operation: operator * not defined on product[i]
    (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    sum[0] = numbers[0]\n    product[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        sum[i] = sum[i-1] + numbers[i]\n  \
    \      product[i] = product[i-1] * numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvd18xrmn_test.go:23:18: invalid operation: sum[i - 1] + numbers[i] (mismatched
    types interface{} and int)

    /tmp/tmpvd18xrmn_test.go:24:22: invalid operation: product[i - 1] * numbers[i]
    (mismatched types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    for i := range numbers {\n        sum[i] = numbers[i]\n \
    \       product[i] = numbers[i]\n    }\n    for i := range numbers {\n       \
    \ sum[i] += sum[i-1]\n        product[i] *= product[i-1]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9q8uvsiz_test.go:25:9: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmp9q8uvsiz_test.go:26:9: invalid operation: operator * not defined on product[i]
    (variable of type interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n\
    \        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp809hc4ym_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n\n    for i := range numbers {\n     \
    \   sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n\n    for i :=\
    \ range numbers {\n        sum[i] = sum[i] + product[i]\n        product[i] =\
    \ product[i] * numbers[i]\n    }\n\n    return sum\n}\n\nfunc TestSum_Product(t\
    \ *testing.T) {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{}), expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1,\
    \ 1, 1}), expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100,\
    \ 0}), expected: []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5,\
    \ 7}), expected: []interface{}{15, 105} },\n     { actual: candidate([]int{10}),\
    \ expected: []interface{}{10, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptsw57d0w_test.go:24:18: invalid operation: operator + not defined on sum[i]
    (variable of type interface{})

    /tmp/tmptsw57d0w_test.go:25:22: invalid operation: product[i] * numbers[i] (mismatched
    types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpx9abh3jj_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpx9abh3jj_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpx9abh3jj_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpx9abh3jj_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpx9abh3jj_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    sum[0] = numbers[0]\n    product[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        sum[i] = sum[i-1] + numbers[i]\n  \
    \      product[i] = product[i-1] * numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvd18xrmn_test.go:23:18: invalid operation: sum[i - 1] + numbers[i] (mismatched
    types interface{} and int)

    /tmp/tmpvd18xrmn_test.go:24:22: invalid operation: product[i - 1] * numbers[i]
    (mismatched types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    sum[0] = numbers[0]\n    product[0] = numbers[0]\n    for\
    \ i := 1; i < len(numbers); i++ {\n        sum[i] = sum[i-1] + numbers[i]\n  \
    \      product[i] = product[i-1] * numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvd18xrmn_test.go:23:18: invalid operation: sum[i - 1] + numbers[i] (mismatched
    types interface{} and int)

    /tmp/tmpvd18xrmn_test.go:24:22: invalid operation: product[i - 1] * numbers[i]
    (mismatched types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n\n    for i := range numbers {\n     \
    \   sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n\n    return\
    \ []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate\
    \ := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}), expected:\
    \ []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoyqsucfq_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoyqsucfq_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoyqsucfq_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoyqsucfq_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoyqsucfq_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 2
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n\n    sum[0] = numbers[0]\n    product[0] = numbers[0]\n\n  \
    \  for i := 1; i < len(numbers); i++ {\n        sum[i] = sum[i-1] + numbers[i]\n\
    \        product[i] = product[i-1] * numbers[i]\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvzy0ljj0_test.go:26:18: invalid operation: sum[i - 1] + numbers[i] (mismatched
    types interface{} and int)

    /tmp/tmpvzy0ljj0_test.go:27:22: invalid operation: product[i - 1] * numbers[i]
    (mismatched types interface{} and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075177
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    i := 0\n    for _, number := range\
    \ numbers {\n        sum[i] = number\n        product[i] = number\n        i++\n\
    \    }\n    return []interface{}{sum, product}\n}\n\nfunc TestSum_Product(t *testing.T)\
    \ {\n  candidate := sum_product\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate([]int{1, 1, 1}),\
    \ expected: []interface{}{3, 1} },\n     { actual: candidate([]int{100, 0}), expected:\
    \ []interface{}{100, 0} },\n     { actual: candidate([]int{3, 5, 7}), expected:\
    \ []interface{}{15, 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10,\
    \ 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpoqmt05he_test.go:43: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpoqmt05he_test.go:43:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        sum[i]\
    \ = number\n        product[i] = number\n        i++\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i, number := range numbers {\n\
    \        sum[i] = number\n        product[i] = number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmpv8koofh6_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmpv8koofh6_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 0
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0,\
    \ 1}\n    }\n    sum := 0\n    product := 1\n    for _, number := range numbers\
    \ {\n        sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075034
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        sum[i]\
    \ = number\n        product[i] = number\n        i++\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := 0\n    product := 1\n    for _, number := range numbers {\n  \
    \      sum += number\n        product *= number\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmpne4a_18g_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    sum := make([]interface{}, len(numbers))\n    product\
    \ := make([]interface{}, len(numbers))\n    for i := range numbers {\n       \
    \ sum[i] = numbers[i]\n        product[i] = numbers[i]\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] []]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmphm71rt0o_test.go:41: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmphm71rt0o_test.go:41:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075178
- exit_code: 1
  program: "package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// For a given list of integers, return a tuple consisting of a sum and a product\
    \ of all the integers in a list.\n// Empty sum should be equal to 0 and empty\
    \ product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0,\
    \ 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers\
    \ []int) []interface{} {\n    if len(numbers) == 0 {\n        return nil\n   \
    \ }\n    sum := make([]interface{}, len(numbers))\n    product := make([]interface{},\
    \ len(numbers))\n    i := 0\n    for _, number := range numbers {\n        sum[i]\
    \ = number\n        product[i] = number\n        i++\n    }\n    return []interface{}{sum,\
    \ product}\n}\n\nfunc TestSum_Product(t *testing.T) {\n  candidate := sum_product\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{}), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate([]int{1, 1, 1}), expected: []interface{}{3,\
    \ 1} },\n     { actual: candidate([]int{100, 0}), expected: []interface{}{100,\
    \ 0} },\n     { actual: candidate([]int{3, 5, 7}), expected: []interface{}{15,\
    \ 105} },\n     { actual: candidate([]int{10}), expected: []interface{}{10, 10}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Product (0.00s)\n    --- FAIL: TestSum_Product/test_num__0\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestSum_Product/test_num__1 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=3) %!s(int=1)]', got '[[%!s(int=1) %!s(int=1) %!s(int=1)]\
    \ [%!s(int=1) %!s(int=1) %!s(int=1)]]'\n    --- FAIL: TestSum_Product/test_num__2\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=100) %!s(int=0)]',\
    \ got '[[%!s(int=100) %!s(int=0)] [%!s(int=100) %!s(int=0)]]'\n    --- FAIL: TestSum_Product/test_num__3\
    \ (0.00s)\n        tmp4novaems_test.go:46: expected '[%!s(int=15) %!s(int=105)]',\
    \ got '[[%!s(int=3) %!s(int=5) %!s(int=7)] [%!s(int=3) %!s(int=5) %!s(int=7)]]'\n\
    \    --- FAIL: TestSum_Product/test_num__4 (0.00s)\n        tmp4novaems_test.go:46:\
    \ expected '[%!s(int=10) %!s(int=10)]', got '[[%!s(int=10)] [%!s(int=10)]]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075178
