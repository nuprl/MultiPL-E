name: HumanEval_78_hex_key
language: go_test.go
prompt: "package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ have been tasked to write a function that receives \n// a hexadecimal number as\
  \ a string and counts the number of hexadecimal \n// digits that are primes (prime\
  \ number, or a prime, is a natural number \n// greater than 1 that is not a product\
  \ of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5,\
  \ 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
  // So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B\
  \ (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct\
  \ or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n\
  // >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"\
  ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"\
  2020\")\n// 2\nfunc hex_key(num string) int {\n"
tests: "func TestHex_Key(t *testing.T) {\n  candidate := hex_key\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"AB\"), expected: 1 },\n     { actual: candidate(\"1077E\"\
  ), expected: 2 },\n     { actual: candidate(\"ABED1A33\"), expected: 4 },\n    \
  \ { actual: candidate(\"2020\"), expected: 2 },\n     { actual: candidate(\"123456789ABCDEF0\"\
  ), expected: 6 },\n     { actual: candidate(\"112233445566778899AABBCCDDEEFF00\"\
  ), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    n := 0\n    for _, r := range num {\n        n += int(r) - int('A')\
    \ + int('0')\n    }\n    return n\n}\n", "    n := 0\n    i := 0\n    for ; i\
    \ < len(num); i++ {\n        n += int(num[i]) - 'A'\n    }\n    if n == 0 {\n\
    \        return 0\n    }\n    n /= 2\n    for ; i < len(num); i++ {\n        n\
    \ += int(num[i]) - 'A'\n        if n % 2 == 0 {\n            n /= 2\n        }\n\
    \    }\n    return n\n}\n", "    // Your code here\n    \n    return 0\n}\n",
  "    n := 0\n    for _, r := range num {\n        n += int(rune(r) - 'A') + 1\n\
    \    }\n    return n\n}\n", "    // Your code here\n    \n    return 0\n}\n",
  "    n := len(num)\n    count := 0\n    i := 0\n    for ; i < n; i++ {\n       \
    \ digit := int(num[i])\n        if digit > 9 {\n            digit = digit - 10\n\
    \        }\n        if digit == 0 || digit == 1 {\n            continue\n    \
    \    }\n        count += digit\n    }\n    return count\n}\n", "    var count\
    \ int = 0\n    for _, r := range num {\n        if r == 'A' || r == 'B' || r ==\
    \ 'C' || r == 'D' || r == 'E' || r == 'F' {\n            count++\n        }\n\
    \    }\n    return count\n}\n", "    num := strings.ToUpper(num)\n    num := strings.Replace(num,\
    \ \"A\", \"1\", -1)\n    num := strings.Replace(num, \"B\", \"2\", -1)\n    num\
    \ := strings.Replace(num, \"C\", \"3\", -1)\n    num := strings.Replace(num, \"\
    D\", \"4\", -1)\n    num := strings.Replace(num, \"E\", \"5\", -1)\n    num :=\
    \ strings.Replace(num, \"F\", \"6\", -1)\n    num := strings.Replace(num, \"0\"\
    , \"7\", -1)\n    num := strings.Replace(num, \"1\", \"8\", -1)\n    num := strings.Replace(num,\
    \ \"2\", \"9\", -1)\n    num := strings.Replace(num, \"3\", \"A\", -1)\n    num\
    \ := strings.Replace(num, \"4\", \"B\", -1)\n    num := strings.Replace(num, \"\
    5\", \"C\", -1)\n    num := strings.Replace(num, \"6\", \"D\", -1)\n    num :=\
    \ strings.Replace(num, \"7\", \"E\", -1)\n    num := strings.Replace(num, \"8\"\
    , \"F\", -1)\n    num := strings.Replace(num, \"9\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"+\", \"-\", -1)\n    num := strings.Replace(num, \"/\", \"*\", -1)\n    num\
    \ := strings.Replace(num, \"=\", \"+\", -1)\n    num := strings.Replace(num, \"\
    *\", \"/\", -1)\n    num := strings.Replace(num, \"-\", \"+\", -1)\n    num :=\
    \ strings.Replace(num, \"(\", \"\", -1)\n    num := strings.Replace(num, \")\"\
    , \"\", -1)\n    num := strings.Replace(num, \"/\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"*\", \"\", -1)\n    num := strings.Replace(num, \"+\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"-\", \"\", -1)\n    num := strings.Replace(num, \"\
    =\", \"\", -1)\n    num := strings.Replace(num, \".\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"\", -1)\n    num := strings.Replace(num, \"+\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"*\", \"\", -1)\n    num := strings.Replace(num, \"\
    /\", \"\", -1)\n    num := strings.Replace(num, \"=\", \"\", -1)\n    num := strings.Replace(num,\
    \ \".\", \"\", -1)\n    num := strings.Replace(num, \"-\", \"\", -1)\n    num\
    \ := strings.Replace(num, \"+\", \"\", -1)\n    num := strings.Replace(num, \"\
    *\", \"\", -1)\n    num := strings.Replace(num, \"/\", \"\", -1)\n    num := strings.Replace(num,\
    \ \"=\", \"\", -1)\n    num := strings.Replace(num, \".\", \"\", -1)\n", "   \
    \ num := strings.ToUpper(num)\n    n := len(num)\n    prime := 0\n    i := 0\n\
    \    for ; i < n; i++ {\n        digit := num[i]\n        if digit == 'A' || digit\
    \ == 'B' || digit == 'C' || digit == 'D' || digit == 'E' || digit == 'F' {\n \
    \           prime++\n        }\n    }\n    return prime\n}\n", "    n := 0\n \
    \   for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C' || r\
    \ == 'D' || r == 'E' || r == 'F' {\n            n += 2\n        } else {\n   \
    \         n += r - '0'\n        }\n    }\n    return n\n}\n", "    num := strings.ToUpper(num)\n\
    \    num := strings.Replace(num, \"A\", \"1\", -1)\n    num := strings.Replace(num,\
    \ \"B\", \"2\", -1)\n    num := strings.Replace(num, \"C\", \"3\", -1)\n    num\
    \ := strings.Replace(num, \"D\", \"4\", -1)\n    num := strings.Replace(num, \"\
    E\", \"5\", -1)\n    num := strings.Replace(num, \"F\", \"6\", -1)\n    num :=\
    \ strings.Replace(num, \"0\", \"0\", -1)\n    num := strings.Replace(num, \"1\"\
    , \"1\", -1)\n    num := strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num,\
    \ \"3\", \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num\
    \ := strings.Replace(num, \"5\", \"5\", -1)\n    num := strings.Replace(num, \"\
    6\", \"6\", -1)\n    num := strings.Replace(num, \"7\", \"7\", -1)\n    num :=\
    \ strings.Replace(num, \"8\", \"8\", -1)\n    num := strings.Replace(num, \"9\"\
    , \"9\", -1)\n    num := strings.Replace(num, \"+\", \"-\", -1)\n    num := strings.Replace(num,\
    \ \"-\", \"+\", -1)\n    num := strings.Replace(num, \".\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"/\", \"0\", -1)\n    num := strings.Replace(num, \"\
    0\", \"0\", -1)\n    num := strings.Replace(num, \"1\", \"1\", -1)\n    num :=\
    \ strings.Replace(num, \"2\", \"2\", -1)\n    num := strings.Replace(num, \"3\"\
    , \"3\", -1)\n    num := strings.Replace(num, \"4\", \"4\", -1)\n    num := strings.Replace(num,\
    \ \"5\", \"5\", -1)\n    num := strings.Replace(num, \"6\", \"6\", -1)\n    num\
    \ := strings.Replace(num, \"7\", \"7\", -1)\n    num := strings.Replace(num, \"\
    8\", \"8\", -1)\n    num := strings.Replace(num, \"9\", \"9\", -1)\n    num :=\
    \ strings.Replace(num, \"-\", \"+\", -1)\n    num := strings.Replace(num, \"+\"\
    , \"-\", -1)\n    num := strings.Replace(num, \".\", \"0\", -1)\n    num := strings.Replace(num,\
    \ \"/\", \"0\", -1)\n    num := strings.Replace(num, \"0\", \"0\", -1)\n    num\
    \ := strings.Replace(num, \"1\", \"1\", -1)\n    num := strings.Replace(num, \"\
    2\", \"2\", -1)\n    num := strings.Replace(num, \"3\", \"3\", -1)\n    num :=\
    \ strings.Replace(num, \"4\", \"4\", -1)\n    num := strings.Replace(num, \"5\"\
    , \"5\", -1)\n    num := strings.Replace(num, \"6\", \"6", "    num := strings.ToUpper(num)\n\
    \    \n    var count int = 0\n    for _, v := range num {\n        if v == 'A'\
    \ || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            count++\n\
    \        }\n    }\n    \n    return count\n}\n", "    n := 0\n    for _, r :=\
    \ range num {\n        if r == 'A' || r == 'B' || r == 'C' || r == 'D' || r ==\
    \ 'E' || r == 'F' {\n            n = n + 1\n        }\n    }\n    return n\n}\n",
  "    num := strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n\
    \        if v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F'\
    \ {\n            count++\n        }\n    }\n    return count\n}\n", "    num :=\
    \ strings.ToUpper(num)\n    count := 0\n    for _, v := range num {\n        if\
    \ v == 'A' || v == 'B' || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n   \
    \         count++\n        }\n    }\n    return count\n}\n", "    num := strings.ToUpper(num)\n\
    \    count := 0\n    for _, v := range num {\n        if v == 'A' || v == 'B'\
    \ || v == 'C' || v == 'D' || v == 'E' || v == 'F' {\n            continue\n  \
    \      }\n        count += int(v)\n    }\n    return count\n}\n", "    n := 0\n\
    \    for _, r := range num {\n        if r == 'A' || r == 'B' || r == 'C' || r\
    \ == 'D' || r == 'E' || r == 'F' {\n            n += 2\n        } else {\n   \
    \         n += 1\n        }\n    }\n    return n\n}\n", "    count := 0\n    for\
    \ _, v := range num {\n        if v == 'A' || v == 'B' || v == 'C' || v == 'D'\
    \ || v == 'E' || v == 'F' {\n            count++\n        }\n    }\n    return\
    \ count\n}\n", "    var count int = 0\n    for _, c := range num {\n        if\
    \ c >= '0' && c <= '9' {\n            count++\n        }\n    }\n    return count\n\
    }\n", "    num := strings.ToUpper(num)\n    n := len(num)\n    prime := make([]int,\
    \ n)\n    prime := append(prime, 2)\n    prime := append(prime, 3)\n    prime\
    \ := append(prime, 5)\n    prime := append(prime, 7)\n    prime := append(prime,\
    \ 11)\n    prime := append(prime, 13)\n    prime := append(prime, 17)\n    prime\
    \ := append(prime, 19)\n    prime := append(prime, 23)\n    prime := append(prime,\
    \ 29)\n    prime := append(prime, 31)\n    prime := append(prime, 37)\n    prime\
    \ := append(prime, 43)\n    prime := append(prime, 59)\n    prime := append(prime,\
    \ 61)\n    prime := append(prime, 67)\n    prime := append(prime, 73)\n    prime\
    \ := append(prime, 79)\n    prime := append(prime, 83)\n    prime := append(prime,\
    \ 89)\n    prime := append(prime, 97)\n    prime := append(prime, 101)\n    prime\
    \ := append(prime, 103)\n    prime := append(prime, 107)\n    prime := append(prime,\
    \ 109)\n    prime := append(prime, 113)\n    prime := append(prime, 127)\n   \
    \ prime := append(prime, 131)\n    prime := append(prime, 137)\n    prime := append(prime,\
    \ 139)\n    prime := append(prime, 149)\n    prime := append(prime, 151)\n   \
    \ prime := append(prime, 157)\n    prime := append(prime, 163)\n    prime := append(prime,\
    \ 167)\n    prime := append(prime, 173)\n    prime := append(prime, 179)\n   \
    \ prime := append(prime, 181)\n    prime := append(prime, 191)\n    prime := append(prime,\
    \ 193)\n    prime := append(prime, 197)\n    prime := append(prime, 199)\n   \
    \ prime := append(prime, 211)\n    prime := append(prime, 223)\n    prime := append(prime,\
    \ 227)\n    prime := append(prime, 229)\n    prime := append(prime, 233)\n   \
    \ prime := append(prime, 239)\n    prime := append(prime, 241)\n    prime := append(prime,\
    \ 243)\n    prime := append(prime, 247)\n    prime := append(prime, 251)\n   \
    \ prime := append(prime, 257)\n    prime := append(prime, 263)\n    prime := append(prime,\
    \ 269)\n    "]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
