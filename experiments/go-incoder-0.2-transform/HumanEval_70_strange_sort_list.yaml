name: HumanEval_70_strange_sort_list
language: go_test.go
prompt: "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given list of integers, return list in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3,\
  \ 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5,\
  \ 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst\
  \ []int) []int {\n"
tests: "func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1,\
  \ 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5,\
  \ 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1,\
  \ 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1,\
  \ 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5,\
  \ 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4,\
  \ 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5,\
  \ 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n\
    \        if v < min {\n            min = v\n        }\n        if v > max {\n\
    \            max = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n\
    \    return lst\n}\n", "    result := make([]int, len(lst))\n    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n \
    \           lst[i] = min\n        }\n        if lst[i] > max {\n            lst[i]\
    \ = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        result[i]\
    \ = lst[i]\n    }\n    return result\n}\n", "    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    result\
    \ := []int{}\n    for _, v := range lst {\n        if v == min {\n           \
    \ result = append(result, v)\n        }\n        if v == max {\n            result\
    \ = append(result, v)\n        }\n    }\n    for _, v := range result {\n    \
    \    result = append(result, v)\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n\
    \    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min}, lst...)\n    lst = append([]int{max},\
    \ lst...)\n    return lst\n}\n", "    if len(lst) == 0 {\n        return lst\n\
    \    }\n\n    // Initialize min and max to first element.\n    min := lst[0]\n\
    \    max := lst[0]\n\n    // Initialize remaining elements to first element.\n\
    \    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min\
    \ = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n \
    \       }\n    }\n\n    // Initialize new list with min and max elements.\n  \
    \  result := make([]int, 2, 2)\n    result[0] = min\n    result[1] = max\n\n \
    \   // Sort remaining elements.\n    for i := 2; i < len(lst); i++ {\n       \
    \ if lst[i] > max {\n            max = lst[i]\n        }\n        if lst[i] <\
    \ min {\n            min = lst[i]\n        }\n    }\n\n    // Append min and max\
    \ to new list.\n    result[0] = min\n    result[1] = max\n\n    return result\n\
    }\n", "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    result := []int{}\n    for i := 0; i\
    \ < len(lst); i++ {\n        if lst[i] > max {\n            result = append(result,\
    \ max)\n            max = lst[i]\n        } else {\n            result = append(result,\
    \ lst[i])\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i]\
    \ < min {\n            result = append(result, min)\n            min = lst[i]\n\
    \        } else {\n            result = append(result, lst[i])\n        }\n  \
    \  }\n    return result\n}\n", "    if len(lst) == 0 {\n        return lst\n \
    \   }\n    min := lst[0]\n    max := lst[0]\n    for _, val := range lst {\n \
    \       if val < min {\n            min = val\n        }\n        if val > max\
    \ {\n            max = val\n        }\n    }\n    lst = append([]int{min, max},\
    \ lst...)\n    return strange_sort_list(lst)\n}\n", "    // Initialize min and\
    \ max values\n    min := lst[0]\n    max := lst[0]\n    for _, val := range lst\
    \ {\n        if val < min {\n            min = val\n        }\n        if val\
    \ > max {\n            max = val\n        }\n    }\n\n    // Initialize new list\n\
    \    result := make([]int, len(lst))\n\n    // Sort list by comparing min and\
    \ max\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n      \
    \      result[i] = min\n        } else {\n            result[i] = max\n      \
    \  }\n    }\n\n    return result\n}\n", "    min := lst[0]\n    max := lst[0]\n\
    \    for _, v := range lst {\n        if v < min {\n            min = v\n    \
    \    }\n        if v > max {\n            max = v\n        }\n    }\n    lst =\
    \ append([]int{min, max}, lst...)\n    return lst\n}\n", "    min := lst[0]\n\
    \    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n      \
    \      min = v\n        }\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    result := []int{}\n    for _, v := range lst {\n        if v ==\
    \ min {\n            result = append(result, v)\n        }\n        if v == max\
    \ {\n            result = append(result, v)\n        }\n        if v < min {\n\
    \            result = append(result, v)\n        }\n        if v > max {\n   \
    \         result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    result := make([]int, 0, len(lst))\n    for _, v\
    \ := range lst {\n        if v == min {\n            result = append(result, v)\n\
    \        }\n        if v == max {\n            result = append(result, v)\n  \
    \      }\n        if v < min {\n            result = append(result, v)\n     \
    \   }\n        if v > max {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    var min int\n    var\
    \ max int\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for _, v := range lst {\n        if v == min {\n            result = append(result,\
    \ max)\n        } else {\n            result = append(result, v)\n        }\n\
    \    }\n    for _, v := range lst {\n        if v == max {\n            result\
    \ = append(result, min)\n        } else {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    n := len(lst)\n    min :=\
    \ lst[0]\n    max := lst[n-1]\n    for i := 1; i < n; i++ {\n        if lst[i]\
    \ < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n  \
    \          max = lst[i]\n        }\n    }\n    result := make([]int, 0, n)\n \
    \   for i := 0; i < n; i++ {\n        if lst[i] > min {\n            result =\
    \ append(result, lst[i])\n        }\n    }\n    for i := 0; i < n; i++ {\n   \
    \     if lst[i] < max {\n            result = append(result, lst[i])\n       \
    \ }\n    }\n    for i := 0; i < n; i++ {\n        if lst[i] > min && lst[i] <\
    \ max {\n            result = append(result, lst[i])\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(lst))\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i]\
    \ = min\n        }\n        if lst[i] > max {\n            lst[i] = max\n    \
    \    }\n    }\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n\
    \    }\n    return result\n}\n", "    min := lst[0]\n    max := lst[0]\n    for\
    \ _, v := range lst {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    lst = append([]int{min},\
    \ lst...)\n    lst = append([]int{max}, lst...)\n    return lst\n}\n", "    min\
    \ := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return lst\n\
    }\n", "    sort.Sort(sort.Reverse(sort.IntSlice(lst)))\n    return lst\n}\n",
  "    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    lst = append([]int{min, max}, lst...)\n    return\
    \ lst\n}\n", "    result := make([]int, len(lst))\n    min := lst[0]\n    max\
    \ := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min\
    \ = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i]\
    \ = min\n        }\n        if lst[i] > max {\n            lst[i] = max\n    \
    \    }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
