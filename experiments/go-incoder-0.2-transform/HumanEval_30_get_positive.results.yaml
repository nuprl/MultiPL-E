language: go_test.go
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp237_kg___test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp237_kg___test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp237_kg___test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v > 0 {\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpk5m7j2ao_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v > 0 {\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpk5m7j2ao_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp6rvzzhaz_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp6rvzzhaz_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v > 0 {\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpk5m7j2ao_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v > 0 {\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpk5m7j2ao_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp6rvzzhaz_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v >= 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__1\
    \ (0.00s)\n        tmpsbp6y5i__test.go:39: expected '[%!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=1)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp6rvzzhaz_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073332
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073332
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v > 0 {\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpk5m7j2ao_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpk5m7j2ao_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp6rvzzhaz_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v > 0 {\n            pos[i] = v\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpg_pfhfj3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpg_pfhfj3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpg_pfhfj3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, len(l))\n    for i := 0; i < len(l);\
    \ i++ {\n        if l[i] > 0 {\n            result[i] = l[i]\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpt1zow3jp_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpt1zow3jp_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpt1zow3jp_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp237_kg___test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp237_kg___test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp237_kg___test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp237_kg___test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp237_kg___test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp237_kg___test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v >= 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp6rvzzhaz_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp6rvzzhaz_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            positives = append(positives, v)\n    \
    \    }\n    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i := range l {\n   \
    \     if l[i] > 0 {\n            pos[i] = l[i]\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnu9hqf2i_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnu9hqf2i_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnu9hqf2i_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073332
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0)\n    for _, v := range l {\n\
    \        if v > 0 {\n            positives = append(positives, v)\n        }\n\
    \    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate\
    \ := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2,\
    \ 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3,\
    \ -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1}\
    \ },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     { actual:\
    \ candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    positives := make([]int, 0, len(l))\n    for _, v := range\
    \ l {\n        if v > 0 {\n            positives = append(positives, v)\n    \
    \    }\n    }\n    return positives\n}\n\nfunc TestGet_Positive(t *testing.T)\
    \ {\n  candidate := get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1,\
    \ -2, 4, 5, 6}), expected: []int{4, 5, 6} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123,\
    \ 1} },\n     { actual: candidate([]int{-1, -2}), expected: []int{} },\n     {\
    \ actual: candidate([]int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmp237_kg___test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmp237_kg___test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmp237_kg___test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var ret []int\n    for _, v := range l {\n        if v >\
    \ 0 {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0)\n    for _, v := range l {\n       \
    \ if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, 0, len(l))\n    for _, v := range l {\n\
    \        if v > 0 {\n            r = append(r, v)\n        }\n    }\n    return\
    \ r\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i := range l {\n     \
    \   if l[i] > 0 {\n            r[i] = l[i]\n        }\n    }\n    return r\n}\n\
    \nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpu9c3v4v3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpu9c3v4v3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, len(l))\n    for i, v := range l {\n\
    \        if v > 0 {\n            pos[i] = v\n        }\n    }\n    return pos\n\
    }\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpg_pfhfj3_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpg_pfhfj3_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpg_pfhfj3_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    result := make([]int, 0)\n    for _, v := range l {\n  \
    \      if v > 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate :=\
    \ get_positive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    var result []int\n    for _, v := range l {\n        if\
    \ v > 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073154
- exit_code: 1
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    r := make([]int, len(l))\n    for i, v := range l {\n  \
    \      if v > 0 {\n            r[i] = v\n        }\n    }\n    return r\n}\n\n\
    func TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected: []int{4,\
    \ 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Positive (0.00s)\n    --- FAIL: TestGet_Positive/test_num__0\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[%!s(int=4) %!s(int=5) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=0) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL:\
    \ TestGet_Positive/test_num__1 (0.00s)\n        tmpnl3gowxi_test.go:39: expected\
    \ '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=123)\
    \ %!s(int=1)]', got '[%!s(int=5) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestGet_Positive/test_num__2\
    \ (0.00s)\n        tmpnl3gowxi_test.go:39: expected '[]', got '[%!s(int=0) %!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1,\
    \ 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l\
    \ []int) []int {\n    pos := make([]int, 0)\n    for _, v := range l {\n     \
    \   if v > 0 {\n            pos = append(pos, v)\n        }\n    }\n    return\
    \ pos\n}\n\nfunc TestGet_Positive(t *testing.T) {\n  candidate := get_positive\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{-1, -2, 4, 5, 6}), expected:\
    \ []int{4, 5, 6} },\n     { actual: candidate([]int{5, 3, -5, 2, 3, 3, 9, 0, 123,\
    \ 1, -10}), expected: []int{5, 3, 2, 3, 3, 9, 123, 1} },\n     { actual: candidate([]int{-1,\
    \ -2}), expected: []int{} },\n     { actual: candidate([]int{}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
