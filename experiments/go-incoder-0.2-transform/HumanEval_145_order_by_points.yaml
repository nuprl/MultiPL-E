name: HumanEval_145_order_by_points
language: go_test.go
prompt: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n//\
  \ []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
  \ order_by_points(nums []int) []int {\n"
tests: "func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
  \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
  \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7,\
  \ 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
  \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(nums))\n    sum := 0\n    for i, v :=\
    \ range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := strconv.Atoi(string(num))\n\
    \        sum += digits\n        result[index] = num\n        index++\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = sum\n    }\n    return sort_by_index(result, len(nums))\n}\n", "    var result\
    \ []int\n    var sum int\n    for _, v := range nums {\n        sum += v\n   \
    \ }\n    for _, v := range nums {\n        if sum < 0 {\n            sum += 10\n\
    \        }\n        if sum > 0 {\n            sum -= 10\n        }\n        if\
    \ sum == 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        digits,\
    \ _ := sum_digits(num)\n        if digits > 0 {\n            result[index] = num\n\
    \            index++\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += int(v)\n        result[i] = v\n    }\n    for i, v := range result {\n\
    \        result[i] = v - sum\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    index := 0\n    for _, num := range nums\
    \ {\n        digitSum, err := sum_digits(num)\n        if err != nil {\n     \
    \       fmt.Println(err)\n        }\n        if digitSum <= 0 {\n            result[index]\
    \ = num\n            index++\n            continue\n        }\n        index +=\
    \ 1\n        digitSum, err = sum_digits(num)\n        if err != nil {\n      \
    \      fmt.Println(err)\n        }\n        if digitSum > 0 {\n            digitSum,\
    \ err = sum_digits(num)\n            if err != nil {\n                fmt.Println(err)\n\
    \            }\n            if digitSum > 0 {\n                digitSum, err =\
    \ sum_digits(num)\n                if err != nil {\n                    fmt.Println(err)\n\
    \                }\n                if digitSum > 0 {\n                    digitSum,\
    \ err = sum_digits(num)\n                    if err != nil {\n               \
    \         fmt.Println(err)\n                    }\n                    if digitSum\
    \ > 0 {\n                        digitSum, err = sum_digits(num)\n           \
    \             if err != nil {\n                            fmt.Println(err)\n\
    \                        }\n                        if digitSum > 0 {\n      \
    \                      digitSum, err = sum_digits(num)\n                     \
    \       if err != nil {\n                                fmt.Println(err)\n  \
    \                          }\n                            if digitSum > 0 {\n\
    \                                digitSum, err = sum_digits(num)\n           \
    \                     if err != nil {\n                                    fmt.Println(err)\n\
    \                                }\n                                if digitSum\
    \ > 0 {\n                                    digitSum, err = sum_digits(num)\n\
    \                                    if err != nil {\n                       \
    \                 fmt.Println(err)\n                                    }\n  \
    \                                  if digitSum > 0 {\n                       \
    \                 digitSum, err = sum_digits(num)\n                          \
    \              if err != nil {\n                                            fmt.Println(err)\n\
    \                                        }\n                                 \
    \       if digitSum > 0 {\n                                            digitSum,\
    \ err = sum_digits(num)\n                                            if err !=\
    \ nil {\n                                                fmt.Println(err)\n  \
    \                                          }\n                               \
    \             if digitSum > 0 {\n                                            \
    \    digitSum, err = sum_digits(num)\n                                       \
    \         if err != nil {\n                                                  \
    \  fmt.Println(err)\n                                                }\n     \
    \                                           if digitSum > 0 {\n              \
    \                                      digitSum, err = sum_digits(num)\n     \
    \                                               if err != nil {\n            \
    \                                            fmt.Println(err)\n              \
    \                                      }\n                                   \
    \                 if digitSum > 0 {\n                                        \
    \                digitSum, err = sum_digits(num)\n                           \
    \                             if err != nil {\n                              \
    \                              fmt.Println(err)\n                            \
    \                            }\n                                             \
    \           if digitSum > 0 {\n                                              \
    \              digitSum, err = sum_digits(num)\n                             \
    \                               if err != nil {\n                            \
    \                                    fmt.Println(err)\n                      \
    \                                      }\n                                   \
    \                         if digitSum > 0 {\n                                \
    \                                digitSum, err = sum_digits(num)\n           \
    \                                                     if err", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i, v\
    \ := range result {\n        result[i] = sum - v\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i := range result {\n        result[i] = nums[result[i]]\n\
    \    }\n    return result\n}\n", "    var result []int\n    var index int\n  \
    \  var sum int\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum > 0 {\n            index = index + 1\n        }\n    }\n    for _, num :=\
    \ range nums {\n        sum += num\n        if sum > 0 {\n            result =\
    \ append(result, num)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    index := 0\n    for _, num := range nums {\n\
    \        digits, _ := num.Int64()\n        sum += digits\n        result[index]\
    \ = num\n        index++\n    }\n    return append(result, nums...)\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i, v := range\
    \ result {\n        result[i] = v\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - int(result[i])\n\
    \    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
