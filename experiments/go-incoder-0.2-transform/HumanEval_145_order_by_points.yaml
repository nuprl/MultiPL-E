name: HumanEval_145_order_by_points
language: go_test.go
prompt: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n//\
  \ []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
  \ order_by_points(nums []int) []int {\n"
tests: "func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
  \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
  \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7,\
  \ 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
  \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    result := make([]int, len(nums))\n    sum := 0\n    for i, v :=\
    \ range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := strconv.Atoi(string(num))\n\
    \        sum += digits\n        result[index] = num\n        index++\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = sum\n    }\n    return sort_by_index(result, len(nums))\n}\n", "    var result\
    \ []int\n    var sum int\n    for _, v := range nums {\n        sum += v\n   \
    \ }\n    for _, v := range nums {\n        if sum < 0 {\n            sum += 10\n\
    \        }\n        if sum > 0 {\n            sum -= 10\n        }\n        if\
    \ sum == 0 {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        digits,\
    \ _ := sum_digits(num)\n        if digits > 0 {\n            result[index] = num\n\
    \            index++\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += int(v)\n        result[i] = v\n    }\n    for i, v := range result {\n\
    \        result[i] = v - sum\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    index := 0\n    for _, num := range nums\
    \ {\n        digitSum, err := sum_digits(num)\n        if err != nil {\n     \
    \       fmt.Println(err)\n        }\n        if digitSum <= 0 {\n            result[index]\
    \ = num\n            index++\n            continue\n        }\n        index +=\
    \ 1\n        digitSum, err = sum_digits(num)\n        if err != nil {\n      \
    \      fmt.Println(err)\n        }\n        if digitSum > 0 {\n            digitSum,\
    \ err = sum_digits(num)\n            if err != nil {\n                fmt.Println(err)\n\
    \            }\n            if digitSum > 0 {\n                digitSum, err =\
    \ sum_digits(num)\n                if err != nil {\n                    fmt.Println(err)\n\
    \                }\n                if digitSum > 0 {\n                    digitSum,\
    \ err = sum_digits(num)\n                    if err != nil {\n               \
    \         fmt.Println(err)\n                    }\n                    if digitSum\
    \ > 0 {\n                        digitSum, err = sum_digits(num)\n           \
    \             if err != nil {\n                            fmt.Println(err)\n\
    \                        }\n                        if digitSum > 0 {\n      \
    \                      digitSum, err = sum_digits(num)\n                     \
    \       if err != nil {\n                                fmt.Println(err)\n  \
    \                          }\n                            if digitSum > 0 {\n\
    \                                digitSum, err = sum_digits(num)\n           \
    \                     if err != nil {\n                                    fmt.Println(err)\n\
    \                                }\n                                if digitSum\
    \ > 0 {\n                                    digitSum, err = sum_digits(num)\n\
    \                                    if err != nil {\n                       \
    \                 fmt.Println(err)\n                                    }\n  \
    \                                  if digitSum > 0 {\n                       \
    \                 digitSum, err = sum_digits(num)\n                          \
    \              if err != nil {\n                                            fmt.Println(err)\n\
    \                                        }\n                                 \
    \       if digitSum > 0 {\n                                            digitSum,\
    \ err = sum_digits(num)\n                                            if err !=\
    \ nil {\n                                                fmt.Println(err)\n  \
    \                                          }\n                               \
    \             if digitSum > 0 {\n                                            \
    \    digitSum, err = sum_digits(num)\n                                       \
    \         if err != nil {\n                                                  \
    \  fmt.Println(err)\n                                                }\n     \
    \                                           if digitSum > 0 {\n              \
    \                                      digitSum, err = sum_digits(num)\n     \
    \                                               if err != nil {\n            \
    \                                            fmt.Println(err)\n              \
    \                                      }\n                                   \
    \                 if digitSum > 0 {\n                                        \
    \                digitSum, err = sum_digits(num)\n                           \
    \                             if err != nil {\n                              \
    \                              fmt.Println(err)\n                            \
    \                            }\n                                             \
    \           if digitSum > 0 {\n                                              \
    \              digitSum, err = sum_digits(num)\n                             \
    \                               if err != nil {\n                            \
    \                                    fmt.Println(err)\n                      \
    \                                      }\n                                   \
    \                         if digitSum > 0 {\n                                \
    \                                digitSum, err = sum_digits(num)\n           \
    \                                                     if err", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i, v\
    \ := range result {\n        result[i] = sum - v\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i := range result {\n        result[i] = nums[result[i]]\n\
    \    }\n    return result\n}\n", "    var result []int\n    var index int\n  \
    \  var sum int\n    for _, num := range nums {\n        sum += num\n        if\
    \ sum > 0 {\n            index = index + 1\n        }\n    }\n    for _, num :=\
    \ range nums {\n        sum += num\n        if sum > 0 {\n            result =\
    \ append(result, num)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    index := 0\n    for _, num := range nums {\n\
    \        digits, _ := num.Int64()\n        sum += digits\n        result[index]\
    \ = num\n        index++\n    }\n    return append(result, nums...)\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i, v := range\
    \ result {\n        result[i] = v\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - int(result[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = nums[v]\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    var result\
    \ []int\n    var sum int\n    for _, num := range nums {\n        sum += num\n\
    \        result = append(result, num)\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    sort.Ints(nums)\n    result := make([]int, len(nums))\n\
    \    for i := 0; i < len(nums); i++ {\n        index := sort.Search(len(nums),\
    \ func(i int) bool {\n            return nums[i]-nums[i-1] > 0\n        })\n \
    \       result[i] = nums[index]\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    for i := range nums {\n        result[i] = nums[i]\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ 0, len(nums))\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, digit := range strconv.Itoa(num) {\n            sum += int(digit)\n     \
    \   }\n        sort.Ints(num)\n        sort.Sort(sort.Reverse(sort.IntSlice(num)))\n\
    \        if sum == 0 {\n            result = append(result, num)\n        } else\
    \ {\n            result := append(result, num)\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum += v\n  \
    \          result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, 0, len(nums))\n    for _, num := range nums {\n   \
    \     sum := 0\n        for _, d := range strconv.Itoa(num) {\n            sum\
    \ += int(d)\n        }\n        if sum > 0 {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n \
    \   }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum +=\
    \ v\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   var result []int\n    var sums []int\n    for _, num := range nums {\n   \
    \     sums = append(sums, num)\n    }\n    sort.Ints(sums)\n    for _, sum :=\
    \ range sums {\n        result = append(result, nums[sum])\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0, len(nums))\n    for _, num := range\
    \ nums {\n        digitSum, err := sum_digits(num)\n        if err != nil {\n\
    \            panic(err)\n        }\n        if digitSum > 0 {\n            result\
    \ = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    index := 0\n    sum := 0\n    for _,\
    \ num := range nums {\n        sum += num\n        result[index] = num\n     \
    \   index++\n    }\n    for i := 0; i < index; i++ {\n        for j := i + 1;\
    \ j < index; j++ {\n            if sum < 0 {\n                sum += result[i]\
    \ + result[j]\n                result[i], result[j] = result[j], result[i]\n \
    \           }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        sum += num\n\
    \        result[index] = num\n        index++\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - int(result[i])\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = result[i] - sum\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        digitSum,\
    \ err := sum_digits(num)\n        if err != nil {\n            panic(err)\n  \
    \      }\n        if digitSum <= 0 {\n            result[index] = num\n      \
    \      index++\n            continue\n        }\n        index += 1\n        digitSum,\
    \ err = sum_digits(num)\n        if err != nil {\n            panic(err)\n   \
    \     }\n        if digitSum > 0 {\n            result[index] = num\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    result := make([]int,\
    \ 0, len(nums))\n    for _, num := range nums {\n        sum := 0\n        for\
    \ _, digit := range strconv.Itoa(num) {\n            sum += int(digit)\n     \
    \   }\n        if sum > 0 {\n            result = append(result, num)\n      \
    \  }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum -= result[i]\n            if sum < 0 {\n                sum = 0\n     \
    \       }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for _, v := range result\
    \ {\n        nums[v] = sum\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = sum\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = v\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = result[i]/sum\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    for i, v := range result {\n\
    \        result[i] = sum - v\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    index := 0\n    sum := 0\n    for _,\
    \ n := range nums {\n        sum += n\n        result[index] = n\n        index++\n\
    \    }\n    for i := 0; i < index; i++ {\n        for j := i + 1; j < index; j++\
    \ {\n            if sum < 0 {\n                sum += nums[i]\n              \
    \  result[j] = nums[i]\n            } else {\n                sum += nums[j]\n\
    \                result[j] = nums[j]\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum +=\
    \ v\n            result[i] = v\n        }\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i := range result {\n        result[i] = result[i] - sum\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += int(v)\n        result[i] = v\n    }\n   \
    \ for i, v := range nums {\n        if sum != 0 {\n            sum += int(v)\n\
    \            if sum > 0 {\n                sum -= int(nums[i])\n             \
    \   result[i] = nums[i]\n            }\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    sort.Ints(nums)\n    var result []int\n    var cur\
    \ int\n    for _, v := range nums {\n        cur = cur*10 + v\n        if cur\
    \ > 0 {\n            result = append(result, cur)\n            cur = 0\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = sum - result[i]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i := range result {\n        result[i] = nums[sum-int(result[i])]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = result[i] - sum\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := strconv.Atoi(string(num))\n\
    \        sum += digits\n        result[index] = num\n        index++\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, v := range nums {\n        digitSum, err := digitSum(v)\n\
    \        if err != nil {\n            panic(err)\n        }\n        if digitSum\
    \ <= 0 {\n            result[index] = v\n            index++\n            continue\n\
    \        }\n        index += 1\n        i := 0\n        for {\n            digitSum\
    \ -= nums[i]\n            if digitSum < 0 {\n                break\n         \
    \   }\n            result[index] = nums[i]\n            index++\n            i++\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]-sum]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = nums[sum-int(result[i])]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = sum - result[i]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n \
    \   }\n    sort.Ints(result)\n    for i := range result {\n        result[i] =\
    \ nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    for i := range result {\n        result[i]\
    \ = sum - result[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = sum - v\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    index := 0\n    for _, num := range nums {\n\
    \        digits, _ := sum_digits(num)\n        if digits > 0 {\n            result[index]\
    \ = num\n            index++\n        }\n    }\n    return result\n}\n", "   \
    \ result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n\
    \        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = v\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    for i, v := range\
    \ result {\n        result[i] = v - sum\n    }\n    return result\n}\n", "   \
    \ result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n\
    \        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for\
    \ i, v := range result {\n        result[i] = sum - v\n    }\n    return result\n\
    }\n", "    result := make([]int, 0, len(nums))\n    sum := 0\n    for i, v :=\
    \ range nums {\n        sum += v\n        result = append(result, v)\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    sort.Ints(nums)\n    result\
    \ := make([]int, 0, len(nums))\n    for _, num := range nums {\n        sum :=\
    \ 0\n        for _, d := range strconv.Itoa(num) {\n            sum += int(d)\n\
    \        }\n        if sum > 0 {\n            result = append(result, num)\n \
    \       }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        j := 0\n        sum := 0\n        for k :=\
    \ 0; k < len(nums[i]); k++ {\n            sum += int(nums[i][k])\n           \
    \ j++\n        }\n        if sum < 0 {\n            sum += 10\n            j--\n\
    \        }\n        result[i] = nums[j-1]\n    }\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i := range result {\n        result[i] = nums[result[i]-sum]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    for i :=\
    \ range nums {\n        sum := 0\n        for j := range nums {\n            sum\
    \ += nums[j]\n        }\n        result[i] = nums[sum]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i,\
    \ v := range nums {\n        if sum < 0 {\n            sum += v\n            result[i]\
    \ = v\n        }\n    }\n    return result\n}\n", "    result := make([]int, 0,\
    \ len(nums))\n    for _, num := range nums {\n        sum := 0\n        for _,\
    \ digit := range strconv.Itoa(num) {\n            sum += int(digit)\n        }\n\
    \        if sum > 0 {\n            result = append(result, num)\n        }\n \
    \   }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    sort.Sort(sort.Reverse(sort.IntSlice(nums)))\n\
    \    return nums\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum != 0 {\n            sum += v\n \
    \           if sum < 0 {\n                sum *= -1\n            }\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    index\
    \ := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum *= -1\n \
    \       }\n        if sum == 0 {\n            continue\n        }\n        j :=\
    \ i\n        for ; j < len(nums) && sum > 0; j++ {\n            sum += nums[j]\n\
    \            if sum == 0 {\n                break\n            }\n        }\n\
    \        if j > i {\n            j := j - 1\n            for ; j < len(nums);\
    \ j++ {\n                sum += nums[j]\n            }\n        }\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    sort.Ints(nums)\n    var res []int\n    for _, v := range\
    \ nums {\n        sum := 0\n        for i := 0; i < len(strconv.Itoa(v)); i++\
    \ {\n            sum += int(strconv.Itoa(v[i]))\n        }\n        if sum > 0\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    for i := range result {\n        result[i] = sum - result[i]\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum :=\
    \ 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i] =\
    \ v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n            sum\
    \ += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    index := 0\n    for _, num := range nums\
    \ {\n        digitSum, err := sum_digits(num)\n        if err != nil {\n     \
    \       panic(err)\n        }\n        if digitSum > 0 {\n            result[index]\
    \ = num\n            index++\n        }\n    }\n    return result\n}\n", "   \
    \ result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n\
    \        sum += int(v)\n        result[i] = v\n    }\n    for i, v := range nums\
    \ {\n        if sum < 0 {\n            sum += int(v)\n            result[i] =\
    \ v\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    result := make([]int, 0, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result = append(result, v)\n    }\n    sort.Sort(BySum(sum,\
    \ result))\n    return result\n}\n", "    result := make([]int, len(nums))\n \
    \   sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    for i, v := range nums {\n        if sum <\
    \ 0 {\n            sum += int(v)\n            result[i] = v\n        }\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    index := 0\n    for _, num :=\
    \ range nums {\n        digitSum, err := sum_digits(num)\n        if err != nil\
    \ {\n            panic(err)\n        }\n        if digitSum <= 0 {\n         \
    \   result[index] = num\n            index++\n            continue\n        }\n\
    \        i := 0\n        for ; digitSum >= 10; digitSum -= 10 {\n            result[index]\
    \ = num\n            index++\n        }\n        result[index] = num\n       \
    \ index++\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n    for\
    \ _, num := range nums {\n        sum += num\n        result[index] = num\n  \
    \      index++\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum += v\n            if sum > 0 {\n                result[i] = v\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, v := range nums {\n        sum += v\n\
    \        result[index] = v\n        index++\n    }\n    sort.Ints(result)\n  \
    \  return result\n}\n", "    var result []int\n    for _, num := range nums {\n\
    \        sum := 0\n        for _, digit := range strconv.Itoa(num) {\n       \
    \     sum += int(digit)\n        }\n        if sum > 0 {\n            result =\
    \ append(result, num)\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i\
    \ := range result {\n        result[i] = result[i] - sum\n    }\n    return result\n\
    }\n", "    var result []int\n    var sum int\n    var index int\n    for _, num\
    \ := range nums {\n        sum += num\n        if sum > 0 {\n            result\
    \ = append(result, num)\n            sum = 0\n        }\n    }\n    for _, num\
    \ := range result {\n        index = num\n        break\n    }\n    for _, num\
    \ := range nums {\n        if num == index {\n            continue\n        }\n\
    \        sum += num\n        if sum > 0 {\n            result = append(result,\
    \ num)\n            sum = 0\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var sums []int\n    for _, num := range nums {\n        sums\
    \ = append(sums, num)\n    }\n    sort.Ints(sums)\n    for _, sum := range sums\
    \ {\n        result = append(result, nums[sum])\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = nums[v]\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n    for\
    \ _, num := range nums {\n        sum += num\n        result[index] = num\n  \
    \      index++\n    }\n    return result\n}\n", "    result := make([]int, 0,\
    \ len(nums))\n    for _, num := range nums {\n        digitSum, err := sum_digits(num)\n\
    \        if err != nil {\n            panic(err)\n        }\n        i := 0\n\
    \        for ; digitSum >= 10; digitSum /= 10 {\n            i++\n        }\n\
    \        result[i] = num\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for _, v := range result\
    \ {\n        nums[v] = sum\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, len(nums))\n    for i, v := range nums {\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    for i, v := range nums {\n        if sum !=\
    \ int(v) {\n            sum -= int(v)\n            result[i] = v\n        }\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    index\
    \ := 0\n    sum := 0\n    for _, v := range nums {\n        sum += v\n       \
    \ result[index] = v\n        index++\n    }\n    for i := 0; i < index; i++ {\n\
    \        for j := i + 1; j < index; j++ {\n            if sum < 0 {\n        \
    \        sum += result[i]\n                result[i] = result[j]\n           \
    \     result[j] = sum\n            }\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n\
    \    for _, num := range nums {\n        digits, _ := num.ToString().Sum()\n \
    \       result[index] = num\n        index++\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    for i, v := range nums {\n        if sum < 0 {\n            sum += v\n  \
    \          result[i] = v\n        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n\
    \    result := make([]int, 0, len(nums))\n    for _, num := range nums {\n   \
    \     sum := 0\n        for _, digit := range strconv.Itoa(num) {\n          \
    \  sum += int(digit)\n        }\n        if sum > 0 {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i, v := range result {\n        result[i] = v\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    index\
    \ := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        index := index + 1\n        if digits > result[index] {\n           \
    \ result[index] = digits\n        }\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    index := 0\n    for _, num := range nums {\n\
    \        sum += num\n        result[index] = num\n        index++\n    }\n   \
    \ return append(result, nums...)\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        sum += num\n        result[index]\
    \ = num\n        index++\n    }\n    return result\n}\n", "    var result []int\n\
    \    sum := 0\n    for _, v := range nums {\n        sum += v\n    }\n    for\
    \ _, v := range nums {\n        if sum < 0 {\n            sum += v\n         \
    \   continue\n        }\n        if sum > 0 {\n            sum += v\n        \
    \    continue\n        }\n        result = append(result, v)\n        sum = 0\n\
    \    }\n    return result\n}\n", "    sort.Ints(nums)\n    var res []int\n   \
    \ var cur int\n    for _, v := range nums {\n        cur = cur*10 + v\n      \
    \  if cur > 0 {\n            res = append(res, cur)\n            cur = 0\n   \
    \     }\n    }\n    return res\n}\n", "    result := make([]int, len(nums))\n\
    \    for i := range nums {\n        sum := 0\n        for j := 0; j < len(nums[i]);\
    \ j++ {\n            sum += int(nums[i][j])\n        }\n        result[i] = nums[sum]\n\
    \    }\n    return result\n}\n", "    var result []int\n    var sums []int\n \
    \   var index int\n    for _, v := range nums {\n        sum += v\n        sums\
    \ = append(sums, sum)\n    }\n    sort.Ints(sums)\n    for _, v := range sums\
    \ {\n        index = sort.Search(len(nums), func(i int) bool {\n            return\
    \ nums[i] == v\n        })\n        result = append(result, nums[index])\n   \
    \ }\n    return result\n}\n", "    result := make([]int, len(nums))\n    index\
    \ := 0\n    for _, num := range nums {\n        digits, _ := sum_digits(num)\n\
    \        if digits > 0 {\n            result[index] = num\n            index++\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != 0 {\n          \
    \  sum -= result[i]\n            if sum < 0 {\n                sum *= -1\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = sum - v\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += int(v)\n        result[i] = v\n    }\n    for i, v := range nums {\n\
    \        if sum < 0 {\n            sum += int(v)\n            result[i] = v\n\
    \        }\n    }\n    return result\n}\n", "    sort.Ints(nums)\n    result :=\
    \ make([]int, len(nums))\n    for i, v := range nums {\n        sum += v\n   \
    \     result[i] = v\n    }\n    sort.Ints(result)\n    return result\n}\n", " \
    \   result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n \
    \   for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n \
    \   }\n    for i, v := range nums {\n        if sum != 0 {\n            sum +=\
    \ int(v)\n            if sum < 0 {\n                sum *= -1\n            }\n\
    \        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    for _, num := range nums {\n        digits, _ := num.Int64()\n\
    \        sum += digits\n        result[index] = num\n        index++\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    sort.Ints(result)\n    for i, v := range result\
    \ {\n        result[i] = nums[v]\n    }\n    return result\n}\n", "    result\
    \ := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n    \
    \    sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n    for i\
    \ := range result {\n        result[i] = nums[result[i]]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    index := 0\n\
    \    for _, num := range nums {\n        sum += num\n        result[index] = num\n\
    \        index++\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    index := 0\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \        result[index] = v\n        index++\n    }\n    for i := 0; i < index;\
    \ i++ {\n        for j := i + 1; j < index; j++ {\n            if sum < 0 {\n\
    \                sum *= -1\n                j += 1\n            }\n          \
    \  if sum > 0 {\n                sum += nums[j]\n                nums[j] = nums[i]\n\
    \                nums[i] = sum\n                sum = 0\n            }\n     \
    \   }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]-sum]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  sort.Ints(nums)\n    var result []int\n    for _, num := range nums {\n   \
    \     sum := 0\n        for _, d := range strconv.Itoa(num) {\n            sum\
    \ += int(d)\n        }\n        if sum > 0 {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i := range result {\n        result[i] =\
    \ sum - result[i]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    for i, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, 0, len(nums))\n    sum := 0\n    for\
    \ i, v := range nums {\n        sum += v\n        if sum > 0 {\n            result\
    \ = append(result, i)\n            sum = 0\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += int(v)\n        result[i] = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(result)))\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i := range result {\n        result[i] = nums[result[i]]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += v\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i, v := range result {\n        result[i]\
    \ = sum - v\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum != int(v) {\n     \
    \       sum -= int(v)\n            result[i] = v\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]-sum]\n    }\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += int(v)\n        result[i] = v\n\
    \    }\n    sort.Ints(result)\n    for i := range result {\n        result[i]\
    \ = nums[result[i]]\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    for i := range result\
    \ {\n        result[i] = nums[result[i]]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    index := 0\n    for _, num := range nums\
    \ {\n        digitSum, err := sum_digits(num)\n        if err != nil {\n     \
    \       fmt.Println(err)\n        }\n        result[index] = num\n        index++\n\
    \    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        sum += num\n\
    \        result[index] = num\n        index++\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    index := 0\n    for _, num := range nums\
    \ {\n        digits, _ := sum_digits(num)\n        if digits > 0 {\n         \
    \   result[index] = num\n            index++\n        }\n    }\n    return result\n\
    }\n", "    result := make([]int, 0, len(nums))\n    for _, v := range nums {\n\
    \        digitSum, _ := sum_digits(v)\n        index := len(result) - 1\n    \
    \    for i := 0; i < digitSum; i++ {\n            if result[index] == 0 {\n  \
    \              result[index] = v\n                break\n            }\n     \
    \       index--\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += v\n \
    \       result[i] = v\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    sort.Ints(nums)\n    var result []int\n    for _, v := range nums {\n     \
    \   total := 0\n        for _, i := range strconv.Itoa(int(v)) {\n           \
    \ total += int(i)\n        }\n        if total > 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    for _, num := range nums {\n        digits,\
    \ _ := sum_digits(num)\n        if digits > 0 {\n            result[index] = num\n\
    \            index++\n        }\n    }\n    return result\n}\n", "    result :=\
    \ make([]int, len(nums))\n    sum := 0\n    for i, v := range nums {\n       \
    \ sum += int(v)\n        result[i] = v\n    }\n    sort.Ints(result)\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = v\n    }\n    return result\n\
    }\n", "    result := make([]int, 0, len(nums))\n    sum := 0\n    for i, v :=\
    \ range nums {\n        sum += int(v)\n        result = append(result, v)\n  \
    \  }\n    sort.Ints(result)\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    index := 0\n    sum := 0\n    for _, v := range nums {\n   \
    \     sum += v\n        result[index] = v\n        index++\n    }\n    for i :=\
    \ 0; i < len(nums)-1; i++ {\n        if sum < 0 {\n            sum += nums[i]\n\
    \            result[index] = nums[i]\n            index++\n        } else {\n\
    \            sum -= nums[i]\n            result[index] = nums[i]\n           \
    \ index++\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ len(nums))\n    sum := 0\n    for i, v := range nums {\n        sum += int(v)\n\
    \        result[i] = v\n    }\n    sort.Ints(result)\n    return result\n}\n",
  "    result := make([]int, 0, len(nums))\n    sum := 0\n    for _, v := range nums\
    \ {\n        sum += v\n    }\n    for _, v := range nums {\n        if sum < 0\
    \ {\n            sum += v\n            continue\n        }\n        if sum ==\
    \ 0 {\n            result = append(result, v)\n            continue\n        }\n\
    \        i := 0\n        for sum > 0 {\n            if sum < v {\n           \
    \     sum += v\n                result[i] = v\n                i++\n         \
    \   } else {\n                sum -= v\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    for i\
    \ := range result {\n        result[i] = sum - result[i]\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = v\n    }\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    for i := range result\
    \ {\n        result[i] = sum - result[i]\n    }\n    return result\n}\n", "  \
    \  result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n \
    \   return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    return result\n}\n", "    result := make([]int, len(nums))\n\
    \    sum := 0\n    for i, v := range nums {\n        sum += v\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += v\n            result[i] = v\n        }\n    }\n    return result\n}\n",
  "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range nums\
    \ {\n        sum += v\n        result[i] = v\n    }\n    for i, v := range result\
    \ {\n        result[i] = v\n    }\n    sort.Ints(result)\n    return result\n\
    }\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i, v := range\
    \ nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i, v := range result {\n        result[i] = sum - v\n    }\n    return\
    \ result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n    for i,\
    \ v := range nums {\n        sum += v\n        result[i] = v\n    }\n    sort.Ints(result)\n\
    \    for i := range result {\n        result[i] = nums[result[i]]\n    }\n   \
    \ return result\n}\n", "    result := make([]int, len(nums))\n    for i := range\
    \ nums {\n        total := 0\n        for _, digit := range nums[i:] {\n     \
    \       total += digit\n        }\n        result[i] = total\n    }\n    sort.Ints(result)\n\
    \    return result\n}\n", "    result := make([]int, len(nums))\n    sum := 0\n\
    \    for i, v := range nums {\n        sum += v\n        result[i] = v\n    }\n\
    \    sort.Ints(result)\n    for i := range result {\n        result[i] = nums[result[i]]\n\
    \    }\n    return result\n}\n", "    result := make([]int, len(nums))\n    sum\
    \ := 0\n    for i, v := range nums {\n        sum += int(v)\n        result[i]\
    \ = v\n    }\n    for i, v := range nums {\n        if sum < 0 {\n           \
    \ sum += int(v)\n            result[i] = v\n        }\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
