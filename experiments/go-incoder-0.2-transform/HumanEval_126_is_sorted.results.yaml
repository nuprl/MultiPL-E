language: go_test.go
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp63kfjkqj_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp63kfjkqj_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp63kfjkqj_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    prev := lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v < prev {\n            return false\n    \
    \    }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmplb4_0rl8_test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmplb4_0rl8_test.go:52\
    \ +0x1b\ntesting.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075173
- exit_code: null
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    found := false\n    for i < j {\n        if lst[i]\
    \ > lst[j] {\n            found = true\n            break\n        }\n       \
    \ if i == j {\n            found = true\n            break\n        }\n      \
    \  if lst[i] == lst[j] {\n            i++\n            j--\n        }\n    }\n\
    \    return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075185
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp63kfjkqj_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp63kfjkqj_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp63kfjkqj_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    last := lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < last {\n            return false\n \
    \       }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpram7mj_o_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpram7mj_o_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    return is_sorted(lst[1:len(lst)])\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpxqzagxad_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpxqzagxad_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpxqzagxad_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpxqzagxad_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpxqzagxad_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    last := lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < last {\n            return false\n \
    \       }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpram7mj_o_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpram7mj_o_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    found := false\n    for i < j {\n        if lst[i] > lst[j] {\n   \
    \         return false\n        }\n        if lst[i] == lst[j] {\n           \
    \ i++\n            j--\n            found = true\n        }\n    }\n    return\
    \ found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmp9m7y8jjx_test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmp9m7y8jjx_test.go:58\
    \ +0x1b\ntesting.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    prev := lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v < prev {\n            return false\n    \
    \    }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmplb4_0rl8_test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmplb4_0rl8_test.go:52\
    \ +0x1b\ntesting.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    if lst[0] != lst[1] {\n\
    \        return false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpp3h_mr3p_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpp3h_mr3p_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpp3h_mr3p_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpp3h_mr3p_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpp3h_mr3p_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v > last {\n            return false\n        }\n    \
    \    last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp_dsevpv9_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp_dsevpv9_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp_dsevpv9_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp_dsevpv9_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp_dsevpv9_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp_dsevpv9_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp_dsevpv9_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    prev\
    \ := lst[0]\n    for _, v := range lst {\n        if v < prev {\n            return\
    \ false\n        }\n        prev = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmp84qxfzkg_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmp84qxfzkg_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if len(lst) == 2 {\n        return lst[0]\
    \ < lst[1]\n    }\n    i := 0\n    j := len(lst) - 1\n    found := false\n   \
    \ for !found {\n        if lst[i] > lst[j] {\n            found = true\n     \
    \   } else {\n            i++\n            j--\n        }\n    }\n    return found\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpzxyd__s__test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpzxyd__s__test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmpzxyd__s__test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmpzxyd__s__test.go:77:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmpzxyd__s__test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    last := lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v != last {\n            return false\n\
    \        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp4qrkmgbq_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp4qrkmgbq_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp4qrkmgbq_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp4qrkmgbq_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp4qrkmgbq_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpgstuxdtn_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpgstuxdtn_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    for {\n        if i == j {\n            break\n        }\n        if\
    \ lst[i] > lst[j] {\n            return false\n        }\n        if lst[i] <\
    \ lst[j] {\n            return true\n        }\n        i++\n        j--\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate :=\
    \ is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpphanowkc_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpphanowkc_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpphanowkc_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpphanowkc_test.go:78:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last,\
    \ ok := lst[len(lst)-1]\n    if !ok {\n        return false\n    }\n    for _,\
    \ v := range lst {\n        if v != last {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc1mgqrwr_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    for {\n        if i == j {\n            break\n        }\n        if\
    \ lst[i] > lst[j] {\n            return false\n        }\n        if lst[i] <\
    \ lst[j] {\n            i++\n            j--\n        } else {\n            i++\n\
    \            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpdqey68iu_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdqey68iu_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpdqey68iu_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdqey68iu_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdqey68iu_test.go:80: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    return is_sorted(lst[1:])\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpin08laey_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpin08laey_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    k := 0\n    for {\n        if i == j {\n     \
    \       break\n        }\n        if lst[i] > lst[j] {\n            return false\n\
    \        }\n        if lst[i] < lst[j] {\n            i++\n            j--\n \
    \       } else {\n            i++\n            j--\n            k++\n        }\n\
    \    }\n    return k == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmplzog0pgl_test.go:79: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmplzog0pgl_test.go:79:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmplzog0pgl_test.go:79: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmplzog0pgl_test.go:79:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmplzog0pgl_test.go:79: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075175
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    last := lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < last {\n            return false\n \
    \       }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpram7mj_o_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpram7mj_o_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpz0ikm0e2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpz0ikm0e2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   if lst[i] < lst[j] {\n            i++\n            j--\n            continue\n\
    \        }\n        if lst[i] == lst[j] {\n            i++\n            j--\n\
    \            continue\n        }\n        if lst[i] > lst[j] {\n            i++\n\
    \        } else {\n            j--\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpupbo822b_test.go:37:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075175
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   if lst[i] < lst[j] {\n            i++\n            j--\n        } else {\n\
    \            i++\n            j--\n            k++\n        }\n    }\n    return\
    \ k == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmplc4eiwv__test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmplc4eiwv__test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmplc4eiwv__test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmplc4eiwv__test.go:82:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmplc4eiwv__test.go:82: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    return is_sorted(lst[1:])\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpin08laey_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpin08laey_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if lst[i] < lst[j] {\n            k = i\n        } else {\n     \
    \       k = j\n        }\n        if k == i {\n            return false\n    \
    \    }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmpq0scx61x_test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmpq0scx61x_test.go:63\
    \ +0x1b\ntesting.tRunner(0xc0001a0340, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpgstuxdtn_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpgstuxdtn_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v != last {\n            return false\n        }\n   \
    \     last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpokyylgqs_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpokyylgqs_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpokyylgqs_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpokyylgqs_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpokyylgqs_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    last := lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v < last {\n            return false\n    \
    \    }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmpfph8g4b__test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmpfph8g4b__test.go:52\
    \ +0x1b\ntesting.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found\
    \ := false\n    for !found && i < j {\n        if lst[i] > lst[j] {\n        \
    \    found = true\n        } else {\n            i++\n            j--\n      \
    \  }\n    }\n    return !found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate\
    \ := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpiiao_g_n_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpiiao_g_n_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpiiao_g_n_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpiiao_g_n_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpgstuxdtn_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpgstuxdtn_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    last := lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < last {\n            return false\n \
    \       }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpram7mj_o_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpram7mj_o_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, val := range\
    \ lst[1:] {\n        if val > last {\n            return false\n        }\n  \
    \      last = val\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpog3xdcll_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpog3xdcll_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpog3xdcll_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmpog3xdcll_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpog3xdcll_test.go:70: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpog3xdcll_test.go:70:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last,\
    \ ok := lst[len(lst)-1]\n    if !ok {\n        return false\n    }\n    for i\
    \ := len(lst)-2; i >= 0; i-- {\n        if lst[i] > last {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqs6aix3w_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075175
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpz0ikm0e2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpz0ikm0e2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpgstuxdtn_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpgstuxdtn_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    found := false\n    for i < j {\n        if lst[i] < lst[j] {\n   \
    \         found = true\n            break\n        }\n        if lst[i] > lst[j]\
    \ {\n            found = false\n            break\n        }\n        i++\n  \
    \      j--\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmpue1wgioh_test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmpue1wgioh_test.go:60\
    \ +0x1b\ntesting.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v < last {\n            return false\n        }\n    \
    \    last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpwgsudirj_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpwgsudirj_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    lastVal\
    \ := lst[0]\n    for _, val := range lst {\n        if val > lastVal {\n     \
    \       return false\n        }\n        lastVal = val\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmptgf3d0wo_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmptgf3d0wo_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmptgf3d0wo_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__8 (0.00s)\n        tmptgf3d0wo_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmptgf3d0wo_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmptgf3d0wo_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    for\
    \ {\n        if lst[i] > lst[j] {\n            return false\n        }\n     \
    \   if i == j {\n            break\n        }\n        if lst[i] != lst[j] {\n\
    \            return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpt8iha_qx_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpt8iha_qx_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpt8iha_qx_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpt8iha_qx_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpt8iha_qx_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpgstuxdtn_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpgstuxdtn_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst[1:] {\n        if v != last {\n       \
    \     return false\n        }\n        last = v\n    }\n    return true\n}\n\n\
    func TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmprc3m5d36_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmprc3m5d36_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmprc3m5d36_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmprc3m5d36_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmprc3m5d36_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    k := 0\n    for {\n        if i == j {\n            break\n       \
    \ }\n        if lst[i] < lst[j] {\n            return false\n        }\n     \
    \   if lst[i] > lst[j] {\n            i++\n            j--\n        } else {\n\
    \            i++\n            j--\n            k++\n        }\n    }\n    return\
    \ k == len(lst)\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted({0xc0000c43c8?, 0x0?, 0x0?})\n\
    \t/tmp/tmpo4u9cok6_test.go:33 +0xbd\ncommand-line-arguments_test.TestIs_Sorted(0x0?)\n\
    \t/tmp/tmpo4u9cok6_test.go:64 +0x62\ntesting.tRunner(0xc0001a0340, 0x528f40)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    last := lst[0]\n    for\
    \ _, v := range lst[1:] {\n        if v < last {\n            return false\n \
    \       }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpram7mj_o_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpram7mj_o_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpidqa6x0p_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpidqa6x0p_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpidqa6x0p_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpidqa6x0p_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last,\
    \ ok := lst[len(lst)-1]\n    if !ok {\n        return false\n    }\n    for _,\
    \ v := range lst[:len(lst)-1] {\n        if v != last {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppj_7ofv1_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075175
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpgstuxdtn_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpgstuxdtn_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    last := lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v < last {\n            return false\n    \
    \    }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmpfph8g4b__test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmpfph8g4b__test.go:52\
    \ +0x1b\ntesting.tRunner(0xc0001924e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpmodxi0qd_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpmodxi0qd_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst {\n        if v != last {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp25bykh4s_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp25bykh4s_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp25bykh4s_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp25bykh4s_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp25bykh4s_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst {\n        if v != last {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp25bykh4s_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp25bykh4s_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp25bykh4s_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp25bykh4s_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp25bykh4s_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for i < j {\n        if lst[i] > lst[j] {\n  \
    \          return false\n        }\n        i++\n        j--\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpidqa6x0p_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__5 (0.00s)\n        tmpidqa6x0p_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpidqa6x0p_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpidqa6x0p_test.go:69:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    last := lst[0]\n    for _, v := range\
    \ lst[1:] {\n        if v < last {\n            return false\n        }\n    \
    \    last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpwgsudirj_test.go:70: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpwgsudirj_test.go:70:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for {\n        if i == j {\n            break\n\
    \        }\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmp6h4bvg9v_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp6h4bvg9v_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmp6h4bvg9v_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp6h4bvg9v_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp6h4bvg9v_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3of2avu0_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3of2avu0_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpz0ikm0e2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpz0ikm0e2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    return is_sorted(lst[1:])\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpin08laey_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpin08laey_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpin08laey_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] == lst[0]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    for {\n        if i == j {\n            break\n        }\n        if\
    \ lst[i] > lst[j] {\n            return false\n        }\n        if lst[i] <\
    \ lst[j] {\n            i++\n            j--\n        } else {\n            i++\n\
    \            j--\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpdqey68iu_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpdqey68iu_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpdqey68iu_test.go:80: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpdqey68iu_test.go:80:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpdqey68iu_test.go:80: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    i := 0\n    j := len(lst) - 1\n    found\
    \ := false\n    for i < j {\n        if lst[i] > lst[j] {\n            found =\
    \ true\n            break\n        }\n        if lst[i] < lst[j] {\n         \
    \   found = false\n            break\n        }\n        i++\n        j--\n  \
    \  }\n    return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate :=\
    \ is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3,\
    \ 4, 5, 6, 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp0e1gfh18_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp0e1gfh18_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp0e1gfh18_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmp0e1gfh18_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__8\
    \ (0.00s)\n        tmp0e1gfh18_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp0e1gfh18_test.go:78:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp0e1gfh18_test.go:78: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpz0ikm0e2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpz0ikm0e2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpz0ikm0e2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__6\
    \ (0.00s)\n        tmp63kfjkqj_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__9 (0.00s)\n        tmp63kfjkqj_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sorted/test_num__10\
    \ (0.00s)\n        tmp63kfjkqj_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) <= 1 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpaqx05lst_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpaqx05lst_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ > lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjlvbc25l_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjlvbc25l_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjlvbc25l_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjlvbc25l_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjlvbc25l_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjlvbc25l_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    i := 0\n    j := len(lst)\
    \ - 1\n    found := false\n    for i < j {\n        if lst[i] > lst[j] {\n   \
    \         return false\n        }\n        if lst[i] == lst[j] {\n           \
    \ found = true\n        }\n        if found {\n            i++\n            j--\n\
    \        }\n    }\n    return found\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmpfgdgk8f2_test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmpfgdgk8f2_test.go:60\
    \ +0x1b\ntesting.tRunner(0xc0001031e0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[len(lst)-1] {\n   \
    \     return false\n    }\n    for i := 1; i < len(lst); i++ {\n        if lst[i]\
    \ < lst[i-1] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 3, 2, 4, 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4,\
    \ 5, 6}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6,\
    \ 7}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}),\
    \ expected: false },\n     { actual: candidate([]int{}), expected: true },\n \
    \    { actual: candidate([]int{1}), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp__aqvimz_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp__aqvimz_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v < last {\n            return\
    \ false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t\
    \ *testing.T) {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true\
    \ },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n\
    \     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__9\
    \ (0.00s)\n        tmpgstuxdtn_test.go:67: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__10 (0.00s)\n        tmpgstuxdtn_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return lst[0] < lst[1]\n    }\n    last := lst[0]\n    for _,\
    \ v := range lst[1:] {\n        if v == last {\n            return false\n   \
    \     }\n        last = v\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512440,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512440, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_sorted(...)\n\t/tmp/tmpbqondvwp_test.go:33\n\
    command-line-arguments_test.TestIs_Sorted(0x0?)\n\t/tmp/tmpbqondvwp_test.go:52\
    \ +0x1b\ntesting.tRunner(0xc00011b040, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075176
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return false\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__6 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__11\
    \ (0.00s)\n        tmpjrxvgqw8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__12 (0.00s)\n        tmpjrxvgqw8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 2
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last,\
    \ ok := lst[len(lst)-1]\n    if !ok {\n        return false\n    }\n    for _,\
    \ v := range lst[:len(lst)-1] {\n        if v != last {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T) {\n\
    \  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppj_7ofv1_test.go:32:17: assignment mismatch: 2 variables but 1 value

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075175
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    if len(lst)\
    \ == 1 {\n        return true\n    }\n    if lst[0] != lst[1] {\n        return\
    \ false\n    }\n    return is_sorted(lst[2:])\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpofv4szot_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpofv4szot_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n        last = v\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Sorted(t *testing.T) {\n  candidate := is_sorted\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 3, 2, 4,\
    \ 5}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false\
    \ },\n     { actual: candidate([]int{}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: true },\n     { actual: candidate([]int{3, 2, 1}), expected: false\
    \ },\n     { actual: candidate([]int{1, 2, 2, 2, 3, 4}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 3, 3, 4}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 2, 3, 3, 4}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 4}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmp3h52h8bl_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmp3h52h8bl_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    last\
    \ := lst[0]\n    for _, v := range lst {\n        if v != last {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__1\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__4\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpzx3659w2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpzx3659w2_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075173
- exit_code: 1
  program: "package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of numbers, return whether or not they are sorted\n// in ascending\
    \ order. If list has more than 1 duplicate of the same\n// number, return False.\
    \ Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n\
    // true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n\
    // >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1,\
    \ 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n//\
    \ true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst\
    \ []int) bool {\n    if len(lst) == 0 {\n        return true\n    }\n    i :=\
    \ 0\n    j := len(lst) - 1\n    for {\n        if i == j {\n            break\n\
    \        }\n        if lst[i] > lst[j] {\n            return false\n        }\n\
    \        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Sorted(t *testing.T)\
    \ {\n  candidate := is_sorted\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected:\
    \ true },\n     { actual: candidate([]int{1, 3, 2, 4, 5}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 6}), expected: true },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}), expected: true },\n     { actual:\
    \ candidate([]int{1, 3, 2, 4, 5, 6, 7}), expected: false },\n     { actual: candidate([]int{}),\
    \ expected: true },\n     { actual: candidate([]int{1}), expected: true },\n \
    \    { actual: candidate([]int{3, 2, 1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 2, 2, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 3,\
    \ 3, 3, 4}), expected: false },\n     { actual: candidate([]int{1, 2, 2, 3, 3,\
    \ 4}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 4}), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Sorted (0.00s)\n    --- FAIL: TestIs_Sorted/test_num__2\
    \ (0.00s)\n        tmpkqis_y6y_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__3 (0.00s)\n        tmpkqis_y6y_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__5\
    \ (0.00s)\n        tmpkqis_y6y_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Sorted/test_num__11 (0.00s)\n        tmpkqis_y6y_test.go:72:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sorted/test_num__12\
    \ (0.00s)\n        tmpkqis_y6y_test.go:72: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075176
