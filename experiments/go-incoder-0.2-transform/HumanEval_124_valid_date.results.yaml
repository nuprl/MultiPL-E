language: go_test.go
name: HumanEval_124_valid_date
results:
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    }\n    if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false\n        }\n    }\n    if month == 2 {\n    \
    \    if day < 1 || day > 28 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz6k34w0v_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n\n    day, month, year =\
    \ strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppbbpx54a_test.go:72:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n    if year < 1950 || year > 2099 {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkx7timhq_test.go:29:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := 0, 0, 0\n    day,\
    \ month, year = parseDate(date)\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1 || year > 9999 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_p2bwd8__test.go:30:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return true\n    }\n    if month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12\
    \ {\n        return true\n    }\n    if month == 2 && day > 29 {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp98ly2f1_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    if month == 4 {\n  \
    \      if day < 1 || day > 30 {\n            return false\n        }\n    }\n\
    \    if month == 6 {\n        if day < 1 || day > 31 {\n            return false\n\
    \        }\n    }\n    if month == 9 {\n        if day < 1 || day > 31 {\n   \
    \         return false\n        }\n    }\n    if month == 11 {\n        if day\
    \ < 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa7v7ogpz_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 ||\n   \
    \     year > 2100 {\n        return false\n    }\n    if month == 2 {\n      \
    \  if day < 1 || day > 29 {\n            return false\n        }\n    }\n    if\
    \ month == 4 {\n        if day < 1 || day > 30 {\n            return false\n \
    \       }\n    }\n    if month == 6 {\n        if day < 1 || day > 31 {\n    \
    \        return false\n        }\n    }\n    if month == 9 {\n        if day <\
    \ 1 || day > 31 {\n            return false\n        }\n    }\n    if month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt843irhl_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.Tri\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi9tt039b_test.go:70:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaxbiwo0e_test.go:173:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ goes here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    day, month,\
    \ year := 0, 0, 0\n    day, month, year = parseDate(date)\n    if day < 1 || day\
    \ > 31 || month < 1 || month > 12 || year < 1 || year > 9999 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdjmq6g0t_test.go:27:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    } else {\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gejz33w_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    if month == 4 {\n  \
    \      if day < 1 || day > 30 {\n            return false\n        }\n    }\n\
    \    if month == 6 {\n        if day < 1 || day > 31 {\n            return false\n\
    \        }\n    }\n    if month == 9 {\n        if day < 1 || day > 30 {\n   \
    \         return false\n        }\n    }\n    if month == 11 {\n        if day\
    \ < 1 || day > 31 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgvz2zhdu_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    // Your code here\n    \n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    day, month,\
    \ year := split_date(date)\n    return !is_empty(day) && !is_empty(month) && !is_empty(year)\
    \ && is_valid_date(day, month, year)\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppiscbfsl_test.go:26:25: undefined: split_date

    /tmp/tmppiscbfsl_test.go:27:13: undefined: is_empty

    /tmp/tmppiscbfsl_test.go:27:69: undefined: is_valid_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDateParts(date)\n\
    \n    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n\n    if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        return true\n    }\n\n    if month == 2\
    \ && day > 29 {\n        return true\n    }\n\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudy8xls3_test.go:30:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr76kts62_test.go:29:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return true\n    }\n    if month == 2 && day\
    \ > 29 {\n        return true\n    }\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8l04vtsm_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n\n    switch month {\n    case 1:\n \
    \   case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n\
    \        return true\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n  \
    \      return true\n    case 2:\n        return true\n    default:\n        return\
    \ false\n    }\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp47w3puup_test.go:30:25: undefined: split_date

    /tmp/tmp47w3puup_test.go:54:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || month == 2 {\n     \
    \   return false\n    }\n    if year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpakm_vyju_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr76kts62_test.go:29:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := 0, 0, 0\n    day,\
    \ month, year = parseDate(date)\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 {\n        return false\n    }\n    if month == 2 && day > 29 {\n     \
    \   return false\n    }\n    if month == 4 && day > 30 {\n        return false\n\
    \    }\n    if month == 6 && day > 31 {\n        return false\n    }\n    if month\
    \ == 9 && day > 30 {\n        return false\n    }\n    if month == 11 && day >\
    \ 31 {\n        return false\n    }\n    if month == 1 && day > 31 {\n       \
    \ return false\n    }\n    if day > 31 {\n        return false\n    }\n    if\
    \ month == 2 {\n        if day > 28 {\n            return false\n        }\n \
    \   }\n    if month == 4 {\n        if day > 30 {\n            return false\n\
    \        }\n    }\n    if month == 6 {\n        if day > 31 {\n            return\
    \ false\n        }\n    }\n    if month == 9 {\n        if day > 30 {\n      \
    \      return false\n        }\n    }\n    if month == 11 {\n        if day >\
    \ 31 {\n            return false\n        }\n    }\n    if month == 1 {\n    \
    \    if day > 31 {\n            return false\n        }\n    }\n    if day > 31\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeg1c6h19_test.go:30:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDateParts(date)\n\
    \n    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n\n    if year < 1900 || (year > 2020 && year < 2040) {\n        return\
    \ false\n    }\n\n    if month == 2 {\n        if day < 1 || day > 29 {\n    \
    \        return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpctk6rvg4_test.go:30:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n    if month == 2 && day > 29 {\n        return false\n    }\n    if month\
    \ == 4 && day > 30 {\n        return false\n    }\n    if month == 6 && day >\
    \ 31 {\n        return false\n    }\n    if month == 9 && day > 31 {\n       \
    \ return false\n    }\n    if month == 11 && day > 30 {\n        return false\n\
    \    }\n    if month == 1 && day > 31 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe7h0en1w_test.go:29:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    day, month,\
    \ year := split_date(date)\n    return day != \"\" && month != \"\" && year !=\
    \ \"\" && month_in_range(month) && day_in_range(day) && year_in_range(year)\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm_cnf21d_test.go:26:25: undefined: split_date

    /tmp/tmpm_cnf21d_test.go:27:54: undefined: month_in_range

    /tmp/tmpm_cnf21d_test.go:27:79: undefined: day_in_range

    /tmp/tmpm_cnf21d_test.go:27:100: undefined: year_in_range

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDateParts(date)\n\
    \n    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year >\
    \ 9999 {\n        return false\n    }\n\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    }\n\n    if month\
    \ == 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day\
    \ > 30 {\n            return false\n        }\n    }\n\n    if month == 2 {\n\
    \        if day < 1 || day > 28 {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvz6ks8sg_test.go:30:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n\n    if year < 1000 || year > 9999 {\n        return false\n    }\n\n\
    \    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmoh98049_test.go:30:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6kon8r0_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    }\n    if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    }\n    if month == 1 {\n        if day > 31 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8v2e4shj_test.go:29:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2o18fzj5_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6kon8r0_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day >\
    \ 29 {\n            return false\n        }\n    } else {\n        if day > 30\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0fof7xsz_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n    if month == 2 && day > 29 {\n        return false\n    }\n    if month\
    \ == 4 && day > 30 {\n        return false\n    }\n    if month == 6 && day >\
    \ 31 {\n        return false\n    }\n    if month == 9 && day > 31 {\n       \
    \ return false\n    }\n    if month == 11 && day > 30 {\n        return false\n\
    \    }\n    if month == 1 && day > 31 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8sky8lsz_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1950 || year\
    \ > 2099 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ld13t12_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n\n    switch month {\n    case 1, 3, 5, 7, 8,\
    \ 10, 12:\n        if day < 1 || day > 30 {\n            return false\n      \
    \  }\n    case 4, 6, 9, 11:\n        if day < 1 || day > 29 {\n            return\
    \ false\n        }\n    case 2:\n        if day < 1 || day > 28 {\n          \
    \  return false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj354yknd_test.go:30:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day >\
    \ 29 {\n            return false\n        }\n    }\n    if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day > 30 {\n            return\
    \ false\n        }\n    }\n    if month == 1 {\n        if day > 31 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmi9x29gf_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    year, err := strconv.Atoi(parts[0])\n\
    \    if err != nil {\n        return false\n    }\n    month, err := strconv.Atoi(parts[1])\n\
    \    if err != nil {\n        return false\n    }\n    day, err := strconv.Atoi(parts[2])\n\
    \    if err != nil {\n        return false\n    }\n    if year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month < 1 || month > 12 {\n        return\
    \ false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n  \
    \  if month == 2 && day > 29 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1er5pkbx_test.go:29:14: undefined: strings

    /tmp/tmp1er5pkbx_test.go:33:18: undefined: strconv

    /tmp/tmp1er5pkbx_test.go:37:19: undefined: strconv

    /tmp/tmp1er5pkbx_test.go:41:17: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return day > 30\n    }\n    return day > 29\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyigsosxw_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return true\n    }\n    if month == 2 && day\
    \ > 29 {\n        return true\n    }\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0uoynr7g_test.go:29:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    switch month {\n    case 1, 3, 5,\
    \ 7, 8, 10, 12:\n        if day < 1 || day > 30 {\n            return false\n\
    \        }\n    case 4, 6, 9, 11:\n        if day < 1 || day > 29 {\n        \
    \    return false\n        }\n    case 2:\n        if day < 1 || day > 28 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptu4uar73_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDateParts(date)\n\
    \n    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n\n    if month == 2 {\n        if day\
    \ > 29 {\n            return false\n        }\n    } else {\n        if day >\
    \ 30 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmctn283v_test.go:30:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    }\n    if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false\n        }\n    }\n    if month == 1 {\n    \
    \    if day < 1 || day > 31 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy5081vns_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaxbiwo0e_test.go:173:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    if month == 4 {\n  \
    \      if day < 1 || day > 30 {\n            return false\n        }\n    }\n\
    \    if month == 6 {\n        if day < 1 || day > 31 {\n            return false\n\
    \        }\n    }\n    if month == 9 {\n        if day < 1 || day > 30 {\n   \
    \         return false\n        }\n    }\n    if month == 11 {\n        if day\
    \ < 1 || day > 31 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgvz2zhdu_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jbd7j0f_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2o18fzj5_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    } else {\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gejz33w_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := 0, 0, 0\n   \
    \ day, month, year = parseDate(date)\n\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n\n\
    \    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_h_y1y4i_test.go:31:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    } else {\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe580qi0__test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfm3w8kqm_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1950 || year\
    \ > 2099 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4ld13t12_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return day > 30\n    }\n    if month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12 {\n        return day > 29\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaiqyxwx6_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.Tri\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_g2x7h8p_test.go:51:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfm3w8kqm_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return day > 30\n    }\n    return day > 29\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyigsosxw_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gzfmmni_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c9z6rqy_test.go:29:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.Tri\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_g2x7h8p_test.go:51:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, _ := strconv.Atoi(date[0:2])\n\
    \    month, _ := strconv.Atoi(date[2:4])\n    year, _ := strconv.Atoi(date[4:8])\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp848mapyu_test.go:29:15: undefined: strconv

    /tmp/tmp848mapyu_test.go:30:17: undefined: strconv

    /tmp/tmp848mapyu_test.go:31:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbp1qdz1_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    dayInt, err := strconv.Atoi(day)\n    if\
    \ err != nil {\n        return false\n    }\n    monthInt, err := strconv.Atoi(month)\n\
    \    if err != nil {\n        return false\n    }\n    yearInt, err := strconv.Atoi(year)\n\
    \    if err != nil {\n        return false\n    }\n    if dayInt < 1 || dayInt\
    \ > 31 || monthInt < 1 || monthInt > 12 || yearInt < 1 || yearInt > 9999 {\n \
    \       return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqfu3p22z_test.go:29:14: undefined: strings

    /tmp/tmpqfu3p22z_test.go:34:20: undefined: strconv

    /tmp/tmpqfu3p22z_test.go:38:22: undefined: strconv

    /tmp/tmpqfu3p22z_test.go:42:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ goes here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day >\
    \ 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwn1g4j8i_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, _ := strconv.Atoi(date[0:2])\n\
    \    month, _ := strconv.Atoi(date[2:4])\n    year, _ := strconv.Atoi(date[4:8])\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    }\n    if month == 4 {\n        if day\
    \ > 30 {\n            return false\n        }\n    }\n    if month == 6 {\n  \
    \      if day > 29 {\n            return false\n        }\n    }\n    if month\
    \ == 9 {\n        if day > 30 {\n            return false\n        }\n    }\n\
    \    if month == 11 {\n        if day > 30 {\n            return false\n     \
    \   }\n    }\n    if month == 2 {\n        if day > 29 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9yydmdr_test.go:29:15: undefined: strconv

    /tmp/tmpe9yydmdr_test.go:30:17: undefined: strconv

    /tmp/tmpe9yydmdr_test.go:31:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    day, month,\
    \ year := 0, 0, 0\n    day, month, year, err = parseDate(date)\n    if err !=\
    \ nil {\n        fmt.Println(err)\n        return false\n    }\n    if day < 1\
    \ || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999 {\n      \
    \  return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa4uysc8r_test.go:27:23: undefined: err

    /tmp/tmpa4uysc8r_test.go:27:29: undefined: parseDate

    /tmp/tmpa4uysc8r_test.go:28:8: undefined: err

    /tmp/tmpa4uysc8r_test.go:29:21: undefined: err

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6kon8r0_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp13nhn8op_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n\n    day, month, year =\
    \ strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppbbpx54a_test.go:72:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := 0, 0, 0\n    day,\
    \ month, year = parseDate(date)\n    if day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1 || year > 9999 {\n        return false\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_p2bwd8__test.go:30:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    days := count_days(day, month, year)\n    if days > 31 || days < 1 || month\
    \ > 12 || month < 1 {\n        return false\n    }\n    if day < 1 || day > 31\
    \ || month < 1 || month > 12 {\n        return false\n    }\n    if year < 1000\
    \ || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdz63hidg_test.go:29:25: undefined: split_date

    /tmp/tmpdz63hidg_test.go:30:13: undefined: count_days

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nnl7_z0_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    day, month,\
    \ year := 0, 0, 0\n    day, month, year = parseDate(date)\n    if day < 1 || day\
    \ > 31 || month < 1 || month > 12 || year < 1 || year > 9999 {\n        return\
    \ false\n    }\n    if month == 2 {\n        if day > 29 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdjmq6g0t_test.go:27:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n\n    day, month, year =\
    \ strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\n    day,\
    \ month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToLower(day), strings.ToLower(month), strings.ToLower(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.ToUpper(day), strings.ToUpper(month), strings.ToUpper(year)\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprcqoau56_test.go:75:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.Tri\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn60_u7m2_test.go:62:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n\n    switch month {\n    case 1:\n \
    \       if day < 1 || day > 29 {\n            return false\n        }\n    case\
    \ 3:\n        if day < 1 || day > 31 {\n            return false\n        }\n\
    \    case 5:\n        if day < 1 || day > 30 {\n            return false\n   \
    \     }\n    case 7:\n        if day < 1 || day > 31 {\n            return false\n\
    \        }\n    case 8:\n        if day < 1 || day > 30 {\n            return\
    \ false\n        }\n    case 10:\n        if day < 1 || day > 31 {\n         \
    \   return false\n        }\n    case 12:\n        if day < 1 || day > 31 {\n\
    \            return false\n        }\n    default:\n        return false\n   \
    \ }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9wfzp2is_test.go:30:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, _ := strconv.Atoi(date[0:2])\n\
    \    month, _ := strconv.Atoi(date[2:4])\n    year, _ := strconv.Atoi(date[4:10])\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    if month == 4 {\n  \
    \      if day < 1 || day > 30 {\n            return false\n        }\n    }\n\
    \    if month == 6 {\n        if day < 1 || day > 31 {\n            return false\n\
    \        }\n    }\n    if month == 9 {\n        if day < 1 || day > 30 {\n   \
    \         return false\n        }\n    }\n    if month == 11 {\n        if day\
    \ < 1 || day > 31 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgztv3ed1_test.go:29:15: undefined: strconv

    /tmp/tmpgztv3ed1_test.go:30:17: undefined: strconv

    /tmp/tmpgztv3ed1_test.go:31:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, yearInt, err := strconv.Atoi(day)\n    if err != nil\
    \ {\n        return false\n    }\n    month, monthInt, err := strconv.Atoi(month)\n\
    \    if err != nil {\n        return false\n    }\n    year, yearInt, err := strconv.Atoi(year)\n\
    \    if err != nil {\n        return false\n    }\n    if month < 1 || month >\
    \ 12 {\n        return false\n    }\n    if day < 1 || day > 31 || (day > 29 &&\
    \ month != 2) {\n        return false\n    }\n    if year < 1000 || year > 9999\
    \ {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplgpunfq9_test.go:29:25: undefined: strings

    /tmp/tmplgpunfq9_test.go:30:33: undefined: strconv

    /tmp/tmplgpunfq9_test.go:34:29: undefined: strconv

    /tmp/tmplgpunfq9_test.go:38:24: no new variables on left side of :=

    /tmp/tmplgpunfq9_test.go:38:27: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        return true\n    }\n    if month == 2 && day > 29\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknsqwimd_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := 0, 0, 0\n   \
    \ day, month, year = parseDate(date)\n\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n\n\
    \    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    } else {\n        if day < 1 || day > 30 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp52upanbn_test.go:31:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ goes here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2o18fzj5_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := 0, 0, 0\n   \
    \ day, month, year = parseDate(date)\n\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n\n\
    \    if month == 2 {\n        if day < 1 || day > 29 {\n            return false\n\
    \        }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 28 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_h_y1y4i_test.go:31:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpv29mx76k_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpv29mx76k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jbd7j0f_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    dayInt, err := strconv.Atoi(day)\n    if\
    \ err != nil {\n        return false\n    }\n    monthInt, err := strconv.Atoi(month)\n\
    \    if err != nil {\n        return false\n    }\n    yearInt, err := strconv.Atoi(year)\n\
    \    if err != nil {\n        return false\n    }\n    if dayInt < 1 || dayInt\
    \ > 31 || monthInt < 1 || monthInt > 12 || yearInt < 1 || yearInt > 9999 {\n \
    \       return false\n    }\n    if monthInt == 2 && dayInt > 29 {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph2qrjb8o_test.go:29:14: undefined: strings

    /tmp/tmph2qrjb8o_test.go:34:20: undefined: strconv

    /tmp/tmph2qrjb8o_test.go:38:22: undefined: strconv

    /tmp/tmph2qrjb8o_test.go:42:21: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.Tri\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_g2x7h8p_test.go:51:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || month == 2 {\n     \
    \   return false\n    }\n\n    if year < 1000 || year > 9999 {\n        return\
    \ false\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbgkzq8o3_test.go:30:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nnl7_z0_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6kon8r0_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 || (year\
    \ > 2020 && year < 2040) {\n        return false\n    }\n    return true\n}\n\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_h47rj4g_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := 0, 0, 0\n   \
    \ day, month, year = parseDate(date)\n\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n\n\
    \    if month == 2 {\n        if day > 29 {\n            return false\n      \
    \  }\n    } else {\n        if day > 30 {\n            return false\n        }\n\
    \    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf12b2s30_test.go:31:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n\n    switch month {\n    case 1, 3, 5, 7, 8,\
    \ 10, 12:\n        return true\n    case 4, 6, 9, 11:\n        return true\n \
    \   case 2:\n        return true\n    default:\n        return false\n    }\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6v21ytpl_test.go:30:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4jbd7j0f_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n    \
    \        return false\n        }\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 28 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpso4q40t5_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, _ := strconv.Atoi(date[0:2])\n\
    \    month, _ := strconv.Atoi(date[2:4])\n    year, _ := strconv.Atoi(date[4:8])\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp848mapyu_test.go:29:15: undefined: strconv

    /tmp/tmp848mapyu_test.go:30:17: undefined: strconv

    /tmp/tmp848mapyu_test.go:31:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6kon8r0_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075251
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDate(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9c9z6rqy_test.go:29:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day >\
    \ 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwn1g4j8i_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    }\n    if month == 4 || month == 6 ||\
    \ month == 9 || month == 11 {\n        if day > 30 {\n            return false\n\
    \        }\n    }\n    if month == 1 {\n        if day > 31 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1kbsd9yz_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || month == 2 && day >\
    \ 29 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return true\n    }\n    return false\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpljsdsdak_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6kon8r0_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpejnvhho7_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    day, month,\
    \ year := 0, 0, 0\n    day, month, year = parseDate(date)\n    if day < 1 || day\
    \ > 31 || month < 1 || month > 12 || month == 2 && day > 29 {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponsr26e2_test.go:27:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, _ := strconv.Atoi(date[0:2])\n\
    \    month, _ := strconv.Atoi(date[2:4])\n    year, _ := strconv.Atoi(date[4:8])\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || month != 2 && day >\
    \ 30 || month != 4 && day > 29 {\n        return false\n    }\n    if year < 1000\
    \ || year > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp0nkfjc_test.go:29:15: undefined: strconv

    /tmp/tmpkp0nkfjc_test.go:30:17: undefined: strconv

    /tmp/tmpkp0nkfjc_test.go:31:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ goes here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    switch month {\n    case 1, 3, 5,\
    \ 7, 8, 10, 12:\n        if day < 1 || day > 30 {\n            return false\n\
    \        }\n    case 4, 6, 9, 11:\n        if day < 1 || day > 29 {\n        \
    \    return false\n        }\n    case 2:\n        if day < 1 || day > 29 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0kzxwexj_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || month == 2 {\n     \
    \   return false\n    }\n    if year < 1000 || year > 9999 {\n        return false\n\
    \    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpakm_vyju_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprbp1qdz1_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day > 29 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmcm_5w2l_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    }\n    if month ==\
    \ 4 || month == 6 || month == 9 || month == 11 {\n        if day < 1 || day >\
    \ 30 {\n            return false\n        }\n    }\n    if month == 1 {\n    \
    \    if day < 1 || day > 31 {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73uaf7z1_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    } else {\n        if day <\
    \ 1 || day > 30 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwtdoh8p_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := 0, 0, 0\n   \
    \ day, month, year = parseDate(date)\n\n    if day < 1 || day > 31 || month <\
    \ 1 || month > 12 || year < 1 || year > 9999 {\n        return false\n    }\n\n\
    \    if month == 2 {\n        if day > 29 {\n            return false\n      \
    \  }\n    }\n\n    if month == 4 || month == 6 || month == 9 || month == 11 {\n\
    \        if day > 30 {\n            return false\n        }\n    }\n\n    if month\
    \ == 1 {\n        if day > 31 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_xt4kzk6_test.go:31:24: undefined: parseDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDate(date)\n\
    \n    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n\n    if month == 2 {\n        if day\
    \ < 1 || day > 29 {\n            return false\n        }\n    }\n\n    if month\
    \ == 4 {\n        if day < 1 || day > 30 {\n            return false\n       \
    \ }\n    }\n\n    if month == 6 {\n        if day < 1 || day > 31 {\n        \
    \    return false\n        }\n    }\n\n    if month == 9 {\n        if day < 1\
    \ || day > 31 {\n            return false\n        }\n    }\n\n    if month ==\
    \ 11 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n\n    if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp57dztd_r_test.go:30:25: undefined: getDate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2o18fzj5_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    days := days_in_month(year, month)\n    if days > 31 || days < 1 {\n    \
    \    return false\n    }\n    if month > 12 || month < 1 {\n        return false\n\
    \    }\n    if year < 1000 || year > 9999 {\n        return false\n    }\n   \
    \ return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp670h43l8_test.go:29:25: undefined: split_date

    /tmp/tmp670h43l8_test.go:30:13: undefined: days_in_month

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day >\
    \ 29 {\n            return false\n        }\n    } else {\n        if day > 30\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp82esap00_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.Tri\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplor69_ho_test.go:51:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    parts := strings.Split(date,\
    \ \"-\")\n    if len(parts) != 3 {\n        return false\n    }\n    day, month,\
    \ year := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3c9lg1q2_test.go:52:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || month == 2 && day >\
    \ 29 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return day > 30\n    }\n    return day > 31\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdzu2wc95_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ goes here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpgzt2uhbj_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpgzt2uhbj_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpewivwr9l_test.go:53:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n    \
    \        return false\n        }\n    }\n    if month == 1 {\n        if day <\
    \ 1 || day > 31 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy547c2yv_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gzfmmni_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    days := strings.Count(day, \"0\")\n    months :=\
    \ strings.Count(month, \"0\")\n\n    if days > 31 || months > 12 || months < 1\
    \ || days < 1 {\n        return false\n    }\n\n    if months == 2 {\n       \
    \ if day > 29 || day < 1 {\n            return false\n        }\n    }\n\n   \
    \ if months == 4 {\n        if day > 30 || day < 1 {\n            return false\n\
    \        }\n    }\n\n    if months == 6 {\n        if day > 29 || day < 1 {\n\
    \            return false\n        }\n    }\n\n    if months == 9 {\n        if\
    \ day > 30 || day < 1 {\n            return false\n        }\n    }\n\n    if\
    \ months == 11 {\n        if day > 30 || day < 1 {\n            return false\n\
    \        }\n    }\n\n    if months == 12 {\n        if day > 31 || day < 1 {\n\
    \            return false\n        }\n    }\n\n    if day > 31 || day < 1 {\n\
    \        return false\n    }\n\n    if day > 30 || day < 1 {\n        return false\n\
    \    }\n\n    if day > 29 || day < 1 {\n        return false\n    }\n\n    if\
    \ day > 31 || day < 1 {\n        return false\n    }\n\n    if day > 30 || day\
    \ < 1 {\n        return false\n    }\n\n    if day > 29 || day < 1 {\n       \
    \ return false\n    }\n\n    if day > 31 || day < 1 {\n        return false\n\
    \    }\n\n    if day > 30 || day < 1 {\n        return false\n    }\n\n    if\
    \ day > 29 || day < 1 {\n        return false\n    }\n\n    if day > 31 || day\
    \ < 1 {\n        return false\n    }\n\n    if day > 30 || day < 1 {\n       \
    \ return false\n    }\n\n    if day > 29 || day < 1 {\n        return false\n\
    \    }\n\n    if day > 31 || day < 1 {\n        return false\n    }\n\n    if\
    \ day > 30 || day < 1 {\n        return false\n    }\n\n    if day > 29 || day\
    \ < 1 {\n        return false\n    }\n\n    if day > 31 || day < 1 {\n       \
    \ return false\n    }\n\n    if day > 30 || day < 1 {\n        return false\n\
    \    }\n\n    if day > 29 || day < 1 {\n        return false\n    }\n\n    if\
    \ day > 31 || day < 1 {\n        return false\n    }\n\n    if day > 30 || day\
    \ < 1 {\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpccimhqm5_test.go:154:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpys0rdvur_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpys0rdvur_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075251
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n\n    day, month, year =\
    \ strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\n\
    \    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.TrimSpace(year)\n\
    \n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month), strings.\n\
    func TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6g40ahwv_test.go:73:1: expected selector or type assertion, found ''func''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 4 || month == 6 || month ==\
    \ 9 || month == 11 {\n        return true\n    }\n    if month == 2 && day > 29\
    \ {\n        return true\n    }\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpknsqwimd_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075254
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    // Your code here\n    \n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmppkeq4ygi_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmppkeq4ygi_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 {\n        return false\n\
    \    }\n    if month == 2 && day > 29 {\n        return false\n    }\n    if month\
    \ == 4 && day > 30 {\n        return false\n    }\n    if month == 6 && day >\
    \ 29 {\n        return false\n    }\n    if month == 9 && day > 30 {\n       \
    \ return false\n    }\n    if month == 11 && day > 30 {\n        return false\n\
    \    }\n    if month == 1 && day > 31 {\n        return false\n    }\n    if month\
    \ == 3 && day > 31 {\n        return false\n    }\n    if month == 5 && day >\
    \ 31 {\n        return false\n    }\n    if month == 7 && day > 31 {\n       \
    \ return false\n    }\n    if month == 8 && day > 31 {\n        return false\n\
    \    }\n    if month == 10 && day > 31 {\n        return false\n    }\n    if\
    \ month == 12 && day > 31 {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdl5lfwm6_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || month == 2 && day >\
    \ 29 {\n        return false\n    }\n    if year < 1000 || year > 9999 {\n   \
    \     return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpht7ktrn9_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    if month == 4 || month\
    \ == 6 || month == 9 || month == 11 {\n        if day < 1 || day > 30 {\n    \
    \        return false\n        }\n    }\n    if month == 1 {\n        if day <\
    \ 1 || day > 31 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true },\n  \
    \   { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual: candidate(\"\
    04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"), expected:\
    \ true },\n     { actual: candidate(\"01-01-2007\"), expected: true },\n     {\
    \ actual: candidate(\"03-32-2011\"), expected: false },\n     { actual: candidate(\"\
    \"), expected: false },\n     { actual: candidate(\"04-31-3000\"), expected: false\
    \ },\n     { actual: candidate(\"06-06-2005\"), expected: true },\n     { actual:\
    \ candidate(\"21-31-2000\"), expected: false },\n     { actual: candidate(\"04-12-2003\"\
    ), expected: true },\n     { actual: candidate(\"04122003\"), expected: false\
    \ },\n     { actual: candidate(\"20030412\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04\"), expected: false },\n     { actual: candidate(\"2003-04-12\"\
    ), expected: false },\n     { actual: candidate(\"04-2003\"), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_fulaeys_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6kon8r0_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075250
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9gzfmmni_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := getDateParts(date)\n\
    \n    if day < 1 || day > 31 || month < 1 || month > 12 || month == 2 {\n    \
    \    return false\n    }\n\n    if year < 1000 || year > 9999 {\n        return\
    \ false\n    }\n\n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ledoj7w_test.go:30:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 4 || month == 6 || month\
    \ == 9 || month == 11 {\n        return true\n    }\n    if month == 2 && day\
    \ > 29 {\n        return true\n    }\n    return false\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8l04vtsm_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    dayInt, _ := strconv.Atoi(day)\n    monthInt,\
    \ _ := strconv.Atoi(month)\n    yearInt, _ := strconv.Atoi(year)\n    if dayInt\
    \ < 1 || dayInt > 31 || monthInt < 1 || monthInt > 12 || yearInt < 1 || yearInt\
    \ > 9999 {\n        return false\n    }\n    return true\n}\n\nfunc TestValid_Date(t\
    \ *testing.T) {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"\
    ), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected: false\
    \ },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual:\
    \ candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"\
    ), expected: false },\n     { actual: candidate(\"\"), expected: false },\n  \
    \   { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"\
    06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected:\
    \ false },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n    \
    \ { actual: candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"\
    20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n   \
    \  { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwqxaed8h_test.go:29:14: undefined: strings

    /tmp/tmpwqxaed8h_test.go:34:18: undefined: strconv

    /tmp/tmpwqxaed8h_test.go:35:20: undefined: strconv

    /tmp/tmpwqxaed8h_test.go:36:19: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    parts := strings.Split(date, \"-\"\
    )\n    if len(parts) != 3 {\n        return false\n    }\n    day, month, year\
    \ := parts[0], parts[1], parts[2]\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToLower(day),\
    \ strings.ToLower(month), strings.ToLower(year)\n    day, month, year = strings.TrimSpace(day),\
    \ strings.TrimSpace(month), strings.TrimSpace(year)\n    day, month, year = strings.ToUpper(day),\
    \ strings.ToUpper(month), strings.ToUpper(year)\nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2n2ba1pt_test.go:54:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    }\n    if month ==\
    \ 4 {\n        if day < 1 || day > 30 {\n            return false\n        }\n\
    \    }\n    if month == 6 {\n        if day < 1 || day > 31 {\n            return\
    \ false\n        }\n    }\n    if month == 9 {\n        if day < 1 || day > 30\
    \ {\n            return false\n        }\n    }\n    if month == 11 {\n      \
    \  if day < 1 || day > 31 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx0m9bs87_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nfunc TestValid_Date(t *testing.T)\
    \ {\n  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi1g5tdw9_test.go:281:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075248
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Write your\
    \ code here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n\
    \  candidate := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    03-11-2000\"), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected:\
    \ false },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n    \
    \ { actual: candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"\
    01-01-2007\"), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected:\
    \ false },\n     { actual: candidate(\"\"), expected: false },\n     { actual:\
    \ candidate(\"04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"\
    ), expected: true },\n     { actual: candidate(\"21-31-2000\"), expected: false\
    \ },\n     { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual:\
    \ candidate(\"04122003\"), expected: false },\n     { actual: candidate(\"20030412\"\
    ), expected: false },\n     { actual: candidate(\"2003-04\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04-12\"), expected: false },\n     { actual:\
    \ candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmp46wcol9o_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmp46wcol9o_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n\n    day, month, year := strings.Split(date,\
    \ \"-\")\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToLower(day), strings.ToLower(month),\
    \ strings.ToLower(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.TrimSpace(year)\n\n    day, month, year = strings.ToUpper(day), strings.ToUpper(month),\
    \ strings.ToUpper(year)\n\n    day, month, year = strings.TrimSpace(day), strings.TrimSpace(month),\
    \ strings.Tri\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkomi6nez_test.go:72:6: expected ''('', found TestValid_Date

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day <\
    \ 1 || day > 29 {\n            return false\n        }\n    } else {\n       \
    \ if day < 1 || day > 30 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe580qi0__test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075252
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := split_date(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1 || year > 9999\
    \ {\n        return false\n    }\n    if month == 2 {\n        if day < 1 || day\
    \ > 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nnl7_z0_test.go:29:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
- exit_code: 1
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Your code\
    \ here\n    \n    return true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate\
    \ := valid_date\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"03-11-2000\"\
    ), expected: true },\n     { actual: candidate(\"15-01-2012\"), expected: false\
    \ },\n     { actual: candidate(\"04-0-2040\"), expected: false },\n     { actual:\
    \ candidate(\"06-04-2020\"), expected: true },\n     { actual: candidate(\"01-01-2007\"\
    ), expected: true },\n     { actual: candidate(\"03-32-2011\"), expected: false\
    \ },\n     { actual: candidate(\"\"), expected: false },\n     { actual: candidate(\"\
    04-31-3000\"), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected:\
    \ true },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n    \
    \ { actual: candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"\
    04122003\"), expected: false },\n     { actual: candidate(\"20030412\"), expected:\
    \ false },\n     { actual: candidate(\"2003-04\"), expected: false },\n     {\
    \ actual: candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"\
    04-2003\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestValid_Date (0.00s)\n    --- FAIL: TestValid_Date/test_num__1\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__2 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__5\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__6 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__7\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__9 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__11\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__12 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__13\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestValid_Date/test_num__14 (0.00s)\n        tmpqzb11hij_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestValid_Date/test_num__15\
    \ (0.00s)\n        tmpqzb11hij_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075249
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    day, month,\
    \ year := split_date(date)\n    if day < 1 || day > 31 || month < 1 || month >\
    \ 12 || year < 1000 || year > 9999 {\n        return false\n    }\n    return\
    \ true\n}\n\nfunc TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"03-11-2000\"), expected: true\
    \ },\n     { actual: candidate(\"15-01-2012\"), expected: false },\n     { actual:\
    \ candidate(\"04-0-2040\"), expected: false },\n     { actual: candidate(\"06-04-2020\"\
    ), expected: true },\n     { actual: candidate(\"01-01-2007\"), expected: true\
    \ },\n     { actual: candidate(\"03-32-2011\"), expected: false },\n     { actual:\
    \ candidate(\"\"), expected: false },\n     { actual: candidate(\"04-31-3000\"\
    ), expected: false },\n     { actual: candidate(\"06-06-2005\"), expected: true\
    \ },\n     { actual: candidate(\"21-31-2000\"), expected: false },\n     { actual:\
    \ candidate(\"04-12-2003\"), expected: true },\n     { actual: candidate(\"04122003\"\
    ), expected: false },\n     { actual: candidate(\"20030412\"), expected: false\
    \ },\n     { actual: candidate(\"2003-04\"), expected: false },\n     { actual:\
    \ candidate(\"2003-04-12\"), expected: false },\n     { actual: candidate(\"04-2003\"\
    ), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6p_me_ix_test.go:26:25: undefined: split_date

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075255
- exit_code: 2
  program: "package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You have to write a function which validates a given date string and\n//\
    \ returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"\
    03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"\
    04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"\
    06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    if len(date)\
    \ == 0 {\n        return false\n    }\n    day, month, year := getDateParts(date)\n\
    \    if day < 1 || day > 31 || month < 1 || month > 12 || year < 1000 || year\
    \ > 9999 {\n        return false\n    }\n    if month == 2 {\n        if day >\
    \ 29 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestValid_Date(t *testing.T) {\n  candidate := valid_date\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"03-11-2000\"), expected: true },\n     { actual: candidate(\"\
    15-01-2012\"), expected: false },\n     { actual: candidate(\"04-0-2040\"), expected:\
    \ false },\n     { actual: candidate(\"06-04-2020\"), expected: true },\n    \
    \ { actual: candidate(\"01-01-2007\"), expected: true },\n     { actual: candidate(\"\
    03-32-2011\"), expected: false },\n     { actual: candidate(\"\"), expected: false\
    \ },\n     { actual: candidate(\"04-31-3000\"), expected: false },\n     { actual:\
    \ candidate(\"06-06-2005\"), expected: true },\n     { actual: candidate(\"21-31-2000\"\
    ), expected: false },\n     { actual: candidate(\"04-12-2003\"), expected: true\
    \ },\n     { actual: candidate(\"04122003\"), expected: false },\n     { actual:\
    \ candidate(\"20030412\"), expected: false },\n     { actual: candidate(\"2003-04\"\
    ), expected: false },\n     { actual: candidate(\"2003-04-12\"), expected: false\
    \ },\n     { actual: candidate(\"04-2003\"), expected: false },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwn1g4j8i_test.go:29:25: undefined: getDateParts

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075253
