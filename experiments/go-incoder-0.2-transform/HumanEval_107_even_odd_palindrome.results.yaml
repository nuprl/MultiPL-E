language: go_test.go
name: HumanEval_107_even_odd_palindrome
results:
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes := isPalindrome(i)\n        oddPalindromes\
    \ := isPalindrome(n-i)\n        result = append(result, evenPalindromes, oddPalindromes)\n\
    \    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpinta8vnw_test.go:26:28: undefined: isPalindrome

    /tmp/tmpinta8vnw_test.go:27:27: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        oddPalindromes := even_odd_palindrome_helper(i)\n\
    \        evenPalindromes := even_odd_palindrome_helper(n-i)\n        result =\
    \ append(result, oddPalindromes...)\n        result = append(result, evenPalindromes...)\n\
    \    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1gzkais0_test.go:26:27: undefined: even_odd_palindrome_helper

    /tmp/tmp1gzkais0_test.go:27:28: undefined: even_odd_palindrome_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromeCount\
    \ := 0\n            oddPalindromeCount := 0\n            evenPalindromes, oddPalindromes\
    \ := findEvenOddPalindromes(i)\n            for _, evenPalindrome := range evenPalindromes\
    \ {\n                if isPalindrome(evenPalindrome) {\n                    evenPalindromeCount++\n\
    \                }\n            }\n            for _, oddPalindrome := range oddPalindromes\
    \ {\n                if isPalindrome(oddPalindrome) {\n                    oddPalindromeCount++\n\
    \                }\n            }\n            result = append(result, evenPalindromeCount,\
    \ oddPalindromeCount)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplyro3hjx_test.go:26:12: undefined: isPalindrome

    /tmp/tmplyro3hjx_test.go:29:48: undefined: findEvenOddPalindromes

    /tmp/tmplyro3hjx_test.go:31:20: undefined: isPalindrome

    /tmp/tmplyro3hjx_test.go:36:20: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp3kdd4x79_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmp3kdd4x79_test.go:55: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=12)]'\n  \
    \  --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp3kdd4x79_test.go:"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromes, oddPalindromes}\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphed5g05c_test.go:29:12: undefined: isPalindrome

    /tmp/tmphed5g05c_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpahwo_zg5_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp3kdd4x79_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmp3kdd4x79_test.go:55: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=12)]'\n  \
    \  --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmp3kdd4x79_test.go:"
  timestamp: 1660074149
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpk191jlm8_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpk191jlm8_test.go:55: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=12)]'\n  \
    \  --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpk191jlm8_test.go:"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesg8iqc2_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9q2t4h8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes, oddPalindromes = evenPalindromes,\
    \ oddPalindromes\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n\
    \            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2zl1ruij_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmp2zl1ruij_test.go:29:16: undefined: isEven\n\
    /tmp/tmp2zl1ruij_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        for _, q := range oddPalindromes {\n            if\
    \ p == q {\n                evenPalindromes = append(evenPalindromes, p)\n   \
    \             oddPalindromes = append(oddPalindromes, q)\n            }\n    \
    \    }\n    }\n    for _, p := range evenPalindromes {\n        if p%2 == 0 {\n\
    \            result = append(result, p)\n        }\n    }\n    for _, q := range\
    \ oddPalindromes {\n        if q%2 == 0 {\n            result = append(result,\
    \ q)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp_benmjpu_test.go:72: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)\
    \ %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28)\
    \ %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42)\
    \ %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56)\
    \ %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70)\
    \ %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84)\
    \ %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98)\
    \ %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110)\
    \ %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122)\
    \ %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)\
    \ %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28)\
    \ %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42)\
    \ %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56)\
    \ %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70)\
    \ %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84)\
    \ %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98)\
    \ %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110)\
    \ %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122)\
    \ %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)\
    \ %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28)\
    \ %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42)\
    \ %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56)\
    \ %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes, oddPalindromes = evenPalindromes,\
    \ oddPalindromes\n    for i := 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes\
    \ = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindromes,\
    \ 0)\n    evenPalindromes = append(evenPalindromes, 0)\n    oddPalindromes = append(oddPalindrome\n\
    func TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6606p6qx_test.go:56:42: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2zvony4_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        if isPalindrome(p) {\n            result = append(result, p)\n  \
    \      }\n    }\n    for _, p := range oddPalindromes {\n        if isPalindrome(p)\
    \ {\n            result = append(result, p)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cktd5w9_test.go:28:12: undefined: isPalindrome

    /tmp/tmp0cktd5w9_test.go:35:12: undefined: isPalindrome

    /tmp/tmp0cktd5w9_test.go:40:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes, oddPalindromes = evenPalindromes,\
    \ oddPalindromes\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n\
    \            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2zl1ruij_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmp2zl1ruij_test.go:29:16: undefined: isEven\n\
    /tmp/tmp2zl1ruij_test.go:36:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesg8iqc2_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvwie18jw_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        for _, q := range oddPalindromes {\n            if\
    \ p == q {\n                result = append(result, p)\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmph0fxjyjp_test.go:61: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n\
    \        tmph0fxjyjp_test.go:61: expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmph0fxjyjp_test.go:61: expected '[%!s(int=1)"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n            } else\
    \ {\n                oddPalindromes = append(oddPalindromes, i)\n            }\n\
    \        }\n    }\n    for _, p := range evenPalindromes {\n        result = append(result,\
    \ p)\n    }\n    for _, p := range oddPalindromes {\n        result = append(result,\
    \ p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwe2d46p7_test.go:28:12: undefined: isPalindrome

    /tmp/tmpwe2d46p7_test.go:29:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        oddPalindromes = append(oddPalindromes, i)\n        evenPalindromes =\
    \ append(evenPalindromes, i)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprvlnq6rz_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesg8iqc2_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            evenPalindromes = append(evenPalindromes,\
    \ i)\n        } else {\n            oddPalindromes = append(oddPalindromes, i)\n\
    \        }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_gg0ii8_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpx_gg0ii8_test.go:33:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n            } else\
    \ {\n                oddPalindromes = append(oddPalindromes, i)\n            }\n\
    \        }\n    }\n    for _, p := range evenPalindromes {\n        result = append(result,\
    \ p)\n    }\n    for _, p := range oddPalindromes {\n        result = append(result,\
    \ p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwe2d46p7_test.go:28:12: undefined: isPalindrome

    /tmp/tmpwe2d46p7_test.go:29:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n    \
    \    oddPalindromes = append(oddPalindromes, n-i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        if isPalindrome(p) {\n            result = append(result,\
    \ p)\n        }\n    }\n    for _, p := range oddPalindromes {\n        if isPalindrome(p)\
    \ {\n            result = append(result, p)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptd4r0v29_test.go:32:12: undefined: isPalindrome

    /tmp/tmptd4r0v29_test.go:37:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes := make([]interface{}, 0)\n \
    \   oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    evenPalindromes := make([]interface{},\
    \ 0)\n    oddPalindromes := make([]interface{}, 0)\n    even\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb7ykll48_test.go:59:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            evenPalindromes = append(evenPalindromes,\
    \ i)\n        } else {\n            oddPalindromes = append(oddPalindromes, i)\n\
    \        }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_gg0ii8_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpx_gg0ii8_test.go:33:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesg8iqc2_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, 1)\n\
    \    oddPalindromes = append(oddPalindromes, 1)\n    for i := 2; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            evenPalindromes = append(evenPalindromes,\
    \ i)\n        } else {\n            oddPalindromes = append(oddPalindromes, i)\n\
    \        }\n    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj4auirj9_test.go:29:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    i := 0\n    for i <= n {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n        i++\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwm52t__d_test.go:28:12:\
    \ undefined: isPalindrome\n/tmp/tmpwm52t__d_test.go:29:16: undefined: isEven\n\
    /tmp/tmpwm52t__d_test.go:37:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, n-i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        if isPalindrome(p) {\n            result = append(result,\
    \ p)\n        }\n    }\n    for _, p := range oddPalindromes {\n        if isPalindrome(p)\
    \ {\n            result = append(result, p)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkitt5li_test.go:32:12: undefined: isPalindrome

    /tmp/tmpgkitt5li_test.go:37:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2zvony4_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkjk9e21z_test.go:29:12: undefined: isPalindrome

    /tmp/tmpkjk9e21z_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074149
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpk191jlm8_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpk191jlm8_test.go:55: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=12)]'\n  \
    \  --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpk191jlm8_test.go:"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2zvony4_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            evenPalindromes = append(evenPalindromes,\
    \ i)\n        } else {\n            oddPalindromes = append(oddPalindromes, i)\n\
    \        }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_gg0ii8_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpx_gg0ii8_test.go:33:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, even_odd_palindrome_test(n))\n\
    \    oddPalindromes = append(oddPalindromes, even_odd_palindrome_test(n))\n  \
    \  return evenPalindromes + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp46xssqvv_test.go:26:47: undefined: even_odd_palindrome_test

    /tmp/tmp46xssqvv_test.go:27:45: undefined: even_odd_palindrome_test

    /tmp/tmp46xssqvv_test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: null
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        for _, q := range oddPalindromes {\n            if\
    \ p == q {\n                evenPalindromes = append(evenPalindromes, p)\n   \
    \             oddPalindromes = append(oddPalindromes, q)\n            }\n    \
    \    }\n    }\n    for _, p := range evenPalindromes {\n        for _, q := range\
    \ oddPalindromes {\n            if p != q {\n                evenPalindromes =\
    \ append(evenPalindromes, p)\n                oddPalindromes = append(oddPalindromes,\
    \ q)\n            }\n        }\n    }\n    for _, p := range evenPalindromes {\n\
    \        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074163
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n    \
    \    oddPalindromes = append(oddPalindromes, n-i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        for _, q := range oddPalindromes {\n            if\
    \ p == q {\n                result = append(result, p)\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp1s7jl_90_test.go:61: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n        tmp1s7jl_90_test.go:61:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__3 (0.00s)\n        tmp1s7jl_90_test.go:61:\
    \ expected '[%!s(int=6) %!s(int=8)]', got '[%!s("
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromeCount\
    \ := 0\n            oddPalindromeCount := 0\n            for j := 1; j <= i/2;\
    \ j++ {\n                if isPalindrome(i-j) && isPalindrome(j+i) {\n       \
    \             evenPalindromeCount++\n                } else {\n              \
    \      oddPalindromeCount++\n                }\n            }\n            result\
    \ = append(result, evenPalindromeCount, oddPalindromeCount)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyu2gw7ar_test.go:26:12: undefined: isPalindrome

    /tmp/tmpyu2gw7ar_test.go:30:20: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9q2t4h8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            if evenPalindromes[i] == oddPalindromes[j]\
    \ {\n                evenPalindromes = append(evenPalindromes, i)\n          \
    \      oddPalindromes = append(oddPalindromes, j)\n            }\n        }\n\
    \    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp8bvaw92x_test.go:61: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n\
    \        tmp8bvaw92x_test.go:61: expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__2\
    \ (0.00s)\n        tmp8bvaw92x_test.go:61: expected '[%!s(int=1)"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2zvony4_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9q2t4h8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            evenPalindromes = append(evenPalindromes,\
    \ i)\n        } else {\n            oddPalindromes = append(oddPalindromes, i)\n\
    \        }\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_gg0ii8_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpx_gg0ii8_test.go:33:29: too many return values\n\
    \thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9q2t4h8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes := even_odd_palindrome_helper(i)\n\
    \        for _, p := range evenPalindromes {\n            result = append(result,\
    \ p)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7n58mif_test.go:26:28: undefined: even_odd_palindrome_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i+1)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, 0)\n    return evenPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpvbsu0x1__test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20)\
    \ %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27)\
    \ %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34)\
    \ %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41)\
    \ %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48)\
    \ %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55)\
    \ %!s(int=56) %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62)\
    \ %!s(int=63) %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69)\
    \ %!s(int=70) %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76)\
    \ %!s(int=77) %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83)\
    \ %!s(int=84) %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90)\
    \ %!s(int=91) %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97)\
    \ %!s(int=98) %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103)\
    \ %!s(int=104) %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109)\
    \ %!s(int=110) %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115)\
    \ %!s(int=116) %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121)\
    \ %!s(int=122) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpvbsu0x1__test.go:55: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12)]'\n   \
    \ --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpvbsu0x1__test.go:55:"
  timestamp: 1660074151
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n    }\n    evenPalindromes =\
    \ append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes, n)\n\
    \    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes = append(oddPalindromes,\
    \ n)\n    evenPalindromes = append(evenPalin\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvkd1f3rz_test.go:57:39: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes := isPalindrome(i)\n        oddPalindromes\
    \ := isPalindrome(n-i)\n        result = append(result, evenPalindromes, oddPalindromes)\n\
    \    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpinta8vnw_test.go:26:28: undefined: isPalindrome

    /tmp/tmpinta8vnw_test.go:27:27: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i+1)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddP\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5anubj8f_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes, oddPalindromes = evenPalindromeHelper(n,\
    \ evenPalindromes, oddPalindromes)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph6rr0i86_test.go:26:39: undefined: evenPalindromeHelper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesg8iqc2_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmk4bpcga_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        oddPalindromes := oddPalindromes(i)\n        evenPalindromes\
    \ := evenPalindromes(i)\n        evenPalindromes = append(evenPalindromes, i)\n\
    \        evenPalindromes = append(evenPalindromes, oddPalindromes...)\n      \
    \  evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindromes = append(evenPalindromes, i)\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ i)\n        evenPalindro\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppm7xeksf_test.go:57:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesg8iqc2_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromeCount := 0\n    oddPalindromeCount\
    \ := 0\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i) {\n        \
    \    if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n                evenPalindromeCount++\n            } else {\n          \
    \      oddPalindromes = append(oddPalindromes, i)\n                oddPalindromeCount++\n\
    \            }\n        }\n    }\n    return []interface{}{evenPalindromeCount,\
    \ oddPalindromeCount}\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkjk9e21z_test.go:29:12: undefined: isPalindrome

    /tmp/tmpkjk9e21z_test.go:30:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074149
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    i := 0\n    for i <= n {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ n-i)\n        i += 2\n    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpya0tj3p8_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)\
    \ %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26)\
    \ %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40)\
    \ %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54)\
    \ %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68)\
    \ %!s(int=70) %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82)\
    \ %!s(int=84) %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96)\
    \ %!s(int=98) %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108)\
    \ %!s(int=110) %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120)\
    \ %!s(int=122)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n\
    \        tmpya0tj3p8_test.go:55: expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12)]'\n    ---\
    \ FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpya0tj3p8_test.go:55:\
    \ expected '[%!s(int=1) %!s(int=2)]', got '[%!s(int=0) %!s(int=2)]'\n    --- FAIL:\
    \ TestEven_Odd_Palindrome/test_num__3 (0.00s)\n        tmpya0tj3p8_test.go:55:\
    \ expected '[%!s(int=6) %!s(int=8)]', got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s(int=18) %!s(int=20)\
    \ %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28) %!s(int=30) %!s(int=32) %!s(int=34)\
    \ %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42) %!s(int=44) %!s(int=46) %!s(int=48)\
    \ %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56) %!s(int=58) %!s(int=60) %!s(int=62)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__4 (0.00s)\n        tmpya0tj3p8_test.go:55:\
    \ expected '[%!s(int=5) %!s(int=6)]', got '[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6)\
    \ %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14) %!s(int=16) %!s"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    return evenPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpu2yifzqq_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpu2yifzqq_test.go:55: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=12)]'\n  \
    \  --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpu2yifzqq_test.go:"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpahwo_zg5_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        for _, q := range oddPalindromes {\n            if\
    \ p == q {\n                evenPalindromes = append(evenPalindromes, p)\n   \
    \             oddPalindromes = append(oddPalindromes, q)\n                break\n\
    \            }\n        }\n    }\n    for _, p := range evenPalindromes {\n  \
    \      if p%2 == 0 {\n            result = append(result, p)\n        }\n    }\n\
    \    for _, q := range oddPalindromes {\n        if q%2 == 0 {\n            result\
    \ = append(result, q)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmphuxbyyqg_test.go:73: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)\
    \ %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28)\
    \ %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42)\
    \ %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56)\
    \ %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70)\
    \ %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84)\
    \ %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98)\
    \ %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110)\
    \ %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122)\
    \ %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)\
    \ %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28)\
    \ %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42)\
    \ %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56)\
    \ %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %!s(int=68) %!s(int=70)\
    \ %!s(int=72) %!s(int=74) %!s(int=76) %!s(int=78) %!s(int=80) %!s(int=82) %!s(int=84)\
    \ %!s(int=86) %!s(int=88) %!s(int=90) %!s(int=92) %!s(int=94) %!s(int=96) %!s(int=98)\
    \ %!s(int=100) %!s(int=102) %!s(int=104) %!s(int=106) %!s(int=108) %!s(int=110)\
    \ %!s(int=112) %!s(int=114) %!s(int=116) %!s(int=118) %!s(int=120) %!s(int=122)\
    \ %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=10) %!s(int=12) %!s(int=14)\
    \ %!s(int=16) %!s(int=18) %!s(int=20) %!s(int=22) %!s(int=24) %!s(int=26) %!s(int=28)\
    \ %!s(int=30) %!s(int=32) %!s(int=34) %!s(int=36) %!s(int=38) %!s(int=40) %!s(int=42)\
    \ %!s(int=44) %!s(int=46) %!s(int=48) %!s(int=50) %!s(int=52) %!s(int=54) %!s(int=56)\
    \ %!s(int=58) %!s(int=60) %!s(int=62) %!s(int=64) %!s(int=66) %"
  timestamp: 1660074151
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 0; i < n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n    \
    \    oddPalindromes = append(oddPalindromes, n-i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        for _, q := range oddPalindromes {\n            if\
    \ p == q {\n                result = append(result, p)\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp1s7jl_90_test.go:61: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__1 (0.00s)\n        tmp1s7jl_90_test.go:61:\
    \ expected '[%!s(int=4) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)\
    \ %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__3 (0.00s)\n        tmp1s7jl_90_test.go:61:\
    \ expected '[%!s(int=6) %!s(int=8)]', got '[%!s("
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        if isPalindrome(p) {\n            result = append(result,\
    \ p)\n        }\n    }\n    for _, p := range oddPalindromes {\n        if isPalindrome(p)\
    \ {\n            result = append(result, p)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsshqcb9k_test.go:32:12: undefined: isPalindrome

    /tmp/tmpsshqcb9k_test.go:37:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpk191jlm8_test.go:55: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=123)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmpk191jlm8_test.go:55: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=12)]'\n  \
    \  --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        tmpk191jlm8_test.go:"
  timestamp: 1660074149
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2zvony4_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i+1)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    return evenPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmp6p0zxx0u_test.go:57: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20)\
    \ %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27)\
    \ %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34)\
    \ %!s(int=35) %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41)\
    \ %!s(int=42) %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48)\
    \ %!s(int=49) %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55)\
    \ %!s(int=56) %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62)\
    \ %!s(int=63) %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69)\
    \ %!s(int=70) %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76)\
    \ %!s(int=77) %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83)\
    \ %!s(int=84) %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90)\
    \ %!s(int=91) %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97)\
    \ %!s(int=98) %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103)\
    \ %!s(int=104) %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109)\
    \ %!s(int=110) %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115)\
    \ %!s(int=116) %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121)\
    \ %!s(int=122) %!s(int=123) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Palindrome/test_num__1\
    \ (0.00s)\n        tmp6p0zxx0u_test.go:57: expected '[%!s(int=4) %!s(int=6)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=0)]'\n\
    \    --- FAIL: TestEven_Odd_Palindrome/test_num__2 (0.00s)\n        t"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2zvony4_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesg8iqc2_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa2zvony4_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalindromes = append(oddPalindromes, 0)\n    evenPalindromes = append(evenPalindromes,\
    \ 0)\n    oddPalin\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvwie18jw_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ n-i)\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhfv41i8_test.go:30:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9q2t4h8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes := append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes := append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3yvuqxnx_test.go:26:21: no new variables on left side of :=

    /tmp/tmp3yvuqxnx_test.go:26:48: undefined: evenPalindrome

    /tmp/tmp3yvuqxnx_test.go:27:20: no new variables on left side of :=

    /tmp/tmp3yvuqxnx_test.go:27:46: undefined: oddPalindrome

    /tmp/tmp3yvuqxnx_test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            if isEven(i) {\n\
    \                evenPalindromes = append(evenPalindromes, i)\n            } else\
    \ {\n                oddPalindromes = append(oddPalindromes, i)\n            }\n\
    \        }\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    for _, p := range evenPalindromes {\n     \
    \   result = append(result, p)\n    }\n    for _, p := range oddPalindromes {\n\
    \        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkob0szes_test.go:28:12: undefined: isPalindrome

    /tmp/tmpkob0szes_test.go:29:16: undefined: isEven

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n    }\n    for i := 1; i <= n; i++ {\n        if\
    \ isPalindrome(i) {\n            evenPalindromes = append(evenPalindromes, i)\n\
    \        }\n    }\n    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2v2qft4y_test.go:30:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    evenPalindromes = append(evenPalindromes, evenPalindrome(n))\n\
    \    oddPalindromes = append(oddPalindromes, oddPalindrome(n))\n    return evenPalindromes\
    \ + oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk5bfgeb__test.go:26:47: undefined: evenPalindrome

    /tmp/tmpk5bfgeb__test.go:27:45: undefined: oddPalindrome

    /tmp/tmpk5bfgeb__test.go:28:12: invalid operation: operator + not defined on evenPalindromes
    (variable of type []interface{})

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9q2t4h8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes := even_odd_palindrome(i)\n      \
    \  for _, v := range evenPalindromes {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0380\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x5203c8?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\nruntime.(*mcentral).uncacheSpan(0x624400?,\
    \ 0x2af8ad3662a0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mcentral.go:194\
    \ +0xd5 fp=0xc0201e0390 sp=0xc0201e0388 pc=0x4163b5\nruntime.(*mcache).refill(0x2af883bfb108,\
    \ 0x8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mcache.go:158 +0x92\
    \ fp=0xc0201e03c8 sp=0xc0201e0390 pc=0x4158d2\nruntime.(*mcache).nextFree(0x2af883bfb108,\
    \ 0x8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:886 +0x85\
    \ fp=0xc0201e0410 sp=0xc0201e03c8 pc=0x40c465\nruntime.mallocgc(0x20, 0x501340,\
    \ 0x1)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1085 +0x4e5\
    \ fp=0xc0201e0488 sp=0xc0201e0410 pc=0x40cae5\nruntime.makeslice(0x20?, 0x20?,\
    \ 0x0?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:103 +0x52\
    \ fp=0xc0201e04b0 sp=0xc0201e0488 pc=0x449bb2\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmp0ikan6pl_test.go:24 +0x45 fp=0xc0201e0548 sp=0xc0201e04b0 pc=0x4ef765\n\
    command-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmp0ikan6pl_test.go:26\
    \ +0x90 fp=0xc0201e05e0 sp=0xc0201e0548 pc=0x4ef7b0\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmp0ikan6pl_test.go:26 +0x90 fp=0xc0201e0678 sp=0xc0201e05e0 pc=0x4ef7b0\n\
    command-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmp0ikan6pl_test.go:26\
    \ +0x90 fp=0xc0201e0710 sp=0xc0201e0678 pc=0x4ef7b0\ncommand-line-arguments_test.even_odd_palindrome(0x1)\n\
    \t/tmp/tmp0ikan6pl_test.go:26 +0x90 fp=0xc0201e07a8 sp=0xc0201e0710 pc=0x4ef7b0\n\
    command-line-arguments_test.even_odd_palindrome(0x1)\n\t/tmp/tmp0ikan6pl_test.go:26\
    \ +0x90 fp=0xc0201e0840 sp=0xc020"
  timestamp: 1660074152
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n    }\n    for _, v := range\
    \ evenPalindromes {\n        if isPalindrome(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    for _, v := range oddPalindromes {\n        if isPalindrome(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4w1w0ezs_test.go:32:12: undefined: isPalindrome

    /tmp/tmp4w1w0ezs_test.go:37:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9q2t4h8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        if isPalindrome(p) {\n            result = append(result, p)\n  \
    \      }\n    }\n    for _, p := range oddPalindromes {\n        if isPalindrome(p)\
    \ {\n            result = append(result, p)\n        }\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0cktd5w9_test.go:28:12: undefined: isPalindrome

    /tmp/tmp0cktd5w9_test.go:35:12: undefined: isPalindrome

    /tmp/tmp0cktd5w9_test.go:40:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        if isPalindrome(i)\
    \ {\n            if isEven(i) {\n                evenPalindromes = append(evenPalindromes,\
    \ i)\n            } else {\n                oddPalindromes = append(oddPalindromes,\
    \ i)\n            }\n        }\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhd3vycz_test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmpuhd3vycz_test.go:28:16: undefined: isEven\n\
    /tmp/tmpuhd3vycz_test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        result = append(result, p)\n    }\n    for _, p := range oddPalindromes\
    \ {\n        result = append(result, p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmk4bpcga_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074150
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpesg8iqc2_test.go:26:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, 2)\n    oddPalindromes := make([]int, 0, 2)\n    for i :=\
    \ 1; i <= n; i++ {\n        evenPalindromes = append(evenPalindromes, i)\n   \
    \     oddPalindromes = append(oddPalindromes, i)\n    }\n    for _, p := range\
    \ evenPalindromes {\n        for _, q := range oddPalindromes {\n            if\
    \ p == q {\n                evenPalindromes = append(evenPalindromes, p)\n   \
    \             oddPalindromes = append(oddPalindromes, q)\n                break\n\
    \            }\n        }\n    }\n    for _, p := range evenPalindromes {\n  \
    \      for _, q := range oddPalindromes {\n            if p != q {\n         \
    \       evenPalindromes = append(evenPalindromes, p)\n                oddPalindromes\
    \ = append(oddPalindromes, q)\n                break\n            }\n        }\n\
    \    }\n    for _, p := range evenPalindromes {\n        result = append(result,\
    \ p)\n    }\n    for _, p := range oddPalindromes {\n        result = append(result,\
    \ p)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T)\
    \ {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpva9op_56_test.go:78: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20)\
    \ %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27)\
    \ %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 0; i < n; i++ {\n\
    \        evenPalindromes = append(evenPalindromes, i)\n        oddPalindromes\
    \ = append(oddPalindromes, n-i)\n    }\n    return evenPalindromes, oddPalindromes\n\
    }\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate := even_odd_palindrome\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(123), expected: []interface{}{8,\
    \ 13} },\n     { actual: candidate(12), expected: []interface{}{4, 6} },\n   \
    \  { actual: candidate(3), expected: []interface{}{1, 2} },\n     { actual: candidate(63),\
    \ expected: []interface{}{6, 8} },\n     { actual: candidate(25), expected: []interface{}{5,\
    \ 6} },\n     { actual: candidate(19), expected: []interface{}{4, 6} },\n    \
    \ { actual: candidate(9), expected: []interface{}{4, 5} },\n     { actual: candidate(1),\
    \ expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_9myky6t_test.go:30:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    for i := 1; i <= n/2; i++ {\n        if evenPalindromes[i-1]\
    \ == oddPalindromes[i-1] {\n            evenPalindromes = append(evenPalindromes,\
    \ i)\n            oddPalindromes = append(oddPalindromes, i)\n        }\n    }\n\
    \    return evenPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n\
    \  candidate := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Palindrome (0.00s)\n    --- FAIL: TestEven_Odd_Palindrome/test_num__0\
    \ (0.00s)\n        tmpteiieatv_test.go:59: expected '[%!s(int=8) %!s(int=13)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)\
    \ %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21)\
    \ %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28)\
    \ %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35)\
    \ %!s(int=36) %!s(int=37) %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42)\
    \ %!s(int=43) %!s(int=44) %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49)\
    \ %!s(int=50) %!s(int=51) %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56)\
    \ %!s(int=57) %!s(int=58) %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63)\
    \ %!s(int=64) %!s(int=65) %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70)\
    \ %!s(int=71) %!s(int=72) %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77)\
    \ %!s(int=78) %!s(int=79) %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84)\
    \ %!s(int=85) %!s(int=86) %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91)\
    \ %!s(int=92) %!s(int=93) %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98)\
    \ %!s(int=99) %!s(int=100) %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104)\
    \ %!s(int=105) %!s(int=106) %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110)\
    \ %!s(int=111) %!s(int=112) %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116)\
    \ %!s(int=117) %!s(int=118) %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122)\
    \ %!s(int=123) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13)\
    \ %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20)\
    \ %!s(int=21) %!s(int=22) %!s(int=23) %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27)\
    \ %!s(int=28) %!s(int=29) %!s(int=30) %!s(int=31) %!s(int=32) %!s(int"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        oddPalindromes\
    \ = append(oddPalindromes, i)\n        evenPalindromes = append(evenPalindromes,\
    \ n-i)\n    }\n    return evenPalindromes, oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t\
    \ *testing.T) {\n  candidate := even_odd_palindrome\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(123), expected: []interface{}{8, 13} },\n     { actual:\
    \ candidate(12), expected: []interface{}{4, 6} },\n     { actual: candidate(3),\
    \ expected: []interface{}{1, 2} },\n     { actual: candidate(63), expected: []interface{}{6,\
    \ 8} },\n     { actual: candidate(25), expected: []interface{}{5, 6} },\n    \
    \ { actual: candidate(19), expected: []interface{}{4, 6} },\n     { actual: candidate(9),\
    \ expected: []interface{}{4, 5} },\n     { actual: candidate(1), expected: []interface{}{0,\
    \ 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhfv41i8_test.go:30:29:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 1
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0)\n    oddPalindromes\
    \ := make([]interface{}, 0)\n    for i := 1; i <= n; i++ {\n        evenPalindromes\
    \ = append(evenPalindromes, i)\n        oddPalindromes = append(oddPalindromes,\
    \ i)\n    }\n    evenPalindromes = append(evenPalindromes, n)\n    oddPalindromes\
    \ = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes, n)\n\
    \    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindromes = append(oddPalindromes, n)\n    evenPalindromes = append(evenPalindromes,\
    \ n)\n    oddPalindrome\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb9q2t4h8_test.go:58:6: expected ''('', found TestEven_Odd_Palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074147
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    result := make([]interface{}, 0, 2)\n    evenPalindromes\
    \ := make([]int, 0, n)\n    oddPalindromes := make([]int, 0, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        if isPalindrome(i) {\n            evenPalindromes\
    \ = append(evenPalindromes, i)\n        } else {\n            oddPalindromes =\
    \ append(oddPalindromes, i)\n        }\n    }\n    for _, p := range evenPalindromes\
    \ {\n        for _, q := range oddPalindromes {\n            if p == q {\n   \
    \             result = append(result, p)\n            }\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03ird2ie_test.go:28:12: undefined: isPalindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074151
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
- exit_code: 2
  program: "package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given a positive integer n, return a tuple that has the number\
    \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
    // Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
    // Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n\
    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
    \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple\
    \ has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n\
    \ int) []interface{} {\n    evenPalindromes := make([]interface{}, 0, n)\n   \
    \ oddPalindromes := make([]interface{}, 0, n)\n    for i := 1; i <= n; i++ {\n\
    \        if isPalindrome(i) {\n            if isEven(i) {\n                evenPalindromes\
    \ = append(evenPalindromes, i)\n            } else {\n                oddPalindromes\
    \ = append(oddPalindromes, i)\n            }\n        }\n    }\n    return evenPalindromes,\
    \ oddPalindromes\n}\n\nfunc TestEven_Odd_Palindrome(t *testing.T) {\n  candidate\
    \ := even_odd_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(123),\
    \ expected: []interface{}{8, 13} },\n     { actual: candidate(12), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(3), expected: []interface{}{1, 2} },\n     {\
    \ actual: candidate(63), expected: []interface{}{6, 8} },\n     { actual: candidate(25),\
    \ expected: []interface{}{5, 6} },\n     { actual: candidate(19), expected: []interface{}{4,\
    \ 6} },\n     { actual: candidate(9), expected: []interface{}{4, 5} },\n     {\
    \ actual: candidate(1), expected: []interface{}{0, 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sokv6g__test.go:27:12:\
    \ undefined: isPalindrome\n/tmp/tmp_sokv6g__test.go:28:16: undefined: isEven\n\
    /tmp/tmp_sokv6g__test.go:35:29: too many return values\n\thave ([]interface{},\
    \ []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074148
