name: HumanEval_88_sort_array
language: go_test.go
prompt: "package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given an array of non-negative integers, return a copy of the given array after\
  \ sorting,\n// you will sort the given array in ascending order if the sum( first\
  \ index value, last index value) is odd,\n// or sort it in descending order if the\
  \ sum( first index value, last index value) is even.\n// Note:\n// * don't change\
  \ the given array.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n// >>>\
  \ sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n\
  // []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n// []int{6,\
  \ 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n"
tests: "func TestSort_Array(t *testing.T) {\n  candidate := sort_array\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual:\
  \ candidate([]int{5}), expected: []int{5} },\n     { actual: candidate([]int{2,\
  \ 4, 3, 0, 1, 5}), expected: []int{0, 1, 2, 3, 4, 5} },\n     { actual: candidate([]int{2,\
  \ 4, 3, 0, 1, 5, 6}), expected: []int{6, 5, 4, 3, 2, 1, 0} },\n     { actual: candidate([]int{2,\
  \ 1}), expected: []int{1, 2} },\n     { actual: candidate([]int{15, 42, 87, 32,\
  \ 11, 0}), expected: []int{0, 11, 15, 32, 42, 87} },\n     { actual: candidate([]int{21,\
  \ 14, 23, 11}), expected: []int{23, 21, 14, 11} },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    sum := 0\n    for _, value := range array {\n        sum += value\n\
    \    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n", "    // write your code here\n    sort.Ints(array)\n    sum := 0\n    for\
    \ _, v := range array {\n        sum += v\n    }\n    if sum%2 == 1 {\n      \
    \  sort.Sort(sort.Reverse(array))\n    } else {\n        sort.Sort(sort.IntSlice(array))\n\
    \    }\n    return array\n}\n", "    if len(array) <= 1 {\n        return array\n\
    \    }\n    sum := 0\n    for _, value := range array {\n        sum += value\n\
    \    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n", "    // write your code here\n    sum := 0\n    for _, value := range array\
    \ {\n        sum += value\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n", "    var result []int\n    var sum int\n    for _, v := range array {\n\
    \        sum += v\n    }\n    if sum%2 == 1 {\n        for _, v := range array\
    \ {\n            result = append(result, v)\n        }\n    } else {\n       \
    \ for _, v := range array {\n            result = append(result, v)\n        }\n\
    \        for i := len(array) - 1; i > 0; i-- {\n            sum += array[i]\n\
    \            if sum%2 == 1 {\n                for _, v := range array[:i] {\n\
    \                    result = append(result, v)\n                }\n         \
    \       break\n            }\n        }\n    }\n    return result\n}\n", "   \
    \ sum := 0\n    for _, v := range array {\n        sum += v\n    }\n    if sum%2\
    \ == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    } else {\n\
    \        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n}\n", "   \
    \ sum := 0\n    for _, v := range array {\n        sum += v\n    }\n    if sum%2\
    \ != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    } else {\n\
    \        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n}\n", "   \
    \ // Your code here\n    sum := 0\n    for _, value := range array {\n       \
    \ sum += value\n    }\n    if sum%2 != 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n", "    // write your code here\n    sum := 0\n    for _, v := range array\
    \ {\n        sum += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n", "    if len(array) <= 1 {\n        return array\n    }\n    sum := 0\n \
    \   for _, v := range array {\n        sum += v\n    }\n    if sum%2 != 0 {\n\
    \        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    } else {\n       \
    \ sort.Sort(sort.IntSlice(array))\n    }\n    return array\n}\n", "    // write\
    \ your code here\n    sum := 0\n    for _, v := range array {\n        sum +=\
    \ v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(array))\n    }\
    \ else {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n    }\n    return\
    \ array\n}\n", "    result := make([]int, len(array))\n    sum := 0\n    for _,\
    \ value := range array {\n        sum += value\n    }\n    if sum%2 == 0 {\n \
    \       for i := range result {\n            result[i] = array[len(array)-1-i]\n\
    \        }\n    } else {\n        for i := range result {\n            result[i]\
    \ = array[len(array)-1-i-1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result []int\n    var sum int\n    for _, v := range array {\n        sum +=\
    \ v\n    }\n    if sum%2 != 0 {\n        result = append(result, array...)\n \
    \   } else {\n        result = append(result, array...)\n        result = append(result,\
    \ array...)\n    }\n    return result\n}\n", "    if len(array) == 0 {\n     \
    \   return array\n    }\n    sum := array[0]\n    for _, v := range array[1:]\
    \ {\n        sum += v\n    }\n    if sum%2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n", "    result := make([]int, len(array))\n    sum := 0\n    for _, v := range\
    \ array {\n        sum += v\n    }\n    if sum%2 == 0 {\n        for i := 0; i\
    \ < len(array); i++ {\n            j := i\n            for ; j < len(array) &&\
    \ sum > 0; j++ {\n                sum += array[j]\n            }\n           \
    \ result[i] = array[j]\n        }\n    } else {\n        for i := 0; i < len(array);\
    \ i++ {\n            j := len(array) - i - 1\n            for ; j >=0; j-- {\n\
    \                sum += array[j]\n            }\n            result[i] = array[j]\n\
    \        }\n    }\n    return result\n}\n", "    // write your code here\n   \
    \ sum := 0\n    for _, value := range array {\n        sum += value\n    }\n \
    \   if sum%2 == 0 {\n        sort.Slice(array, func(i, j int) bool {\n       \
    \     return array[i] > array[j]\n        })\n    } else {\n        sort.Slice(array,\
    \ func(i, j int) bool {\n            return array[i] < array[j]\n        })\n\
    \    }\n    return array\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,go\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n", "   \
    \ // write your code here\n    sort.Ints(array)\n    return array\n}\n", "   \
    \ var result []int\n    var sum int\n    for _, v := range array {\n        sum\
    \ += v\n    }\n    if sum%2 != 0 {\n        result = append(result, array...)\n\
    \    } else {\n        result = append(result, array[len(array)-1]...)\n    }\n\
    \    for _, v := range result {\n        array = append(array, v)\n    }\n   \
    \ return array\n}\n", "    // write your code here\n    sort.Ints(array)\n   \
    \ return array\n}\n", "    sum := 0\n    for _, v := range array {\n        sum\
    \ += v\n    }\n    if sum%2 == 1 {\n        sort.Sort(sort.Reverse(sort.IntSlice(array)))\n\
    \    } else {\n        sort.Sort(sort.IntSlice(array))\n    }\n    return array\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
