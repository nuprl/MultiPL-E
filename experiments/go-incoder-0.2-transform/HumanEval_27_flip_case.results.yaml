language: go_test.go
name: HumanEval_27_flip_case
results:
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char - 'A'})\n        } else {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff80esro_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpff80esro_test.go:15:49: cannot use char - ''A'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpff80esro_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            result = 'A'\n        } else {\n\
    \            result = letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp61hcbm4s_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp61hcbm4s_test.go:17:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            result = 'A'\n        } else if letter\
    \ == 'b' {\n            result = 'B'\n        } else if letter == 'c' {\n    \
    \        result = 'C'\n        } else if letter == 'd' {\n            result =\
    \ 'D'\n        } else if letter == 'e' {\n            result = 'E'\n        }\
    \ else if letter == 'f' {\n            result = 'F'\n        } else if letter\
    \ == 'g' {\n            result = 'G'\n        } else if letter == 'h' {\n    \
    \        result = 'H'\n        } else if letter == 'i' {\n            result =\
    \ 'I'\n        } else if letter == 'j' {\n            result = 'J'\n        }\
    \ else if letter == 'k' {\n            result = 'K'\n        } else if letter\
    \ == 'l' {\n            result = 'L'\n        } else if letter == 'm' {\n    \
    \        result = 'M'\n        } else if letter == 'n' {\n            result =\
    \ 'N'\n        } else if letter == 'o' {\n            result = 'O'\n        }\
    \ else if letter == 'p' {\n            result = 'P'\n        } else if letter\
    \ == 'q' {\n            result = 'Q'\n        } else if letter == 'r' {\n    \
    \        result = 'R'\n        } else if letter == 's' {\n            result =\
    \ 'S'\n        } else if letter == 't' {\n            result = 'T'\n        }\
    \ else if letter == 'u' {\n            result = 'U'\n        } else if letter\
    \ == 'v' {\n            result = 'V'\n        } else if letter == 'w' {\n    \
    \        result = 'W'\n        } else if letter == 'x' {\n            result =\
    \ 'X'\n        } else if letter == 'y' {\n            result = 'Y'\n        }\
    \ else if letter == 'z' {\n            result = 'Z'\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc256xeau_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:17:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:19:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:21:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:23:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:25:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:27:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:29:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:31:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:33:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmpc256xeau_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa5ubfo9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char +\
    \ 32, char})\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfexvdr99_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpfexvdr99_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpfexvdr99_test.go:17:37: cannot use char + 32 (value of type rune) as type
    byte in array or slice literal

    /tmp/tmpfexvdr99_test.go:17:48: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8o7wtpqn_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmp8o7wtpqn_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            result = 'A'\n        } else if letter\
    \ == 'A' {\n            result = 'a'\n        } else {\n            result = letter\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv3mvvh0u_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmpv3mvvh0u_test.go:17:22: cannot use ''a'' (untyped rune constant 97) as
    string value in assignment

    /tmp/tmpv3mvvh0u_test.go:19:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune{char\
    \ - 32, char})\n        } else {\n            result += string([]rune{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp8tw9he9s_test.go:38: expected 'hELLO!', got 'HEeLlLlOo!'\n\
    \    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp8tw9he9s_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THhEeSsEe VvIiOoLlEeNnTt\
    \ DdEeLlIiGgHhTtSs HhAaVvEe VvIiOoLlEeNnTt EeNnDdSs'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa5ubfo9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char))\
    \ - 'a'\n        } else {\n            result += string([]rune(char)) + ('a' -\
    \ 'A')\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9k353p49_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp9k353p49_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa5ubfo9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char))\
    \ - 'a'\n        } else {\n            result += string([]rune(char)) + ('A' -\
    \ 'a')\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgcp8pl9k_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmpgcp8pl9k_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char))\
    \ - 'a'\n        } else {\n            result += string([]rune(char)) + ('a' -\
    \ 'A')\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9k353p49_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp9k353p49_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq3ytgu0_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == strings.ToLower(letter) {\n            result += strings.ToUpper(letter)\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7xuw_lpy_test.go:14:22: undefined: strings

    /tmp/tmp7xuw_lpy_test.go:15:23: undefined: strings

    /tmp/tmp7xuw_lpy_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq3ytgu0_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var myStringLower string\n    var myStringUpper string\n\
    \    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n\
    \            myStringLower += char\n        } else {\n            myStringUpper\
    \ += char\n        }\n    }\n    return myStringUpper + myStringLower\n}\n\nfunc\
    \ TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprq9wqpsk_test.go:16:13: invalid operation: myStringLower += char (mismatched
    types string and rune)

    /tmp/tmprq9wqpsk_test.go:18:13: invalid operation: myStringUpper += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq3ytgu0_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char))\
    \ - 'a' + 'A'\n        } else {\n            result += string([]rune(char)) -\
    \ 'A' + 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6805e4de_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp6805e4de_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa5ubfo9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char))\
    \ - 'a' + 'A'\n        } else {\n            result += string([]rune(char)) -\
    \ 'A' + 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6805e4de_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp6805e4de_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq3ytgu0_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += string(char)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpyjuyc9f1_test.go:38: expected 'hELLO!', got 'HELLO!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpyjuyc9f1_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += string(char)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpyjuyc9f1_test.go:38: expected 'hELLO!', got 'HELLO!'\n \
    \   --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpyjuyc9f1_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'THESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 32, char + 32})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprovfomb2_test.go:15:37: cannot use char - 32 (value of type rune) as type
    byte in array or slice literal

    /tmp/tmprovfomb2_test.go:15:48: cannot use char + 32 (value of type rune) as type
    byte in array or slice literal

    /tmp/tmprovfomb2_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8o7wtpqn_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmp8o7wtpqn_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char + 'A' - 'a')\n        } else {\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5yopum0y_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char)-[]rune('a'))\n\
    \        } else {\n            result += string([]rune(char)+'A'-'a')\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx2on89wr_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmpx2on89wr_test.go:15:50: cannot convert ''a'' (untyped rune constant 97)
    to type []rune

    /tmp/tmpx2on89wr_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        switch char {\n        case 'a':\n            result += \"A\"\n     \
    \   case 'b':\n            result += \"B\"\n        case 'c':\n            result\
    \ += \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n\
    \            result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        default:\n            result += char\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxi5q5zu3_test.go:68:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result = result + string(char\
    \ - 'a') + string(char - 'A')\n        } else {\n            result = result +\
    \ string(char)\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmp8iihw1l4_test.go:38: expected 'hELLO!', got 'H\x04$\v+\v\
    +\x0E.!'\n    --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmp8iihw1l4_test.go:38:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'T\a'\x04$\x122\x04\
    $ \x155\b(\x0E.\v+\x04$\n-\x133 \x03#\x04$\v+\b(\x06&\a'\x133\x122 \a'\0 \x15\
    5\x04$ \x155\b(\x0E.\v+\x04$\n-\x133 \x04$\n-\x03#\x122'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq3ytgu0_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        }\n    }\n    return result\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpmblxjqhe_test.go:86: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpmblxjqhe_test.go:86:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa5ubfo9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result = result + string(char\
    \ - 'a') + string(char - 'A')\n        } else {\n            result = result +\
    \ char\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg4977udw_test.go:17:22: invalid operation: result + char (mismatched types
    string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char))\
    \ - 'a'\n        } else {\n            result += string([]rune(char)) + ('a' -\
    \ 'A')\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9k353p49_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp9k353p49_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq3ytgu0_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]rune(char))\
    \ - 'a' + 'A'\n        } else {\n            result += string([]rune(char)) -\
    \ 'A' + 'a'\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6805e4de_test.go:15:37: cannot convert char (variable of type rune) to
    type []rune

    /tmp/tmp6805e4de_test.go:17:37: cannot convert char (variable of type rune) to
    type []rune

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char - 'A'})\n        } else {\n            result += char\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpff80esro_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpff80esro_test.go:15:49: cannot use char - ''A'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpff80esro_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073291
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        switch char {\n        case 'a':\n            result += \"A\"\n     \
    \   case 'b':\n            result += \"B\"\n        case 'c':\n            result\
    \ += \"C\"\n        case 'd':\n            result += \"D\"\n        case 'e':\n\
    \            result += \"E\"\n        case 'f':\n            result += \"F\"\n\
    \        case 'g':\n            result += \"G\"\n        case 'h':\n         \
    \   result += \"H\"\n        case 'i':\n            result += \"I\"\n        case\
    \ 'j':\n            result += \"J\"\n        case 'k':\n            result +=\
    \ \"K\"\n        case 'l':\n            result += \"L\"\n        case 'm':\n \
    \           result += \"M\"\n        case 'n':\n            result += \"N\"\n\
    \        case 'o':\n            result += \"O\"\n        case 'p':\n         \
    \   result += \"P\"\n        case 'q':\n            result += \"Q\"\n        case\
    \ 'r':\n            result += \"R\"\n        case 's':\n            result +=\
    \ \"S\"\n        case 't':\n            result += \"T\"\n        case 'u':\n \
    \           result += \"U\"\n        case 'v':\n            result += \"V\"\n\
    \        case 'w':\n            result += \"W\"\n        case 'x':\n         \
    \   result += \"X\"\n        case 'y':\n            result += \"Y\"\n        case\
    \ 'z':\n            result += \"Z\"\n        }\n    }\n    return result\n}\n\n\
    func TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpn2hl8u73_test.go:87: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpn2hl8u73_test.go:87:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073348
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa5ubfo9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa5ubfo9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        }\n    }\n    return result\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpmblxjqhe_test.go:86: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpmblxjqhe_test.go:86:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            result = 'A'\n        } else if letter\
    \ == 'b' {\n            result = 'B'\n        } else if letter == 'c' {\n    \
    \        result = 'C'\n        } else if letter == 'd' {\n            result =\
    \ 'D'\n        } else if letter == 'e' {\n            result = 'E'\n        }\
    \ else if letter == 'f' {\n            result = 'F'\n        } else if letter\
    \ == 'g' {\n            result = 'G'\n        } else if letter == 'h' {\n    \
    \        result = 'H'\n        } else if letter == 'i' {\n            result =\
    \ 'I'\n        } else if letter == 'j' {\n            result = 'J'\n        }\
    \ else if letter == 'k' {\n            result = 'K'\n        } else if letter\
    \ == 'l' {\n            result = 'L'\n        } else if letter == 'm' {\n    \
    \        result = 'M'\n        } else if letter == 'n' {\n            result =\
    \ 'N'\n        } else if letter == 'o' {\n            result = 'O'\n        }\
    \ else if letter == 'p' {\n            result = 'P'\n        } else if letter\
    \ == 'q' {\n            result = 'Q'\n        } else if letter == 'r' {\n    \
    \        result = 'R'\n        } else if letter == 's' {\n            result =\
    \ 'S'\n        } else if letter == 't' {\n            result = 'T'\n        }\
    \ else if letter == 'u' {\n            result = 'U'\n        } else if letter\
    \ == 'v' {\n            result = 'V'\n        } else if letter == 'w' {\n    \
    \        result = 'W'\n        } else if letter == 'x' {\n            result =\
    \ 'X'\n        } else if letter == 'y' {\n            result = 'Y'\n        }\
    \ else if letter == 'z' {\n            result = 'Z'\n        } else {\n      \
    \      result = letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5zlqim59_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:17:22: cannot use ''B'' (untyped rune constant 66) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:19:22: cannot use ''C'' (untyped rune constant 67) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:21:22: cannot use ''D'' (untyped rune constant 68) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:23:22: cannot use ''E'' (untyped rune constant 69) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:25:22: cannot use ''F'' (untyped rune constant 70) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:27:22: cannot use ''G'' (untyped rune constant 71) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:29:22: cannot use ''H'' (untyped rune constant 72) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:31:22: cannot use ''I'' (untyped rune constant 73) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:33:22: cannot use ''J'' (untyped rune constant 74) as
    string value in assignment

    /tmp/tmp5zlqim59_test.go:33:22: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq3ytgu0_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter.toUpper()\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp845s4tix_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmp845s4tix_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmp845s4tix_test.go:17:30: letter.toUpper undefined (type rune has no field
    or method toUpper)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfa5ubfo9_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var newString string\n    for _, char := range myString\
    \ {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char\
    \ - 'a' + 'A')\n        } else {\n            newString += char\n        }\n \
    \   }\n    return newString\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate\
    \ := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n\
    \     { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual:\
    \ candidate(\"These violent delights have violent ends\"), expected: \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8xbdwsh7_test.go:17:13: invalid operation: newString += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 1
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        }\n    }\n    return result\n}\n\
    \nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"\
    Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"These violent delights\
    \ have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFlip_Case (0.00s)\n    --- FAIL: TestFlip_Case/test_num__1\
    \ (0.00s)\n        tmpmblxjqhe_test.go:86: expected 'hELLO!', got 'ELLO'\n   \
    \ --- FAIL: TestFlip_Case/test_num__2 (0.00s)\n        tmpmblxjqhe_test.go:86:\
    \ expected 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS', got 'HESEVIOLENTDELIGHTSHAVEVIOLENTENDS'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, letter := range myString\
    \ {\n        if letter == 'a' {\n            result = 'A'\n        } else {\n\
    \            result = letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t\
    \ *testing.T) {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected:\
    \ \"hELLO!\" },\n     { actual: candidate(\"These violent delights have violent\
    \ ends\"), expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp61hcbm4s_test.go:15:22: cannot use ''A'' (untyped rune constant 65) as
    string value in assignment

    /tmp/tmp61hcbm4s_test.go:17:22: cannot use letter (variable of type rune) as type
    string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string([]byte{char\
    \ - 'a', char})\n        } else {\n            result += string([]byte{char})\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqr_serz7_test.go:15:37: cannot use char - ''a'' (value of type rune) as
    type byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:15:49: cannot use char (variable of type rune) as type
    byte in array or slice literal

    /tmp/tmpqr_serz7_test.go:17:37: cannot use char (variable of type rune) as type
    byte in array or slice literal

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a') + string(char - 'A')\n        } else {\n            result += char\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n\
    \  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi02mw1vd_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var myString2 string\n    for i := 0; i < len(myString);\
    \ i++ {\n        if myString[i] >= 'a' && myString[i] <= 'z' {\n            myString2\
    \ += myString[i] - 'a'\n        } else {\n            myString2 += myString[i]\n\
    \        }\n    }\n    return myString2\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnr3o7j0a_test.go:15:13: invalid operation: myString2 += myString[i] -
    ''a'' (mismatched types string and byte)

    /tmp/tmpnr3o7j0a_test.go:17:13: invalid operation: myString2 += myString[i] (mismatched
    types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073347
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp73gfgv02_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    var result string\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += string(char -\
    \ 'a' + 'A')\n        } else {\n            result += char\n        }\n    }\n\
    \    return result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaq3ytgu0_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == letter.toUpper() {\n            result += letter.toLower()\n\
    \        } else {\n            result += letter\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvza33xhs_test.go:14:29: letter.toUpper undefined (type rune has no field
    or method toUpper)

    /tmp/tmpvza33xhs_test.go:15:30: letter.toLower undefined (type rune has no field
    or method toLower)

    /tmp/tmpvza33xhs_test.go:17:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, letter := range myString {\n\
    \        if letter == 'a' {\n            result += \"A\"\n        } else if letter\
    \ == 'b' {\n            result += \"B\"\n        } else if letter == 'c' {\n \
    \           result += \"C\"\n        } else if letter == 'd' {\n            result\
    \ += \"D\"\n        } else if letter == 'e' {\n            result += \"E\"\n \
    \       } else if letter == 'f' {\n            result += \"F\"\n        } else\
    \ if letter == 'g' {\n            result += \"G\"\n        } else if letter ==\
    \ 'h' {\n            result += \"H\"\n        } else if letter == 'i' {\n    \
    \        result += \"I\"\n        } else if letter == 'j' {\n            result\
    \ += \"J\"\n        } else if letter == 'k' {\n            result += \"K\"\n \
    \       } else if letter == 'l' {\n            result += \"L\"\n        } else\
    \ if letter == 'm' {\n            result += \"M\"\n        } else if letter ==\
    \ 'n' {\n            result += \"N\"\n        } else if letter == 'o' {\n    \
    \        result += \"O\"\n        } else if letter == 'p' {\n            result\
    \ += \"P\"\n        } else if letter == 'q' {\n            result += \"Q\"\n \
    \       } else if letter == 'r' {\n            result += \"R\"\n        } else\
    \ if letter == 's' {\n            result += \"S\"\n        } else if letter ==\
    \ 't' {\n            result += \"T\"\n        } else if letter == 'u' {\n    \
    \        result += \"U\"\n        } else if letter == 'v' {\n            result\
    \ += \"V\"\n        } else if letter == 'w' {\n            result += \"W\"\n \
    \       } else if letter == 'x' {\n            result += \"X\"\n        } else\
    \ if letter == 'y' {\n            result += \"Y\"\n        } else if letter ==\
    \ 'z' {\n            result += \"Z\"\n        } else {\n            result +=\
    \ letter\n        }\n    }\n    return result\n}\n\nfunc TestFlip_Case(t *testing.T)\
    \ {\n  candidate := flip_case\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    \"), expected: \"\" },\n     { actual: candidate(\"Hello!\"), expected: \"hELLO!\"\
    \ },\n     { actual: candidate(\"These violent delights have violent ends\"),\
    \ expected: \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp60yyeo72_test.go:67:13: invalid operation: result += letter (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
- exit_code: 2
  program: "package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // For a given string, flip lowercase characters to uppercase and uppercase to\
    \ lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString\
    \ string) string {\n    result := \"\"\n    for _, char := range myString {\n\
    \        if char >= 'a' && char <= 'z' {\n            result += char + ('A' -\
    \ 'a')\n        } else {\n            result += char\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFlip_Case(t *testing.T) {\n  candidate := flip_case\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n    \
    \ { actual: candidate(\"Hello!\"), expected: \"hELLO!\" },\n     { actual: candidate(\"\
    These violent delights have violent ends\"), expected: \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpudhl1a48_test.go:15:13: invalid operation: result += char + (''A'' - ''a'')
    (mismatched types string and rune)

    /tmp/tmpudhl1a48_test.go:17:13: invalid operation: result += char (mismatched
    types string and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073290
