language: go_test.go
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[len(gradesSorted)-1]]\
    \ = 0.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n\
    \    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n  \
    \  gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0]\
    \ += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -=\
    \ 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n\
    \    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n  \
    \  gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n\
    \    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n  \
    \  gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0]\
    \ -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] +=\
    \ 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n\
    \    gradesSorted[len(gradesSorted)-1] += 1.0\n    gradesSorted[0] += 1.0\n  \
    \  gradesSorted[len(gradesSorted)-1] -= 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1]\
    \ += 1.0\n    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 1.0\n    gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += 1.0\n\
    \    gradesSorted[0] += 1.0\n    gradesSorted[len(gradesSorted)-1] -= 1.0\n  \
    \  gradesSorted[0] -= 1.0\n    gradesSorted[len(gradesSorted)-1] += \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnwywsppe_test.go:79:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075480
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpk08bvp9z_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075354
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = letterGrades[i-1]\n\
    \        if grades[i] > 3.0 {\n            letterGrades[i] = letterGrades[i] +\
    \ \"+\"\n        } else if grades[i] < 3.0 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 3.7 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 3.7 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 4.0 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 4.0\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 4.3 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n \
    \       } else if grades[i] > 4.3 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 4.7 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 4.7 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 5.0 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 5.0\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 5.3 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n \
    \       } else if grades[i] > 5.3 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 5.7 {\n            letterGrades[i] =\
    \ letterGrades[i] + \"+\"\n        } else if grades[i] > 5.7 {\n            letterGrades[i]\
    \ = letterGrades[i] + \"-\"\n        } else if grades[i] < 6.0 {\n           \
    \ letterGrades[i] = letterGrades[i] + \"+\"\n        } else if grades[i] > 6.0\
    \ {\n            letterGrades[i] = letterGrades[i] + \"-\"\n        } else if\
    \ grades[i] < 6.3 {\n            letterGrades[i] = letterGrades[i] + \"+\"\n \
    \       } else if grades[i] > 6.3 {\n            letterGrades[i] = letterGrades[i]\
    \ + \"-\"\n        } else if grades[i] < 6.7 {\n            letterGrades[i] =\
    \ letterGrades[i]\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpae8pydoo_test.go:79:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075480
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    gradesGPA := make([]float64,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        gradesGPA[i] = grades[i]\n\
    \    }\n    gradesGPA[0] = gradesGPA[0]\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1]\n\
    \    gradesGPA[gradesLen-2] = gradesGPA[gradesLen-2]\n    gradesGPA[gradesLen-3]\
    \ = gradesGPA[gradesLen-3]\n    gradesGPA[gradesLen-4] = gradesGPA[gradesLen-4]\n\
    \    gradesGPA[gradesLen-5] = gradesGPA[gradesLen-5]\n    gradesGPA[gradesLen-6]\
    \ = gradesGPA[gradesLen-6]\n    gradesGPA[gradesLen-7] = gradesGPA[gradesLen-7]\n\
    \    gradesGPA[gradesLen-8] = gradesGPA[gradesLen-8]\n    gradesGPA[gradesLen-9]\
    \ = gradesGPA[gradesLen-9]\n    gradesGPA[gradesLen-10] = gradesGPA[gradesLen-10]\n\
    \    gradesGPA[gradesLen-11] = gradesGPA[gradesLen-11]\n    gradesGPA[gradesLen-12]\
    \ = gradesGPA[gradesLen-12]\n    gradesGPA[gradesLen-13] = gradesGPA[gradesLen-13]\n\
    \    gradesGPA[gradesLen-14] = gradesGPA[gradesLen-14]\n    gradesGPA[gradesLen-15]\
    \ = gradesGPA[gradesLen-15]\n    gradesGPA[gradesLen-16] = gradesGPA[gradesLen-16]\n\
    \    gradesGPA[gradesLen-17] = gradesGPA[gradesLen-17]\n    gradesGPA[gradesLen-18]\
    \ = gradesGPA[gradesLen-18]\n    gradesGPA[gradesLen-19] = gradesGPA[gradesLen-19]\n\
    \    gradesGPA[gradesLen-20] = gradesGPA[gradesLen-20]\n    gradesGPA[gradesLen-21]\
    \ = gradesGP\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpp2j0dzia_test.go:58:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 3.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.0)\n    gradesSorted = append(gradesSorted,\
    \ 4.0)\n    gradesSorted = append(gradesSorted, 4.\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuby8xupt_test.go:70:43: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075480
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter []string\n    var gpas []float64\n   \
    \ var i int\n    for i = 0; i < len(grades); i++ {\n        gpa := grades[i]\n\
    \        if gpa > 3.0 {\n            letter = append(letter, \"B+\")\n       \
    \     gpas = append(gpas, gpa)\n        } else if gpa > 2.7 {\n            letter\
    \ = append(letter, \"B\")\n            gpas = append(gpas, gpa)\n        } else\
    \ if gpa > 2.3 {\n            letter = append(letter, \"B-\")\n            gpas\
    \ = append(gpas, gpa)\n        } else if gpa > 1.3 {\n            letter = append(letter,\
    \ \"C+\")\n            gpas = append(gpas, gpa)\n        } else if gpa > 0.7 {\n\
    \            letter = append(letter, \"C\")\n            gpas = append(gpas, gpa)\n\
    \        } else if gpa > 0.3 {\n            letter = append(letter, \"C-\")\n\
    \            gpas = append(gpas, gpa)\n        } else if gpa > 0.0 {\n       \
    \     letter = append(letter, \"D+\")\n            gpas = append(gpas, gpa)\n\
    \        } else if gpa > 0.0 {\n            letter = append(letter, \"D\")\n \
    \           gpas = append(gpas, gpa)\n        } else if gpa > 0.0 {\n        \
    \    letter = append(letter, \"D-\")\n            gpas = append(gpas, gpa)\n \
    \       } else {\n            letter = append(letter, \"E\")\n            gpas\
    \ = append(gpas, gpa)\n        }\n    }\n    return letter\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_nvyy0bk_test.go:89: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp_nvyy0bk_test.go:89: expected '[D+]', got '[C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_nvyy0bk_test.go:89: expected '[D-]', got '[C-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp_nvyy0bk_test.go:89:\
    \ expected '[D D- C- B B+]', got '[C D+ C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp_nvyy0bk_test.go:89: expected '[E D-]', got '[E C-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is always A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are calculated using the formula\n\
    \    // GPA - 2.7\n    // GPA - 2.3\n    // GPA - 2.0\n    // GPA - 1.7\n    //\
    \ GPA - 1.3\n    // GPA - 1.0\n    // GPA - 0.7\n    // GPA - 0.0\n    for i :=\
    \ 1; i < grades_len; i++ {\n        letter_grades[i] = fmt.Sprintf(\"%+.2f\",\
    \ grades[i] - 2.7)\n    }\n    \n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpdbw59z2m_test.go:74: expected '[A+ B C- C A-]', got '[A+\
    \ +0.30 -1.00 -0.70 +0.80]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpdbw59z2m_test.go:74: expected '[D+]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpdbw59z2m_test.go:74:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpdbw59z2m_test.go:74: expected '[D D- C- B B+]', got '[A+\
    \ -2.40 -1.20 +0.10 +0.60]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpdbw59z2m_test.go:74: expected '[E D-]', got '[A+ -2.00]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n \
    \           letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpay4n__61_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpay4n__61_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpay4n__61_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpay4n__61_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075357
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Loop through each grade and determine letter grade\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n        \
    \    letterGrades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"D-\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"C+\"\n        } else\
    \ if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 5.3 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 5.3 && grades[i] < 5.7 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i] >= 5.7 && grades[i] < 6.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 6.0 {\n            letterGrades[i] = \"A\"\n\
    \        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp6gt_4wj__test.go:79: expected '[A+ B C- C A-]', got '[B+\
    \ D- E E D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp6gt_4wj__test.go:79: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp6gt_4wj__test.go:79: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp6gt_4wj__test.go:79:\
    \ expected '[D D- C- B B+]', got '[E E E E D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp6gt_4wj__test.go:79: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    var gpas []float64\n\
    \    var letter string\n    var i int\n    var j int\n    for i = 0; i < len(grades);\
    \ i++ {\n        gpas = append(gpas, grades[i])\n    }\n    for i = 0; i < len(gpas);\
    \ i++ {\n        if gpas[i] > 3.0 {\n            letter = \"B+\"\n        } else\
    \ if gpas[i] > 2.7 {\n            letter = \"B\"\n        } else if gpas[i] >\
    \ 2.3 {\n            letter = \"B-\"\n        } else if gpas[i] > 2.0 {\n    \
    \        letter = \"C+\"\n        } else if gpas[i] > 1.7 {\n            letter\
    \ = \"C\"\n        } else if gpas[i] > 1.3 {\n            letter = \"C-\"\n  \
    \      } else if gpas[i] > 1.0 {\n            letter = \"D+\"\n        } else\
    \ if gpas[i] > 0.7 {\n            letter = \"D\"\n        } else if gpas[i] >\
    \ 0.0 {\n            letter = \"D-\"\n        } else {\n            letter = \"\
    E\"\n        }\n        grades_string = append(grades_string, letter)\n    }\n\
    \    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg5mwlc4j_test.go:35:9: j declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075481
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu1kweajz_test.go:63:28: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5hyndnjb_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    \n   \
    \ // Loop through each grade and add it to the result list\n    for i := 0; i\
    \ < len(grades); i++ {\n        // If the grade is greater than or equal to 3.0\
    \ then add \"A+\"\n        if grades[i] >= 3.0 {\n            result[i] = \"A+\"\
    \n        }\n        // If the grade is greater than or equal to 3.7 then add\
    \ \"A\"\n        if grades[i] >= 3.7 {\n            result[i] = \"A\"\n      \
    \  }\n        // If the grade is greater than or equal to 3.3 then add \"A-\"\n\
    \        if grades[i] >= 3.3 {\n            result[i] = \"A-\"\n        }\n  \
    \      // If the grade is greater than or equal to 3.0 then add \"B+\"\n     \
    \   if grades[i] >= 3.0 {\n            result[i] = \"B+\"\n        }\n       \
    \ // If the grade is greater than or equal to 2.7 then add \"B\"\n        if grades[i]\
    \ >= 2.7 {\n            result[i] = \"B\"\n        }\n        // If the grade\
    \ is greater than or equal to 2.3 then add \"B-\"\n        if grades[i] >= 2.3\
    \ {\n            result[i] = \"B-\"\n        }\n        // If the grade is greater\
    \ than or equal to 2.0 then add \"C+\"\n        if grades[i] >= 2.0 {\n      \
    \      result[i] = \"C+\"\n        }\n        // If the grade is greater than\
    \ or equal to 1.7 then add \"C\"\n        if grades[i] >= 1.7 {\n            result[i]\
    \ = \"C\"\n        }\n        // If the grade is greater than or equal to 1.3\
    \ then add \"C-\"\n        if grades[i] >= 1.3 {\n            result[i] = \"C-\"\
    \n        }\n        // If the grade is greater than or equal to 1.0 then add\
    \ \"D+\"\n        if grades[i] >= 1.0 {\n            result[i] = \"D+\"\n    \
    \    }\n        // If the grade is greater than or equal to 0.7 then add \"D\"\
    \n        if grades[i] >= 0.7 {\n            result[i] = \"D\"\n        }\n  \
    \      // If the grade is greater than or equal to 0.0 then add \"D-\"\n     \
    \   if grades[i] >= 0.0 {\n            result[i] = \"D-\"\n        }\n       \
    \ // If the grade is less than 0.0 then add \"E\"\n        if grades[i] < 0.0\
    \ {\n            result[i] = \"E\"\n        }\n    }\n    \n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0psj89xg_test.go:110: expected '[A+ B C- C A-]', got '[D-\
    \ D- D- D- D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp0psj89xg_test.go:110: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp0psj89xg_test.go:110: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp0psj89xg_test.go:110:\
    \ expected '[D D- C- B B+]', got '[D- D- D- D- D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp0psj89xg_test.go:110: expected '[E D-]', got '[D- D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7\
    \ && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n\
    \        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else\
    \ if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\
    \n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n        \
    \    letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ < 1.0 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpug16u5kj_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpug16u5kj_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpug16u5kj_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpug16u5kj_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075358
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] <= 4.0 {\n            letterGrades[i] = \"A\"\n        }\
    \ else if grades[i] >= 3.3 && grades[i] <= 3.7 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i] <= 3.3 {\n       \
    \     letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i]\
    \ <= 3.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 && grades[i] <= 2.7 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 2.0 && grades[i] <= 2.3 {\n            letterGrades[i] = \"\
    C+\"\n        } else if grades[i] >= 1.7 && grades[i] <= 2.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] <= 1.7 {\n        \
    \    letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ <= 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 && grades[i] <= 1.0 {\n            letterGrades[i] = \"D\"\n        }\
    \ else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n        }\
    \ else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmph13heqoh_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmph13heqoh_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmph13heqoh_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmph13heqoh_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72rggtbx_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    for i := 0; i < grades_len; i++ {\n        if grades[i] >=\
    \ 3.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letter_grades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 3.0 {\n            letter_grades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 2.7 {\n            letter_grades[i] = \"\
    C-\"\n        } else if grades[i] >= 1.0 {\n            letter_grades[i] = \"\
    D+\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i] = \"\
    D\"\n        } else if grades[i] < 0.0 {\n            letter_grades[i] = \"D-\"\
    \n        } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n \
    \   return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbgjxqn2q_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmpbgjxqn2q_test.go:75: expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpbgjxqn2q_test.go:75: expected '[D D- C- B B+]', got '[D+\
    \ E C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpbgjxqn2q_test.go:75: expected '[E D-]', got '[E D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    for i\
    \ := range grades {\n        if grades[i] < 3.0 {\n            result[i] = \"\
    E\"\n            continue\n        }\n        if grades[i] < 3.3 {\n         \
    \   result[i] = \"D-\"\n            continue\n        }\n        if grades[i]\
    \ < 3.7 {\n            result[i] = \"C+\"\n            continue\n        }\n \
    \       if grades[i] < 4.0 {\n            result[i] = \"B+\"\n            continue\n\
    \        }\n        if grades[i] < 4.3 {\n            result[i] = \"B\"\n    \
    \        continue\n        }\n        if grades[i] < 4.7 {\n            result[i]\
    \ = \"B-\"\n            continue\n        }\n        if grades[i] < 5.0 {\n  \
    \          result[i] = \"A+\"\n            continue\n        }\n        if grades[i]\
    \ < 5.3 {\n            result[i] = \"A\"\n            continue\n        }\n  \
    \      if grades[i] < 5.7 {\n            result[i] = \"A-\"\n            continue\n\
    \        }\n        if grades[i] < 6.0 {\n            result[i] = \"A\"\n    \
    \        continue\n        }\n        if grades[i] < 6.3 {\n            result[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 6.7 {\n  \
    \          result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 7.0 {\n            result[i] = \"B+\"\n            continue\n        }\n \
    \       if grades[i] < 7.3 {\n            result[i] = \"B\"\n            continue\n\
    \        }\n        if grades[i] < 7.7 {\n            result[i] = \"B-\"\n   \
    \         continue\n        }\n        if grades[i] < 8.0 {\n            result[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] < 8.3 {\n  \
    \          result[i] = \"C\"\n            continue\n        }\n        if grades[i]\
    \ < 8.7 {\n            result[i] = \"C-\"\n            continue\n        }\n \
    \       if grades[i] < 9.0 {\n            result[i] = \"C\"\n            continue\n\
    \        }\n        if grades[i] < 9.3 {\n            result[i] = \"C+\"\n   \
    \         continue\n        }\n        if grades[i] < 9.7 {\n            result[i]\
    \ = \"C\"\n            continue\n        }\n        if grades[i] < 10.0 {\n  \
    \          result[i] = \"D+\"\n            continue\n        }\n        if grades[i]\
    \ < 10.3 {\n            result[i] = \"D\"\n            continue\n        }\n \
    \       if grades[i] < 10.7 {\n            result[i] = \"D-\"\n            continue\n\
    \        }\n        if grades[i] < 11.0 {\n            result[i] = \"D\"\n   \
    \         continue\n        }\n        if grades[i] < 11.3 {\n            result[i]\
    \ = \"D+\"\n            continue\n        }\n        if grades[i] < 11.7 {\n \
    \           result[i] = \"D\"\n            continue\n        }\n        if grades[i]\
    \ < 12.0 {\n            result[i] = \"E\"\n            continue\n        }\n \
    \   }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpya9qf6cg_test.go:167: expected '[A+ B C- C A-]', got '[B\
    \ D- E E C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpya9qf6cg_test.go:167: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpya9qf6cg_test.go:167: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpya9qf6cg_test.go:167:\
    \ expected '[D D- C- B B+]', got '[E E E E C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpya9qf6cg_test.go:167: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n   \
    \         letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n   \
    \         letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n    \
    \        letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 1.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp1n5totw6_test.go:77: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp1n5totw6_test.go:77: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp1n5totw6_test.go:77: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp1n5totw6_test.go:77: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{}, grades...)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2_f6aaop_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    var i int\n    var\
    \ grade float64\n    for i = 0; i < len(grades); i++ {\n        grade = grades[i]\n\
    \        if grade > 3.0 {\n            grades_string = append(grades_string, \"\
    B-\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.7 && grade < 2.3 {\n            grades_string\
    \ = append(grades_string, \"C\")\n        } else if grade > 1.3 && grade < 1.7\
    \ {\n            grades_string = append(grades_string, \"C\")\n        } else\
    \ if grade > 1.0 {\n            grades_string = append(grades_string, \"C+\")\n\
    \        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 0.0 && grade < 0.7 {\n            grades_string\
    \ = append(grades_string, \"D+\")\n        } else if grade > 0.0 {\n         \
    \   grades_string = append(grades_string, \"D\")\n        } else {\n         \
    \   grades_string = append(grades_string, \"E\")\n        }\n    }\n    return\
    \ grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp6yyt8k8c_test.go:79: expected '[A+ B C- C A-]', got '[B-\
    \ B- C+ C B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp6yyt8k8c_test.go:79: expected '[D+]', got '[C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp6yyt8k8c_test.go:79: expected '[D-]', got '[D+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp6yyt8k8c_test.go:79:\
    \ expected '[D D- C- B B+]', got '[C D+ C B- B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp6yyt8k8c_test.go:79: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Loop through each grade and assign a letter grade to\
    \ it.\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n \
    \           letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n \
    \           letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n  \
    \          letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.3 {\n  \
    \          letterGrades[i] = \"C+\"\n        } else if grades[i] >= 0.7 {\n  \
    \          letterGrades[i] = \"C\"\n        } else if grades[i] >= 0.3 {\n   \
    \         letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.0 {\n   \
    \         letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.0 {\n   \
    \         letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n    \
    \        letterGrades[i] = \"D-\"\n        } else if grades[i] >= 0.0 {\n    \
    \        letterGrades[i] = \"E\"\n        } else {\n            letterGrades[i]\
    \ = \"F\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmph8nvuzjx_test.go:81: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmph8nvuzjx_test.go:81: expected '[D+]', got '[C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmph8nvuzjx_test.go:81: expected '[D-]', got '[C-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmph8nvuzjx_test.go:81:\
    \ expected '[E]', got '[D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmph8nvuzjx_test.go:81: expected '[D D- C- B B+]', got '[C\
    \ C- C+ B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmph8nvuzjx_test.go:81: expected '[E D-]', got '[D+ C]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    result := make([]string,\
    \ gradesLen)\n    \n    // The first letter grade is always A+\n    result[0]\
    \ = \"A+\"\n    \n    // The second letter grade is always B\n    for i := 1;\
    \ i < gradesLen; i++ {\n        if grades[i] > 3.7 && grades[i] < 3.3 {\n    \
    \        result[i] = \"B+\"\n        } else if grades[i] > 3.3 && grades[i] <\
    \ 3.0 {\n            result[i] = \"B\"\n        } else if grades[i] > 3.0 && grades[i]\
    \ < 2.7 {\n            result[i] = \"B-\"\n        } else if grades[i] > 2.7 &&\
    \ grades[i] < 2.3 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ > 2.3 && grades[i] < 2.0 {\n            result[i] = \"B-\"\n        } else if\
    \ grades[i] > 2.0 && grades[i] < 1.7 {\n            result[i] = \"C+\"\n     \
    \   } else if grades[i] > 1.7 && grades[i] < 1.3 {\n            result[i] = \"\
    C\"\n        } else if grades[i] > 1.3 && grades[i] < 1.0 {\n            result[i]\
    \ = \"C-\"\n        } else if grades[i] > 1.0 && grades[i] < 0.7 {\n         \
    \   result[i] = \"C\"\n        } else if grades[i] > 0.7 && grades[i] < 0.0 {\n\
    \            result[i] = \"D-\"\n        } else {\n            result[i] = \"\
    D\"\n        }\n    }\n    \n    // The last letter grade is always E\n    result[gradesLen-1]\
    \ = \"E\"\n    \n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp20bqefds_test.go:88: expected '[A+ B C- C A-]', got '[A+\
    \ D D D E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n  \
    \      tmp20bqefds_test.go:88: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp20bqefds_test.go:88: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp20bqefds_test.go:88:\
    \ expected '[D D- C- B B+]', got '[A+ D D D E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp20bqefds_test.go:88: expected '[E D-]', got '[A+ E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n \
    \           letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n \
    \           letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n \
    \           letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n  \
    \          letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n  \
    \          letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n  \
    \          letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n   \
    \         letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n   \
    \         letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n   \
    \         letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n    \
    \        letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpi0lcql9r_test.go:86: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpi0lcql9r_test.go:86: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpi0lcql9r_test.go:86: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpi0lcql9r_test.go:86: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n \
    \           letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpay4n__61_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpay4n__61_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpay4n__61_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpay4n__61_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075357
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    var gpas []float64\n\
    \    var letter string\n    var i int\n    for i = 0; i < len(grades); i++ {\n\
    \        gpas = append(gpas, grades[i])\n    }\n    for i = 0; i < len(gpas);\
    \ i++ {\n        if gpas[i] > 3.0 {\n            letter = \"B+\"\n        } else\
    \ if gpas[i] > 2.7 {\n            letter = \"B\"\n        } else if gpas[i] >\
    \ 2.3 {\n            letter = \"B-\"\n        } else if gpas[i] > 2.0 {\n    \
    \        letter = \"C+\"\n        } else if gpas[i] > 1.7 {\n            letter\
    \ = \"C\"\n        } else if gpas[i] > 1.3 {\n            letter = \"C-\"\n  \
    \      } else if gpas[i] > 1.0 {\n            letter = \"D+\"\n        } else\
    \ if gpas[i] > 0.7 {\n            letter = \"D\"\n        } else if gpas[i] >\
    \ 0.0 {\n            letter = \"D-\"\n        } else {\n            letter = \"\
    E\"\n        }\n        grades_string = append(grades_string, letter)\n    }\n\
    \    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpu6jnioo7_test.go:83: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 1; i < gradesLen; i++ {\n        letterGrades[i] = letterGrades[i-1]\
    \ + \"+\"\n        if grades[i] > grades[i-1] {\n            letterGrades[i] =\
    \ letterGrades[i] + \"-\"\n        }\n    }\n    return letterGrades\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpwhqd89b6_test.go:62: expected '[A+ B C- C A-]', got '[E\
    \ E+ E++ E+++- E+++-+-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmpwhqd89b6_test.go:62: expected '[D+]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpwhqd89b6_test.go:62:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpwhqd89b6_test.go:62: expected '[D D- C- B B+]', got '[E\
    \ E+ E++- E++-+- E++-+-+-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpwhqd89b6_test.go:62: expected '[E D-]', got '[E E+-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    \n    for i := 1; i < gradesLen; i++ {\n        if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"A\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"C-\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"D+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"D\"\n        } else if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"D-\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"D\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpruy7olrq_test.go:90: expected '[A+ B C- C A-]', got '[E\
    \ A+ A+ A A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpruy7olrq_test.go:90: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpruy7olrq_test.go:90: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpruy7olrq_test.go:90:\
    \ expected '[D D- C- B B+]', got '[E A+ A A A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpruy7olrq_test.go:90: expected '[E D-]', got '[E A]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Loop through grades\n    for i := 0; i < gradesLen;\
    \ i++ {\n        // If grade is less than or equal to zero, skip it\n        if\
    \ grades[i] <= 0.0 {\n            continue\n        }\n        \n        // If\
    \ grade is greater than or equal to 3.7, skip it\n        if grades[i] > 3.7 {\n\
    \            continue\n        }\n        \n        // If grade is greater than\
    \ or equal to 3.3, skip it\n        if grades[i] > 3.3 {\n            continue\n\
    \        }\n        \n        // If grade is greater than or equal to 3.0, skip\
    \ it\n        if grades[i] > 3.0 {\n            continue\n        }\n        \n\
    \        // If grade is greater than or equal to 2.7, skip it\n        if grades[i]\
    \ > 2.7 {\n            continue\n        }\n        \n        // If grade is greater\
    \ than or equal to 2.3, skip it\n        if grades[i] > 2.3 {\n            continue\n\
    \        }\n        \n        // If grade is greater than or equal to 2.0, skip\
    \ it\n        if grades[i] > 2.0 {\n            continue\n        }\n        \n\
    \        // If grade is greater than or equal to 1.7, skip it\n        if grades[i]\
    \ > 1.7 {\n            continue\n        }\n        \n        // If grade is greater\
    \ than or equal to 1.3, skip it\n        if grades[i] > 1.3 {\n            continue\n\
    \        }\n        \n        // If grade is greater than or equal to 1.0, skip\
    \ it\n        if grades[i] > 1.0 {\n            continue\n        }\n        \n\
    \        // If grade is greater than or equal to 0.7, skip it\n        if grades[i]\
    \ > 0.7 {\n            continue\n        }\n        \n        // If grade is greater\
    \ than or equal to 0.0, skip it\n        if grades[i] > 0.0 {\n            continue\n\
    \        }\n        \n        // If grade is less than or equal to 0, skip it\n\
    \        if grades[i] <= 0.0 {\n            continue\n        }\n        \n  \
    \      // If grade is less than or equal to 3.7, skip it\n        if grades[i]\
    \ <= 3.7 {\n            continue\n        }\n        \n        // If grade is\
    \ less than or equal to 3.3, skip it\n        if grades[i] <= 3.3 {\n        \
    \    continue\n        }\n        \n        // If grade is less than or equal\
    \ to 3.0, skip it\n        if grades[i] <= 3.0 {\n            continue\n     \
    \   }\n        \n        // If grade is less than or equal to 2.7, skip it\n \
    \       if grades[i] <= 2.7 {\n            continue\n        }\n        \n   \
    \     // If grade is less than or equal to 2.3, skip it\n        if grades[i]\
    \ <= 2.3 {\n            continue\n        }\n        \n        // If \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpulbnra0h_test.go:127:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075480
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    \n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grade = grade - 3.0\n      \
    \  }\n        if grade < 3.0 {\n            grade = grade + 3.0\n        }\n \
    \       \n        if grade > 2.7 {\n            grade = grade - 2.7\n        }\n\
    \        if grade < 2.7 {\n            grade = grade + 2.7\n        }\n      \
    \  \n        if grade > 2.3 {\n            grade = grade - 2.3\n        }\n  \
    \      if grade < 2.3 {\n            grade = grade + 2.3\n        }\n        \n\
    \        if grade > 2.0 {\n            grade = grade - 2.0\n        }\n      \
    \  if grade < 2.0 {\n            grade = grade + 2.0\n        }\n        \n  \
    \      if grade > 1.7 {\n            grade = grade - 1.7\n        }\n        if\
    \ grade < 1.7 {\n            grade = grade + 1.7\n        }\n        \n      \
    \  if grade > 1.3 {\n            grade = grade - 1.3\n        }\n        if grade\
    \ < 1.3 {\n            grade = grade + 1.3\n        }\n        \n        if grade\
    \ > 1.0 {\n            grade = grade - 1.0\n        }\n        if grade < 1.0\
    \ {\n            grade = grade + 1.0\n        }\n        \n        if grade >\
    \ 0.7 {\n            grade = grade - 0.7\n        }\n        if grade < 0.7 {\n\
    \            grade = grade + 0.7\n        }\n        \n        if grade > 0.0\
    \ {\n            grade = grade - 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        \n        if grade > 0.0 {\n\
    \            grade = grade - 0.0\n        }\n        if grade < 0.0 {\n      \
    \      grade = grade + 0.0\n        }\n        \n        if grade > 0.0 {\n  \
    \          grade = grade - 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        \n        if grade > 0.0 {\n    \
    \        grade = grade - 0.0\n        }\n        if grade < 0.0 {\n          \
    \  grade = grade + 0.0\n        }\n        \n        if grade > 0.0 {\n      \
    \      grade = grade - 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        \n        if grade > 0.0 {\n            grade\
    \ = grade - 0.0\n        }\n        if grade < 0.0 \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4dke8bxd_test.go:129:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075480
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    \n    // The first\
    \ letter grade is always A+\n    letterGrades = append(letterGrades, \"A+\")\n\
    \    \n    // The second letter grade is always A if the first letter grade is\
    \ A+\n    if grades[0] == 4.0 {\n        letterGrades = append(letterGrades, \"\
    A\")\n    }\n    \n    // The third letter grade is always A if the first two\
    \ letter grades are A+\n    if grades[1] > 3.7 && grades[1] < 3.3 {\n        letterGrades\
    \ = append(letterGrades, \"A-\")\n    }\n    \n    // The fourth letter grade\
    \ is always B+ if the first three letter grades are A+, A or A-\n    if grades[2]\
    \ > 3.3 && grades[2] < 3.0 && grades[3] > 2.7 && grades[3] < 2.3 {\n        letterGrades\
    \ = append(letterGrades, \"B+\")\n    }\n    \n    // The fifth letter grade is\
    \ always B if the fourth letter grade is B+\n    if grades[4] > 2.7 && grades[4]\
    \ < 2.3 {\n        letterGrades = append(letterGrades, \"B\")\n    }\n    \n \
    \   // The sixth letter grade is always B if the fourth letter grade is B+\n \
    \   if grades[4] > 2.3 && grades[4] < 2.0 {\n        letterGrades = append(letterGrades,\
    \ \"B-\")\n    }\n    \n    // The seventh letter grade is always C+ if the fifth\
    \ letter grade is B+, B or B-\n    if grades[5] > 2.0 && grades[5] < 1.7 {\n \
    \       letterGrades = append(letterGrades, \"C+\")\n    }\n    \n    // The eighth\
    \ letter grade is always C if the sixth letter grade is C+\n    if grades[6] >\
    \ 1.7 {\n        letterGrades = append(letterGrades, \"C\")\n    }\n    \n   \
    \ // The ninth letter grade is always C if the sixth letter grade is C+\n    if\
    \ grades[6] > 1.3 && grades[6] < 1.0 {\n        letterGrades = append(letterGrades,\
    \ \"C-\")\n    }\n    \n    // The tenth letter grade is always D+ if the seventh\
    \ letter grade is C+, C or C-\n    if grades[7] > 1.0 && grades[7] < 0.7 {\n \
    \       letterGrades = append(letterGrades, \"D+\")\n    }\n    \n    // The \n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl9a5gnta_test.go:82:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075480
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[gradesSorted[0]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[0] > 1] = 1\n    gradesSorted[gradesSorted[1]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[1] > 1] = 1\n    gradesSorted[gradesSorted[2]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[2] > 1] = 1\n    gradesSorted[gradesSorted[3]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[3] > 1] = 1\n    gradesSorted[gradesSorted[4]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[4] > 1] = 1\n    gradesSorted[gradesSorted[5]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[5] > 1] = 1\n    gradesSorted[gradesSorted[6]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[6] > 1] = 1\n    gradesSorted[gradesSorted[7]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[7] > 1] = 1\n    gradesSorted[gradesSorted[8]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[8] > 1] = 1\n    gradesSorted[gradesSorted[9]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[9] > 1] = 1\n    gradesSorted[gradesSorted[10]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[10] > 1] = 1\n    gradesSorted[gradesSorted[11]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[11] > 1] = 1\n    gradesSorted[gradesSorted[12]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[12] > 1] = 1\n    gradesSorted[gradesSorted[13]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[13] > 1] = 1\n    gradesSorted[gradesSorted[14]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[14] > 1] = 1\n    gradesSorted[gradesSorted[15]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[15] > 1] = 1\n    gradesSorted[gradesSorted[16]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[16] > 1] = 1\n    gradesSorted[gradesSorted[17]\
    \ < 0] = 0\n    gradesSorted[gradesSorted[17] > \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp30z_oc8c_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075480
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 3.0 {\n            grade = 3.0\n        }\n        if grade\
    \ < 2.0 {\n            grade = grade + 2.0\n        }\n        if grade > 2.0\
    \ {\n            grade = grade - 2.0\n        }\n        if grade < 1.0 {\n  \
    \          grade = grade + 1.0\n        }\n        if grade > 1.0 {\n        \
    \    grade = grade - 1.0\n        }\n        if grade < 0.7 {\n            grade\
    \ = grade + 0.7\n        }\n        if grade > 0.7 {\n            grade = grade\
    \ - 0.7\n        }\n        if grade < 0.3 {\n            grade = grade + 0.3\n\
    \        }\n        if grade > 0.3 {\n            grade = grade - 0.3\n      \
    \  }\n        if grade < 0.1 {\n            grade = grade + 0.1\n        }\n \
    \       if grade > 0.1 {\n            grade = grade - 0.1\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ > 0.0 {\n            grade = grade - 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade > 0.0 {\n  \
    \          grade = grade - 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade > 0.0 {\n            grade\
    \ = grade - 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade > 0.0 {\n            grade = grade - 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade > 0.0 {\n            grade = grade - 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade > 0.0 {\n            grade = grade - 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade > 0.0\
    \ {\n            grade = grade - 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade > 0.0 {\n        \
    \    grade = grade - 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade > 0.0 {\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3j5os1yj_test.go:121:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letterGrades := make([]string,\
    \ grades_len)\n    for i := 0; i < grades_len; i++ {\n        letter := \"\"\n\
    \        if grades[i] >= 4.0 {\n            letter = \"A+\"\n        } else if\
    \ grades[i] >= 3.7 {\n            letter = \"A\"\n        } else if grades[i]\
    \ >= 3.3 {\n            letter = \"A-\"\n        } else if grades[i] >= 3.0 {\n\
    \            letter = \"B+\"\n        } else if grades[i] >= 2.7 {\n         \
    \   letter = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter =\
    \ \"B-\"\n        } else if grades[i] >= 2.0 {\n            letter = \"C+\"\n\
    \        } else if grades[i] >= 1.7 {\n            letter = \"C\"\n        } else\
    \ if grades[i] >= 1.3 {\n            letter = \"C-\"\n        } else if grades[i]\
    \ >= 1.0 {\n            letter = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letter = \"D\"\n        } else if grades[i] >= 0.0 {\n          \
    \  letter = \"D-\"\n        } else {\n            letter = \"E\"\n        }\n\
    \        letterGrades[i] = letter\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpr2sd8kl6_test.go:85: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpr2sd8kl6_test.go:85: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpr2sd8kl6_test.go:85: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpr2sd8kl6_test.go:85: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdn837dqf_test.go:66:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Calculate the letter grades\n    for i := 0; i < gradesLen;\
    \ i++ {\n        letterGrades[i] = \"\"\n        if grades[i] >= 4.0 {\n     \
    \       letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i] < 1.0 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 && grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n          \
    \  letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmptt82dml1_test.go:86: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmptt82dml1_test.go:86: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmptt82dml1_test.go:86: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmptt82dml1_test.go:86: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letterGrades := make([]string,\
    \ grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n \
    \           letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp5hqcr3g4_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp5hqcr3g4_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp5hqcr3g4_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp5hqcr3g4_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    var gpas []float64\n\
    \    var letter string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8zgw50ar_test.go:157:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    letterGrades[gradesLen-2] = \"D-\"\n    letterGrades[gradesLen-3] = \"\
    D\"\n    letterGrades[gradesLen-4] = \"C-\"\n    letterGrades[gradesLen-5] = \"\
    C\"\n    letterGrades[gradesLen-6] = \"B+\"\n    letterGrades[gradesLen-7] = \"\
    B\"\n    letterGrades[gradesLen-8] = \"B-\"\n    letterGrades[gradesLen-9] = \"\
    B\"\n    letterGrades[gradesLen-10] = \"A+\"\n    letterGrades[gradesLen-11] =\
    \ \"A\"\n    letterGrades[gradesLen-12] = \"A-\"\n    letterGrades[gradesLen-13]\
    \ = \"A\"\n    letterGrades[gradesLen-14] = \"A+\"\n    letterGrades[gradesLen-15]\
    \ = \"A\"\n    letterGrades[gradesLen-16] = \"A-\"\n    letterGrades[gradesLen-17]\
    \ = \"A\"\n    letterGrades[gradesLen-18] = \"A+\"\n    letterGrades[gradesLen-19]\
    \ = \"A\"\n    letterGrades[gradesLen-20] = \"A-\"\n    letterGrades[gradesLen-21]\
    \ = \"A\"\n    letterGrades[gradesLen-22] = \"A+\"\n    letterGrades[gradesLen-23]\
    \ = \"A\"\n    letterGrades[gradesLen-24] = \"A-\"\n    letterGrades[gradesLen-25]\
    \ = \"A\"\n    letterGrades[gradesLen-26] = \"A+\"\n    letterGrades[gradesLen-27]\
    \ = \"A\"\n    letterGrades[gradesLen-28] = \"A-\"\n    letterGrades[gradesLen-29]\
    \ = \"A\"\n    letterGrades[gradesLen-30] = \"A+\"\n    letterGrades[gradesLen-31]\
    \ = \"A\"\n    letterGrades[gradesLen-32] = \"A-\"\n    letterGrades[gradesLen-33]\
    \ = \"A\"\n    letterGrades[gradesLen-34] = \"A+\"\n    letterGrades[gradesLen-35]\
    \ = \"A\"\n    letterGrades[gradesLen-\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl92eninz_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen - 1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n \
    \       if grades[i] >= 3.0 {\n            letterGrades[i] = \"A+\"\n        }\
    \ else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if\
    \ grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if\
    \ grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i]\
    \ >= 0.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n         \
    \   letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpz2hzyrnj_test.go:78: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpz2hzyrnj_test.go:78: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpz2hzyrnj_test.go:78: expected '[D-]', got '[D+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpz2hzyrnj_test.go:78:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpz2hzyrnj_test.go:78: expected '[D D- C- B B+]', got '[D\
    \ D+ C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpz2hzyrnj_test.go:78: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5hyndnjb_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr3an72uj_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075354
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{0.0}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc0kmurmb_test.go:65:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n    \
    \        letterGrades[i] = \"D-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n            letterGrades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 5.3 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 5.3 && grades[i] < 5.7 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i] >= 5.7 && grades[i] < 6.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 6.0 {\n            letterGrades[i] = \"A\"\n\
    \        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpxgl4vid__test.go:79: expected '[A+ B C- C A-]', got '[B\
    \ C+ D- D- C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpxgl4vid__test.go:79: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpxgl4vid__test.go:79: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxgl4vid__test.go:79:\
    \ expected '[D D- C- B B+]', got '[D- D- D- D- C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpxgl4vid__test.go:79: expected '[E D-]', got '[D- D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // Loop through each grade and add it to the letter grade\
    \ list\n    for i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n\
    \            letter_grades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letter_grades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n\
    \            letter_grades[i] = \"B\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 2.3 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.3 && grades[i] < 1.7 {\n            letter_grades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n        }\
    \ else if grades[i] < 1.0 {\n            letter_grades[i] = \"D\"\n        } else\
    \ {\n            letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp041_zyo9_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmp041_zyo9_test.go:75: expected '[D-]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp041_zyo9_test.go:75: expected '[E]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp041_zyo9_test.go:75:\
    \ expected '[D D- C- B B+]', got '[D+ D C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp041_zyo9_test.go:75: expected '[E D-]', got '[D D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    for i\
    \ := range grades {\n        if grades[i] >= 4.0 {\n            result[i] = \"\
    A+\"\n        } else if grades[i] >= 3.7 {\n            result[i] = \"A\"\n  \
    \      } else if grades[i] >= 3.3 {\n            result[i] = \"A-\"\n        }\
    \ else if grades[i] >= 3.0 {\n            result[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.7 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            result[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n  \
    \          result[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n         \
    \   result[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n            result[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 {\n            result[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 {\n            result[i] = \"D-\"\n     \
    \   } else {\n            result[i] = \"E\"\n        }\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp8ef6vc2o_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp8ef6vc2o_test.go:82: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp8ef6vc2o_test.go:82: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp8ef6vc2o_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := range grades {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    grades\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdtoruonz_test.go:76:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_string := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpui3pfw0v_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpui3pfw0v_test.go:76: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpui3pfw0v_test.go:76: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpui3pfw0v_test.go:76:\
    \ expected '[D D- C- B B+]', got '[D+ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpui3pfw0v_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    gradesMax := grades[gradesLen-1]\n\
    \    gradesMin := grades[0]\n    gradesAvg := grades[gradesLen-2]\n    gradesGrade\
    \ := grades[gradesLen-3]\n    gradesGradeAvg := grades[gradesLen-4]\n    gradesGradeGrade\
    \ := grades[gradesLen-5]\n    gradesGradeGradeAvg := grades[gradesLen-6]\n   \
    \ gradesGradeGradeGrade := grades[gradesLen-7]\n    gradesGradeGradeGradeAvg :=\
    \ grades[gradesLen-8]\n    gradesGradeGradeGradeGrade := grades[gradesLen-9]\n\
    \    gradesGradeGradeGradeGradeAvg := grades[gradesLen-10]\n    gradesGradeGradeGradeGradeGrade\
    \ := grades[gradesLen-11]\n    gradesGradeGradeGradeGradeGradeAvg := grades[gradesLen-12]\n\
    \    gradesGradeGradeGradeGradeGradeGrade := grades[gradesLen-13]\n    gradesGradeGradeGradeGradeGradeGradeAvg\
    \ := grades[gradesLen-14]\n    gradesGradeGradeGradeGradeGradeGradeGrade := grades[gradesLen-15]\n\
    \    gradesGradeGradeGradeGradeGradeGradeGradeAvg := grades[gradesLen-16]\n  \
    \  gradesGradeGradeGradeGradeGradeGradeGradeGrade := grades[gradesLen-17]\n  \
    \  gradesGradeGradeGradeGradeGradeGradeGradeAvg := grades[gradesLen-18]\n    gradesGradeGradeGradeGradeGradeGradeGradeGrade\
    \ := grades[gradesLen-19]\n    gradesGradeGradeGradeGradeGradeGradeGradeGradeAvg\
    \ := grades[gradesLen-20]\n    gradesGradeGradeGradeGradeGradeGradeGradeGradeGrade\
    \ := grades[gradesLen-21]\n    gradesGradeGradeGradeGradeGradeGradeGradeGradeGradeAvg\
    \ := grades[gradesLen-22]\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n \
    \ candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprvfi59u8_test.go:55:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    var gpas []float64\n   \
    \ var letter string\n    for _, grade := range grades {\n        if grade > 0\
    \ {\n            gpas = append(gpas, grade)\n        } else {\n            gpas\
    \ = append(gpas, 0)\n        }\n    }\n    for _, gpa := range gpas {\n      \
    \  if gpa > 0 {\n            letter = \"A+\"\n            if gpa > 3.0 {\n   \
    \             letter = \"A\"\n                if gpa > 2.3 {\n               \
    \     letter = \"A-\"\n                    if gpa > 1.7 {\n                  \
    \      letter = \"B+\"\n                        if gpa > 1.3 {\n             \
    \               letter = \"B\"\n                            if gpa > 0.7 {\n \
    \                               letter = \"B-\"\n                            \
    \    if gpa > 0.3 {\n                                    letter = \"C+\"\n   \
    \                                 if gpa > 0.1 {\n                           \
    \             letter = \"C\"\n                                        if gpa >\
    \ 0.0 {\n                                            letter = \"C-\"\n       \
    \                                     if gpa > -0.1 {\n                      \
    \                          letter = \"D+\"\n                                 \
    \               if gpa > -0.3 {\n                                            \
    \        letter = \"D\"\n                                                    if\
    \ gpa > -0.7 {\n                                                        letter\
    \ = \"D-\"\n                                                        if gpa > -1.0\
    \ {\n                                                            letter = \"E\"\
    \n                                                            result = append(result,\
    \ letter)\n                                                        }\n       \
    \                                             }\n                            \
    \                    }\n                                            }\n      \
    \                                  }\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \          result = append(result, letter)\n        }\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpo7373z6__test.go:105: expected '[A+ B C- C A-]', got '[E\
    \ E A+ A+ A+ E E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpo7373z6__test.go:105: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpo7373z6__test.go:105: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpo7373z6__test.go:105:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpo7373z6__test.go:105: expected '[D D- C- B B+]', got '[A+\
    \ A+ A+ A+ E E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpo7373z6__test.go:105: expected '[E D-]', got '[A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp58p05f_f_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmp58p05f_f_test.go:75: expected '[D-]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp58p05f_f_test.go:75: expected '[E]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp58p05f_f_test.go:75:\
    \ expected '[D D- C- B B+]', got '[D+ D C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp58p05f_f_test.go:75: expected '[E D-]', got '[D D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i]\
    \ < 3.0 {\n            letter_grades[i] = \"E\"\n        } else if grades[i] >=\
    \ 3.0 && grades[i] < 3.7 {\n            letter_grades[i] = \"D-\"\n        } else\
    \ if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"\
    C+\"\n        } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n        \
    \    letter_grades[i] = \"B+\"\n        } else if grades[i] >= 4.7 && grades[i]\
    \ < 5.0 {\n            letter_grades[i] = \"A-\"\n        } else if grades[i]\
    \ >= 5.0 && grades[i] < 5.3 {\n            letter_grades[i] = \"A+\"\n       \
    \ } else if grades[i] >= 5.3 && grades[i] < 5.7 {\n            letter_grades[i]\
    \ = \"A\"\n        } else if grades[i] >= 5.7 && grades[i] < 6.0 {\n         \
    \   letter_grades[i] = \"A+\"\n        } else if grades[i] >= 6.0 {\n        \
    \    letter_grades[i] = \"A\"\n        }\n    }\n    return letter_grades\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpwde5ey6d_test.go:78: expected '[A+ B C- C A-]', got '[B-\
    \ D- E E D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpwde5ey6d_test.go:78: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpwde5ey6d_test.go:78: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpwde5ey6d_test.go:78:\
    \ expected '[D D- C- B B+]', got '[E E E E D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpwde5ey6d_test.go:78: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSor\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpev37ress_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    \n   \
    \ for i := 0; i < len(grades); i++ {\n        if grades[i] < 3.0 {\n         \
    \   result[i] = \"E\"\n            continue\n        }\n        \n        if grades[i]\
    \ < 4.0 {\n            result[i] = \"D-\"\n            continue\n        }\n \
    \       \n        if grades[i] < 5.0 {\n            result[i] = \"C+\"\n     \
    \       continue\n        }\n        \n        if grades[i] < 6.0 {\n        \
    \    result[i] = \"B-\"\n            continue\n        }\n        \n        if\
    \ grades[i] < 7.0 {\n            result[i] = \"B+\"\n            continue\n  \
    \      }\n        \n        if grades[i] < 8.0 {\n            result[i] = \"A-\"\
    \n            continue\n        }\n        \n        if grades[i] < 9.0 {\n  \
    \          result[i] = \"A+\"\n            continue\n        }\n        \n   \
    \     if grades[i] < 10.0 {\n            result[i] = \"A-\"\n            continue\n\
    \        }\n        \n        if grades[i] < 11.0 {\n            result[i] = \"\
    A+\"\n            continue\n        }\n        \n        if grades[i] < 12.0 {\n\
    \            result[i] = \"B+\"\n            continue\n        }\n        \n \
    \       if grades[i] < 13.0 {\n            result[i] = \"B\"\n            continue\n\
    \        }\n        \n        if grades[i] < 14.0 {\n            result[i] = \"\
    B-\"\n            continue\n        }\n        \n        if grades[i] < 15.0 {\n\
    \            result[i] = \"C+\"\n            continue\n        }\n        \n \
    \       if grades[i] < 16.0 {\n            result[i] = \"C\"\n            continue\n\
    \        }\n        \n        if grades[i] < 17.0 {\n            result[i] = \"\
    C-\"\n            continue\n        }\n        \n        if grades[i] < 18.0 {\n\
    \            result[i] = \"D+\"\n            continue\n        }\n        \n \
    \       if grades[i] < 19.0 {\n            result[i] = \"D\"\n            continue\n\
    \        }\n        \n        if grades[i] < 20.0 {\n            result[i] = \"\
    D-\"\n            continue\n        }\n        \n        if grades[i] < 21.0 {\n\
    \            result[i] = \"E\"\n            continue\n        }\n        \n  \
    \      if grades[i] < 22.0 {\n            result[i] = \"F\"\n            continue\n\
    \        }\n        \n        if grades[i] < 23.0 {\n            result[i] = \"\
    F\"\n            continue\n        }\n        \n        if grades[i] < 24.0 {\n\
    \            result[i] = \"F\"\n            continue\n        }\n        \n  \
    \      if grades[i] < 25.0 {\n            result[i] = \"F\"\n            continue\n\
    \        }\n        \n        if grades[i] < 26.0 {\n            result[i] = \"\
    F\"\n            continue\n        }\n        \n        if grades[i] < 27.0 {\n\
    \            result[i] = \"F\"\n            continue\n        }\n        \n  \
    \      if grades[i] < 28.0 {\n            result[i] = \"F\"\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpka7j1w72_test.go:161:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letterGrades[i] = \"C+\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.3 {\n  \
    \          letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprn9ppja6_test.go:82: expected '[A+ B C- C A-]', got '[C+\
    \ C+ C B+ C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmprn9ppja6_test.go:82: expected '[D+]', got '[C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmprn9ppja6_test.go:82: expected '[D-]', got '[D+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmprn9ppja6_test.go:82:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprn9ppja6_test.go:82: expected '[D D- C- B B+]', got '[C+\
    \ D+ C- B C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmprn9ppja6_test.go:82: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] < 3.3 {\n \
    \           letterGrades[i] = \"C\"\n        } else if grades[i] < 3.7 {\n   \
    \         letterGrades[i] = \"B+\"\n        } else if grades[i] < 4.0 {\n    \
    \        letterGrades[i] = \"B\"\n        } else if grades[i] < 4.3 {\n      \
    \      letterGrades[i] = \"A-\"\n        } else if grades[i] < 4.7 {\n       \
    \     letterGrades[i] = \"A\"\n        } else if grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else if grades[i] < 5.3 {\n          \
    \  letterGrades[i] = \"B+\"\n        } else if grades[i] < 5.7 {\n           \
    \ letterGrades[i] = \"B\"\n        } else if grades[i] < 6.0 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] < 6.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] < 6.7 {\n            letterGrades[i] = \"\
    B\"\n        } else if grades[i] < 7.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] < 7.3 {\n            letterGrades[i] = \"C\"\n \
    \       } else if grades[i] < 7.7 {\n            letterGrades[i] = \"C\"\n   \
    \     } else if grades[i] < 8.0 {\n            letterGrades[i] = \"C\"\n     \
    \   } else if grades[i] < 8.3 {\n            letterGrades[i] = \"C\"\n       \
    \ } else if grades[i] < 8.7 {\n            letterGrades[i] = \"C\"\n        }\
    \ else if grades[i] < 9.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] < 9.3 {\n            letterGrades[i] = \"C\"\n        } else if\
    \ grades[i] < 9.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i]\
    \ < 10.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] <\
    \ 10.3 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] < 10.7\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] < 11.\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphfhhwnc0_test.go:86:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesIndex\
    \ := 0\n    gradesCount := 0\n    gradesTotal := 0.0\n    gradesAverages := make([]float64,\
    \ len(grades))\n    for i := 0; i < len(grades); i++ {\n        gradesTotal +=\
    \ gradesSorted[i]\n        gradesAverages[gradesIndex] = gradesSorted[i]\n   \
    \     gradesIndex++\n        gradesCount++\n    }\n\n    gradesAverages[gradesIndex]\
    \ = gradesTotal / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount\
    \ = 0\n    gradesTotal = 0.0\n    for i := 0; i < len(grades); i++ {\n       \
    \ gradesTotal += gradesAverages[i]\n        gradesCount++\n        if gradesTotal\
    \ >= gradesSorted[i] {\n            gradesIndex++\n        }\n    }\n\n    gradesAverages[gradesIndex]\
    \ = gradesTotal / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount\
    \ = 0\n    gradesTotal = 0.0\n    for i := 0; i < len(grades); i++ {\n       \
    \ gradesTotal += gradesAverages[i]\n        gradesCount++\n        if gradesTotal\
    \ >= gradesSorted[i] {\n            gradesIndex++\n        }\n    }\n\n    gradesAverages[gradesIndex]\
    \ = gradesTotal / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount\
    \ = 0\n    gradesTotal = 0.0\n    for i := 0; i < len(grades); i++ {\n       \
    \ gradesTotal += gradesAverages[i]\n        gradesCount++\n        if gradesTotal\
    \ >= gradesSorted[i] {\n            gradesIndex++\n        }\n    }\n\n    gradesAverages[gradesIndex]\
    \ = gradesTotal / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount\
    \ = 0\n    gradesTotal = 0.0\n    for i := 0; i < len(grades); i++ {\n       \
    \ gradesTotal += gradesAverages[i]\n        gradesCount++\n        if gradesTotal\
    \ >= gradesSorted[i] {\n            gradesIndex++\n        }\n    }\n\n    gradesAverages[gradesIndex]\
    \ = gradesTotal / float64(gradesCount)\n\n    gradesIndex = 0\n    gradesCount\
    \ = 0\n    gradesTotal = 0.0\n    for i := 0; i < \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsn2f7qlj_test.go:104:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075483
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    var gpas []float64\n   \
    \ for _, grade := range grades {\n        if grade > 0 {\n            gpas = append(gpas,\
    \ grade)\n        }\n    }\n    for _, gpa := range gpas {\n        if gpa > 0\
    \ {\n            result := []string{\"\"}\n            switch {\n            case\
    \ gpa > 3.7:\n                result := append(result, \"A+\")\n            case\
    \ gpa > 3.3:\n                result := append(result, \"A\")\n            case\
    \ gpa > 3:\n                result := append(result, \"A-\")\n            case\
    \ gpa > 2.7:\n                result := append(result, \"B+\")\n            case\
    \ gpa > 2.3:\n                result := append(result, \"B\")\n            case\
    \ gpa > 2:\n                result := append(result, \"B-\")\n            case\
    \ gpa > 1.7:\n                result := append(result, \"C+\")\n            case\
    \ gpa > 1.3:\n                result := append(result, \"C\")\n            case\
    \ gpa > 1:\n                result := append(result, \"C-\")\n            case\
    \ gpa > 0.7:\n                result := append(result, \"D+\")\n            case\
    \ gpa > 0.3:\n                result := append(result, \"D\")\n            case\
    \ gpa > 0:\n                result := append(result, \"D-\")\n            case\
    \ gpa > 0.0:\n                result := append(result, \"E\")\n            }\n\
    \            result = append(result, \"\")\n        }\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ms9d54y_test.go:43:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:45:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:47:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:49:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:51:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:53:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:55:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:57:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:59:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:61:17: result declared but not used

    /tmp/tmp2ms9d54y_test.go:61:17: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    for i := 1; i < gradesLen; i++\
    \ {\n        if grades[i-1] > grades[i] {\n            letterGrades[i] = \"D-\"\
    \n        } else if grades[i-1] < grades[i] {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i-1] == grades[i] {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i-1] > grades[i] && grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i-1] > grades[i]\
    \ && grades[i-1] > grades[i] {\n            letterGrades[i] = \"B+\"\n       \
    \ } else if grades[i-1] < grades[i] && grades[i-1] > grades[i] {\n           \
    \ letterGrades[i] = \"B-\"\n        } else if grades[i-1] < grades[i] && grades[i-1]\
    \ < grades[i] {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1]\
    \ == grades[i] && grades[i-1] > grades[i] {\n            letterGrades[i] = \"\
    B\"\n        } else if grades[i-1] == grades[i] && grades[i-1] < grades[i] {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i-1] == grades[i]\
    \ && grades[i-1] == grades[i] {\n            letterGrades[i] = \"A+\"\n      \
    \  } else if grades[i-1] == grades[i] && grades[i-1] > grades[i] {\n         \
    \   letterGrades[i] = \"A\"\n        } else if grades[i-1] == grades[i] && grades[i-1]\
    \ < grades[i] {\n            letterGrades[i] = \"A-\"\n        } else if grades[i-1]\
    \ == grades[i] && grades[i-1] == grades[i] {\n            letterGrades[i] = \"\
    A\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp_22slu8v_test.go:43:19: redundant and: grades[i-1] > grades[i] && grades[i-1]
    > grades[i]

    /tmp/tmp_22slu8v_test.go:47:19: redundant and: grades[i-1] < grades[i] && grades[i-1]
    < grades[i]

    /tmp/tmp_22slu8v_test.go:53:19: redundant and: grades[i-1] == grades[i] && grades[i-1]
    == grades[i]

    /tmp/tmp_22slu8v_test.go:59:19: redundant and: grades[i-1] == grades[i] && grades[i-1]
    == grades[i]

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    letterGrades[gradesLen-2] = \"D\"\n    letterGrades[gradesLen-3] = \"\
    C-\"\n    letterGrades[gradesLen-4] = \"C\"\n    letterGrades[gradesLen-5] = \"\
    B-\"\n    letterGrades[gradesLen-6] = \"B\"\n    letterGrades[gradesLen-7] = \"\
    A-\"\n    letterGrades[gradesLen-8] = \"A\"\n    letterGrades[gradesLen-9] = \"\
    A+\"\n    letterGrades[gradesLen-10] = \"B+\"\n    letterGrades[gradesLen-11]\
    \ = \"C+\"\n    letterGrades[gradesLen-12] = \"D+\"\n    letterGrades[gradesLen-13]\
    \ = \"D\"\n    letterGrades[gradesLen-14] = \"C\"\n    letterGrades[gradesLen-15]\
    \ = \"B\"\n    letterGrades[gradesLen-16] = \"A\"\n    letterGrades[gradesLen-17]\
    \ = \"A+\"\n    letterGrades[gradesLen-18] = \"B+\"\n    letterGrades[gradesLen-19]\
    \ = \"C+\"\n    letterGrades[gradesLen-20] = \"D+\"\n    letterGrades[gradesLen-21]\
    \ = \"D-\"\n    letterGrades[gradesLen-22] = \"C-\"\n    letterGrades[gradesLen-23]\
    \ = \"C\"\n    letterGrades[gradesLen-24] = \"B-\"\n    letterGrades[gradesLen-25]\
    \ = \"B\"\n    letterGrades[gradesLen-26] = \"A-\"\n    letterGrades[gradesLen-27]\
    \ = \"A\"\n    letterGrades[gradesLen-28] = \"A+\"\n    letterGrades[gradesLen-29]\
    \ = \"B+\"\n    letterGrades[gradesLen-30] = \"C+\"\n    letterGrades[gradesLen-31]\
    \ = \"D+\"\n    letterGrades[gradesLen-32] = \"D\"\n    letterGrades[gradesLen-33]\
    \ = \"C\"\n    letterGrades[gradesLen-34] = \"B-\"\n    letterGrades[gradesLen-35]\
    \ = \"B\"\n    letterGrades[gradesLen-\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk70aejnk_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    for i := 0; i < grades_len; i++ {\n        if grades[i] >=\
    \ 3.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letter_grades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letter_grades[i] = \"B\"\n        } else if grades[i] >=\
    \ 1.7 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.3 {\n            letter_grades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.0 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 {\n            letter_grades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 {\n            letter_grades[i] = \"D-\"\n        } else {\n           \
    \ letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n}\n\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpdvq0kah4_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpdvq0kah4_test.go:75: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpdvq0kah4_test.go:75: expected '[D D- C- B B+]', got '[D+\
    \ D- C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpdvq0kah4_test.go:75: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades =\
    \ append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpomahjezv_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075350
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n   \
    \         letterGrades[i] = \"D-\"\n        } else if grades[i] < 3.3 {\n    \
    \        letterGrades[i] = \"C-\"\n        } else if grades[i] < 3.7 {\n     \
    \       letterGrades[i] = \"C\"\n        } else if grades[i] < 4.0 {\n       \
    \     letterGrades[i] = \"B+\"\n        } else if grades[i] < 4.3 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] < 4.7 {\n          \
    \  letterGrades[i] = \"B-\"\n        } else if grades[i] < 5.0 {\n           \
    \ letterGrades[i] = \"A+\"\n        } else if grades[i] < 5.3 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] < 5.7 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] < 6.0 {\n            letterGrades[i] = \"\
    A\"\n        } else {\n            letterGrades[i] = \"A+\"\n        }\n    }\n\
    \    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0yju6yx5_test.go:81: expected '[A+ B C- C A-]', got '[B\
    \ C- D- D- C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp0yju6yx5_test.go:81: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp0yju6yx5_test.go:81: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp0yju6yx5_test.go:81:\
    \ expected '[D D- C- B B+]', got '[D- D- D- D- C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp0yju6yx5_test.go:81: expected '[E D-]', got '[D- D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 0.0 {\n            grade = grade + 3.0\n        }\n        if\
    \ grade < 2.0 {\n            grade = grade - 2.0\n        }\n        if grade\
    \ < 1.7 {\n            grade = grade - 1.7\n        }\n        if grade < 1.0\
    \ {\n            grade = grade - 1.0\n        }\n        if grade < 0.7 {\n  \
    \          grade = grade - 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade - 0.3\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade > 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade > 1.0 {\n            grade = grade + 1.0\n\
    \        }\n        if grade > 2.0 {\n            grade = grade + 2.0\n      \
    \  }\n        if grade > 3.0 {\n            grade = grade + 3.0\n        }\n \
    \       if grade > 3.7 {\n            grade = grade + 4.0\n        }\n       \
    \ if grade > 4.0 {\n            grade = grade + 5.0\n        }\n        if grade\
    \ > 5.0 {\n            grade = grade + 6.0\n        }\n        if grade > 6.0\
    \ {\n            grade = grade + 7.0\n        }\n        if grade > 7.0 {\n  \
    \          grade = grade + 8.0\n        }\n        if grade > 8.0 {\n        \
    \    grade = grade + 9.0\n        }\n        if grade > 9.0 {\n            grade\
    \ = grade + 10.0\n        }\n        if grade > 10.0 {\n            grade = grade\
    \ + 11.0\n        }\n        if grade > 11.0 {\n            grade = grade + 12.0\n\
    \        }\n        if grade > 12.0 {\n            grade = grade + 13.0\n    \
    \    }\n        if grade > 13.0 {\n            grade = grade + 14.0\n        }\n\
    \        if grade > 14.0 {\n            grade = grade + 15.0\n        }\n    \
    \    if grade > 15.0 {\n            grade = grade + 16.0\n        }\n        if\
    \ grade > 16.0 {\n            grade = grade + 17.0\n        }\n        if grade\
    \ > 17.0 {\n            grade = grade + 18.0\n        }\n        if grade > 18.0\
    \ {\n            grade = grade + 19.0\n        }\n        if grade > 19.0 {\n\
    \            grade = gra\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsxs1sfx7_test.go:119:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075483
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{}, grades...)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2_f6aaop_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72rggtbx_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n  \
    \          letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n  \
    \          letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n   \
    \         letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n   \
    \         letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n    \
    \        letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n    \
    \        letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n    \
    \        letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n     \
    \       letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"A+\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7l5j7s9h_test.go:79: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp7l5j7s9h_test.go:79: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7l5j7s9h_test.go:79: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp7l5j7s9h_test.go:79: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i]\
    \ >= 3.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letter_grades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] <= 1.3 {\n            letter_grades[i] = \"C\"\n       \
    \ } else if grades[i] >= 1.1 && grades[i] <= 0.7 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 0.7 && grades[i] <= 0.1 {\n       \
    \     letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.0 {\n      \
    \      letter_grades[i] = \"D\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0o46gs67_test.go:74: expected '[A+ B C- C A-]', got '[A+\
    \ A+ D D A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp0o46gs67_test.go:74: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp0o46gs67_test.go:74: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp0o46gs67_test.go:74:\
    \ expected '[E]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0o46gs67_test.go:74: expected '[D D- C- B B+]', got '[D\
    \ D D B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n \
    \       tmp0o46gs67_test.go:74: expected '[E D-]', got '[D D]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075485
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    \n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpyof0n_71_test.go:77: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpyof0n_71_test.go:77: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpyof0n_71_test.go:77: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpyof0n_71_test.go:77:\
    \ expected '[D D- C- B B+]', got '[D+ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpyof0n_71_test.go:77: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075485
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpj991icsv_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpj991icsv_test.go:76: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpj991icsv_test.go:76: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpj991icsv_test.go:76:\
    \ expected '[D D- C- B B+]', got '[D+ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpj991icsv_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075485
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{0.0}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc0kmurmb_test.go:65:46: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // Loop through each grade and add it to the letter grades\
    \ list\n    for i := 0; i < grades_len; i++ {\n        letter_grades[i] = \"\"\
    \n        \n        // Loop through each letter grade and add it to the letter\
    \ grades list\n        for j := 0; j < len(letter_grades); j++ {\n           \
    \ letter_grades[j] += letter_grades[j+1]\n        }\n        \n        // If the\
    \ grade is greater than or equal to 3.0 add \"A+\"\n        if grades[i] >= 3.0\
    \ {\n            letter_grades[i] += \"A+\"\n        }\n        \n        // If\
    \ the grade is greater than or equal to 3.7 add \"A\"\n        if grades[i] >=\
    \ 3.7 {\n            letter_grades[i] += \"A\"\n        }\n        \n        //\
    \ If the grade is greater than or equal to 3.3 add \"A-\"\n        if grades[i]\
    \ >= 3.3 {\n            letter_grades[i] += \"A-\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 3.0 add \"B+\"\n        if grades[i]\
    \ >= 3.0 {\n            letter_grades[i] += \"B+\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 2.7 add \"B\"\n        if grades[i]\
    \ >= 2.7 {\n            letter_grades[i] += \"B\"\n        }\n        \n     \
    \   // If the grade is greater than or equal to 2.3 add \"B-\"\n        if grades[i]\
    \ >= 2.3 {\n            letter_grades[i] += \"B-\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 2.0 add \"C+\"\n        if grades[i]\
    \ >= 2.0 {\n            letter_grades[i] += \"C+\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 1.7 add \"C\"\n        if grades[i]\
    \ >= 1.7 {\n            letter_grades[i] += \"C\"\n        }\n        \n     \
    \   // If the grade is greater than or equal to 1.3 add \"C-\"\n        if grades[i]\
    \ >= 1.3 {\n            letter_grades[i] += \"C-\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 1.0 add \"D+\"\n        if grades[i]\
    \ >= 1.0 {\n            letter_grades[i] += \"D+\"\n        }\n        \n    \
    \    // If the grade is greater than or equal to 0.7 add \"D\"\n        if grades[i]\
    \ >= 0.7 {\n            letter_grades[i] += \"D\"\n        }\n        \n     \
    \   // If the grade is greater than or equal to 0.0 add \"D-\"\n        if grades[i]\
    \ >= 0.0 {\n            letter_grades[i] += \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6gc19o4__test.go:101:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    letterGrades[gradesLen-2] = \"D\"\n    letterGrades[gradesLen-3] = \"\
    C-\"\n    letterGrades[gradesLen-4] = \"C\"\n    letterGrades[gradesLen-5] = \"\
    B-\"\n    letterGrades[gradesLen-6] = \"B\"\n    letterGrades[gradesLen-7] = \"\
    A-\"\n    letterGrades[gradesLen-8] = \"A\"\n    letterGrades[gradesLen-9] = \"\
    A+\"\n    letterGrades[gradesLen-10] = \"B+\"\n    letterGrades[gradesLen-11]\
    \ = \"C+\"\n    letterGrades[gradesLen-12] = \"C\"\n    letterGrades[gradesLen-13]\
    \ = \"B-\"\n    letterGrades[gradesLen-14] = \"B\"\n    letterGrades[gradesLen-15]\
    \ = \"A-\"\n    letterGrades[gradesLen-16] = \"A\"\n    letterGrades[gradesLen-17]\
    \ = \"A+\"\n    letterGrades[gradesLen-18] = \"B+\"\n    letterGrades[gradesLen-19]\
    \ = \"C+\"\n    letterGrades[gradesLen-20] = \"C\"\n    letterGrades[gradesLen-21]\
    \ = \"B-\"\n    letterGrades[gradesLen-22] = \"B\"\n    letterGrades[gradesLen-23]\
    \ = \"A-\"\n    letterGrades[gradesLen-24] = \"A\"\n    letterGrades[gradesLen-25]\
    \ = \"A+\"\n    letterGrades[gradesLen-26] = \"B+\"\n    letterGrades[gradesLen-27]\
    \ = \"C+\"\n    letterGrades[gradesLen-28] = \"C\"\n    letterGrades[gradesLen-29]\
    \ = \"B-\"\n    letterGrades[gradesLen-30] = \"B\"\n    letterGrades[gradesLen-31]\
    \ = \"A-\"\n    letterGrades[gradesLen-32] = \"A\"\n    letterGrades[gradesLen-33]\
    \ = \"A+\"\n    letterGrades[gradesLen-34] = \"B+\"\n    letterGrades[gradesLen-35]\
    \ = \"C+\"\n    letterGrades[gradesLen-\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpleuq718q_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Loop through all the grades and find the letter grade\n\
    \    for i := 0; i < gradesLen; i++ {\n        \n        // If the grade is greater\
    \ than or equal to 3.7\n        // then it is an A+\n        if grades[i] >= 3.7\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.3\
    \ {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.0 {\n\
    \            letterGrades[i] = \"A-\"\n        } else if grades[i] >= 2.7 {\n\
    \            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.0 {\n \
    \           letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 {\n \
    \           letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.0 {\n  \
    \          letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.7 {\n  \
    \          letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D\"\n        } else {\n            letterGrades[i]\
    \ = \"D-\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmprjujk3u8_test.go:86: expected '[A+ B C- C A-]', got '[A+\
    \ A- C+ B- A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmprjujk3u8_test.go:86: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmprjujk3u8_test.go:86: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmprjujk3u8_test.go:86:\
    \ expected '[E]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmprjujk3u8_test.go:86: expected '[D D- C- B B+]', got '[C-\
    \ D C B+ A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n \
    \       tmprjujk3u8_test.go:86: expected '[E D-]', got '[D D+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075485
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := range grades {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    grades\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl_q6d2hn_test.go:76:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    i := 0\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            result[i]\
    \ = \"A+\"\n        } else if grade > 2.7 {\n            result[i] = \"B+\"\n\
    \        } else if grade > 2.3 {\n            result[i] = \"B\"\n        } else\
    \ if grade > 1.7 {\n            result[i] = \"C+\"\n        } else if grade >\
    \ 1.3 {\n            result[i] = \"C\"\n        } else if grade > 0.7 {\n    \
    \        result[i] = \"C-\"\n        } else if grade > 0.3 {\n            result[i]\
    \ = \"D+\"\n        } else if grade > 0.0 {\n            result[i] = \"D\"\n \
    \       } else if grade > -0.3 {\n            result[i] = \"D-\"\n        } else\
    \ if grade > -0.7 {\n            result[i] = \"E\"\n        } else {\n       \
    \     result[i] = \"F\"\n        }\n        i++\n    }\n    return result\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpiqto5dd7_test.go:80: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpiqto5dd7_test.go:80: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpiqto5dd7_test.go:80: expected '[D-]', got '[D+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpiqto5dd7_test.go:80:\
    \ expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpiqto5dd7_test.go:80: expected '[D D- C- B B+]', got '[C-\
    \ D C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpiqto5dd7_test.go:80: expected '[E D-]', got '[D- D+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075485
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is always A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The second letter grade is always B\n    letter_grades[1]\
    \ = \"B\"\n    \n    // The third letter grade is always C- \n    letter_grades[2]\
    \ = \"C-\"\n    \n    // The fourth letter grade is always C\n    letter_grades[3]\
    \ = \"C\"\n    \n    // The fifth letter grade is always A-\n    letter_grades[4]\
    \ = \"A-\"\n    \n    // The sixth letter grade is always D+\n    letter_grades[5]\
    \ = \"D+\"\n    \n    // The seventh letter grade is always D\n    letter_grades[6]\
    \ = \"D\"\n    \n    // The eighth letter grade is always D-\n    letter_grades[7]\
    \ = \"D-\"\n    \n    // The ninth letter grade is always E\n    letter_grades[8]\
    \ = \"E\"\n    \n    // The tenth letter grade is always E\n    letter_grades[9]\
    \ = \"E\"\n    \n    // The eleventh letter grade is always E\n    letter_grades[10]\
    \ = \"E\"\n    \n    // The twelfth letter grade is always E\n    letter_grades[11]\
    \ = \"E\"\n    \n    // The thirteenth letter grade is always E\n    letter_grades[12]\
    \ = \"E\"\n    \n    // The fourteenth letter grade is always E\n    letter_grades[13]\
    \ = \"E\"\n    \n    // The fifteenth letter grade is always E\n    letter_grades[14]\
    \ = \"E\"\n    \n    // The sixteenth letter grade is always E\n    letter_grades[15]\
    \ = \"E\"\n    \n    // The seventeenth letter grade is always E\n    letter_grades[16]\
    \ = \"E\"\n    \n    // The eighteenth letter grade is always E\n    letter_grades[17]\
    \ = \"E\"\n    \n    // The nineteenth letter grade is always E\n    letter_grades[18]\
    \ = \"E\"\n    \n    // The twentieth letter grade is always E\n    letter_grades[19]\
    \ = \"E\"\n    \n    // The twenty-first letter grade is always E\n    letter_grades[20]\
    \ = \"E\"\n    \n    // The twenty-second letter gra\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgoanzmhr_test.go:98:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    letterGrades[gradesLen-2] = \"D\"\n    letterGrades[gradesLen-3] = \"\
    C-\"\n    letterGrades[gradesLen-4] = \"C\"\n    letterGrades[gradesLen-5] = \"\
    B+\"\n    letterGrades[gradesLen-6] = \"B\"\n    letterGrades[gradesLen-7] = \"\
    B-\"\n    letterGrades[gradesLen-8] = \"B\"\n    letterGrades[gradesLen-9] = \"\
    A+\"\n    letterGrades[gradesLen-10] = \"A\"\n    letterGrades[gradesLen-11] =\
    \ \"A-\"\n    letterGrades[gradesLen-12] = \"A\"\n    letterGrades[gradesLen-13]\
    \ = \"+\"\n    letterGrades[gradesLen-14] = \"A\"\n    letterGrades[gradesLen-15]\
    \ = \"-\"\n    letterGrades[gradesLen-16] = \"A\"\n    letterGrades[gradesLen-17]\
    \ = \"+\"\n    letterGrades[gradesLen-18] = \"A\"\n    letterGrades[gradesLen-19]\
    \ = \"-\"\n    letterGrades[gradesLen-20] = \"A\"\n    letterGrades[gradesLen-21]\
    \ = \"+\"\n    letterGrades[gradesLen-22] = \"A\"\n    letterGrades[gradesLen-23]\
    \ = \"-\"\n    letterGrades[gradesLen-24] = \"A\"\n    letterGrades[gradesLen-25]\
    \ = \"+\"\n    letterGrades[gradesLen-26] = \"A\"\n    letterGrades[gradesLen-27]\
    \ = \"-\"\n    letterGrades[gradesLen-28] = \"A\"\n    letterGrades[gradesLen-29]\
    \ = \"+\"\n    letterGrades[gradesLen-30] = \"A\"\n    letterGrades[gradesLen-31]\
    \ = \"-\"\n    letterGrades[gradesLen-32] = \"A\"\n    letterGrades[gradesLen-33]\
    \ = \"+\"\n    letterGrades[gradesLen-34] = \"A\"\n    letterGrades[gradesLen-35]\
    \ = \"-\"\n    letterGrades[gradesLen-36] = \"A\"\n    letterGrades[grades\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp08mvxcwe_test.go:70:24: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letterGrades := make([]string,\
    \ grades_len)\n    \n    // Calculate the average GPA\n    avg := 0.0\n    for\
    \ i := 0; i < grades_len; i++ {\n        avg += grades[i]\n    }\n    avg /= float64(grades_len)\n\
    \n    // Calculate the letter grade for each GPA\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] > avg {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] < avg {\n            letterGrades[i] = \"A-\"\n \
    \       } else {\n            letterGrades[i] = \"B+\"\n        }\n    }\n   \
    \ return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9gsban1k_test.go:72: expected '[A+ B C- C A-]', got '[A+\
    \ A+ A- A- A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp9gsban1k_test.go:72: expected '[D+]', got '[B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp9gsban1k_test.go:72: expected '[D-]', got '[B+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp9gsban1k_test.go:72:\
    \ expected '[E]', got '[B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp9gsban1k_test.go:72: expected '[D D- C- B B+]', got '[A-\
    \ A- A- A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp9gsban1k_test.go:72: expected '[E D-]', got '[A- A+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    gradesMax := gradesLen\
    \ - 1\n    gradesMin := 0\n    gradesSum, gradesAvg := 0.0, 0.0\n    gradesGrade\
    \ := \"\"\n    gradesLetterGrade := []string{}\n    for i := gradesMin; i <= gradesMax;\
    \ i++ {\n        gradesSum += grades[i]\n        gradesAvg = gradesSum / float64(gradesLen)\n\
    \        if gradesAvg >= 4.0 {\n            gradesGrade = \"A+\"\n        } else\
    \ if gradesAvg > 3.7 {\n            gradesGrade = \"A\"\n        } else if gradesAvg\
    \ > 3.3 {\n            gradesGrade = \"A-\"\n        } else if gradesAvg > 3.0\
    \ {\n            gradesGrade = \"B+\"\n        } else if gradesAvg > 2.7 {\n \
    \           gradesGrade = \"B\"\n        } else if gradesAvg > 2.3 {\n       \
    \     gradesGrade = \"B-\"\n        } else if gradesAvg > 2.0 {\n            gradesGrade\
    \ = \"C+\"\n        } else if gradesAvg > 1.7 {\n            gradesGrade = \"\
    C\"\n        } else if gradesAvg > 1.3 {\n            gradesGrade = \"C-\"\n \
    \       } else if gradesAvg > 1.0 {\n            gradesGrade = \"D+\"\n      \
    \  } else if gradesAvg > 0.7 {\n            gradesGrade = \"D\"\n        } else\
    \ if gradesAvg > 0.0 {\n            gradesGrade = \"D-\"\n        } else {\n \
    \           gradesGrade = \"E\"\n        }\n        gradesLetterGrade = append(gradesLetterGrade,\
    \ gradesGrade)\n    }\n    return gradesLetterGrade\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpbjtlvcvd_test.go:90: expected '[A+ B C- C A-]', got '[D\
    \ C- C C+ B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n\
    \        tmpbjtlvcvd_test.go:90: expected '[D D- C- B B+]', got '[D- D- D- D+\
    \ C]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{}, grades...)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2_f6aaop_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i]\
    \ = \"\"\n    }\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n \
    \           letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    \n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9f0utngb_test.go:89: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp9f0utngb_test.go:89: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp9f0utngb_test.go:89: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp9f0utngb_test.go:89: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    for i\
    \ := range grades {\n        if grades[i] < 3.0 {\n            result[i] = \"\
    E\"\n            continue\n        }\n        if grades[i] < 4.0 {\n         \
    \   result[i] = \"D+\"\n            continue\n        }\n        if grades[i]\
    \ < 5.0 {\n            result[i] = \"D-\"\n            continue\n        }\n \
    \       if grades[i] < 6.0 {\n            result[i] = \"C+\"\n            continue\n\
    \        }\n        if grades[i] < 7.0 {\n            result[i] = \"C\"\n    \
    \        continue\n        }\n        if grades[i] < 8.0 {\n            result[i]\
    \ = \"B-\"\n            continue\n        }\n        if grades[i] < 9.0 {\n  \
    \          result[i] = \"B\"\n            continue\n        }\n        if grades[i]\
    \ < 10.0 {\n            result[i] = \"A-\"\n            continue\n        }\n\
    \        if grades[i] < 11.0 {\n            result[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 12.0 {\n            result[i] = \"A+\"\n  \
    \          continue\n        }\n        result[i] = \"A\"\n    }\n    return result\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7hy2g3z9_test.go:96: expected '[A+ B C- C A-]', got '[D-\
    \ D+ E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp7hy2g3z9_test.go:96: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp7hy2g3z9_test.go:96: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp7hy2g3z9_test.go:96:\
    \ expected '[D D- C- B B+]', got '[E E E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp7hy2g3z9_test.go:96: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-1])\n    gradesSorted = append(gradesSorted, grades[len(grades)-2])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-3])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-4])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-5])\n    gradesSorted = append(gradesSorted, grades[len(grades)-6])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-7])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-8])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-9])\n    gradesSorted = append(gradesSorted, grades[len(grades)-10])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-11])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-12])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-13])\n    gradesSorted = append(gradesSorted, grades[len(grades)-14])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-15])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-16])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-17])\n    gradesSorted = append(gradesSorted, grades[len(grades)-18])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-19])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-20])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-21])\n    gradesSorted = append(gradesSorted, grades[len(grades)-22])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-23])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-24])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-25])\n    gradesSorted = append(gradesSorted, grades[len(grades)-26])\n\
    \    gradesSorted = append(grades\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph4kdzjgl_test.go:60:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    result := make([]string,\
    \ gradesLen)\n    \n    // The first letter grade is A+\n    result[0] = \"A+\"\
    \n    \n    // The second letter grade is B\n    for i := 1; i < gradesLen; i++\
    \ {\n        // If the current grade is greater than 3.7, then it is B+\n    \
    \    if grades[i] > 3.7 {\n            result[i] = \"B+\"\n        } else {\n\
    \            // If the current grade is greater than 3.3, then it is B\n     \
    \       if grades[i] > 3.3 {\n                result[i] = \"B\"\n            }\
    \ else {\n                // If the current grade is greater than 3.0, then it\
    \ is C+\n                if grades[i] > 3.0 {\n                    result[i] =\
    \ \"C+\"\n                } else {\n                    // If the current grade\
    \ is greater than 2.7, then it is C\n                    if grades[i] > 2.7 {\n\
    \                        result[i] = \"C\"\n                    } else {\n   \
    \                     // If the current grade is greater than 2.3, then it is\
    \ C-\n                        if grades[i] > 2.3 {\n                         \
    \   result[i] = \"C-\"\n                        } else {\n                   \
    \         // If the current grade is greater than 2.0, then it is D+\n       \
    \                     if grades[i] > 2.0 {\n                                result[i]\
    \ = \"D+\"\n                            } else {\n                           \
    \     // If the current grade is greater than 1.7, then it is D\n            \
    \                    if grades[i] > 1.7 {\n                                  \
    \  result[i] = \"D\"\n                                } else {\n             \
    \                       // If the current grade is greater than 1.3, then it is\
    \ D-\n                                    if grades[i] > 1.3 {\n             \
    \                           result[i] = \"D-\"\n                             \
    \       } else {\n                                        // If the current grade\
    \ is greater than 1.0, then it is E\n                                        if\
    \ grades[i] > 1.0 {\n                                            result[i] = \"\
    E\"\n                                        } else {\n                      \
    \                      // If the current grade is greater than 0.0, then it is\
    \ F\n                                            if grades[i] > 0.0 {\n      \
    \                                          result[i] = \"F\"\n               \
    \                             } else {\n                                     \
    \           // If the current grade is greater than 0.0, then it is F\n      \
    \                                          if grades[i] > 0.0 {\n            \
    \                                        result[i] = \"F\"\n                 \
    \                               }\n                                          \
    \  }\n                                        }\n                            \
    \        }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    \n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0trvrj7o_test.go:116: expected '[A+ B C- C A-]', got '[A+\
    \ C D- D B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n \
    \       tmp0trvrj7o_test.go:116: expected '[D+]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp0trvrj7o_test.go:116: expected '[D-]', got '[A+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp0trvrj7o_test.go:116:\
    \ expected '[E]', got '[A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0trvrj7o_test.go:116: expected '[D D- C- B B+]', got '[A+\
    \ F D- C C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp0trvrj7o_test.go:116: expected '[E D-]', got '[A+ F]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0\
    \ {\n            letter_grades[i] = \"E\"\n        } else if grades[i] >= 3.0\
    \ && grades[i] < 3.7 {\n            letter_grades[i] = \"D-\"\n        } else\
    \ if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"\
    C+\"\n        } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n        \
    \    letter_grades[i] = \"B\"\n        } else if grades[i] >= 4.7 && grades[i]\
    \ < 5.0 {\n            letter_grades[i] = \"A-\"\n        } else if grades[i]\
    \ >= 5.0 && grades[i] < 5.3 {\n            letter_grades[i] = \"A\"\n        }\
    \ else if grades[i] >= 5.3 && grades[i] < 5.7 {\n            letter_grades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 5.7 && grades[i] < 6.0 {\n        \
    \    letter_grades[i] = \"D\"\n        } else if grades[i] >= 6.0 {\n        \
    \    letter_grades[i] = \"D+\"\n        }\n    }\n    return letter_grades\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpda0yarjv_test.go:77: expected '[A+ B C- C A-]', got '[B+\
    \ D- E E D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpda0yarjv_test.go:77: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpda0yarjv_test.go:77: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpda0yarjv_test.go:77:\
    \ expected '[D D- C- B B+]', got '[E E E E D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpda0yarjv_test.go:77: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 3.0 {\n            grade = grade + 3.0\n        }\n        if\
    \ grade < 2.0 {\n            grade = grade + 2.0\n        }\n        if grade\
    \ < 1.7 {\n            grade = grade + 1.7\n        }\n        if grade < 1.0\
    \ {\n            grade = grade + 1.0\n        }\n        if grade < 0.7 {\n  \
    \          grade = grade + 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade + 0.3\n        }\n        if grade < 0.1 {\n            grade\
    \ = grade + 0.1\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade > 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade > 0.1 {\n            grade = grade + 0.1\n      \
    \  }\n        if grade > 0.3 {\n            grade = grade + 0.3\n        }\n \
    \       if grade > 0.7 {\n            grade = grade + 0.7\n        }\n       \
    \ if grade > 1.0 {\n            grade = grade + 1.0\n        }\n        if grade\
    \ > 2.0 {\n            grade = grade + 2.0\n        }\n        if grade > 3.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade > 4.0 {\n  \
    \          grade = grade + 4.0\n        }\n        if grade > 5.0 {\n        \
    \    grade = grade + 5.0\n        }\n        if grade > 6.0 {\n            grade\
    \ = grade + 6.0\n        }\n        if grade > 7.0 {\n            grade = grade\
    \ + 7.0\n        }\n        if grade > 8.0 {\n            grade = grade + 8.0\n\
    \        }\n        if grade > 9.0 {\n            grade = grade + 9.0\n      \
    \  }\n        if grade > 10.0 {\n            grade = grade + 10.0\n        }\n\
    \        if grade > 11.0 {\n            grade = grade + 11.0\n        }\n    \
    \    if grade > 12.0 {\n            grade = grade + 12.0\n        }\n        if\
    \ grade > 13.0 {\n            grade = grade + 13.0\n        }\n        if grade\
    \ > 14.0 {\n            grade = grade + 14.0\n        }\n        if grade > 15.0\
    \ {\n            grade = grade + 15.0\n        }\n        if grade > 16.0 {\n\
    \            grade = grade + 16.0\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7zl7pddv_test.go:120:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen\
    \ - 1] = \"D-\"\n    for i := 2; i < gradesLen; i++ {\n        if grades[i-1]\
    \ > grades[i] {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1]\
    \ < grades[i] {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1]\
    \ == grades[i] {\n            letterGrades[i] = \"A+\"\n        } else {\n   \
    \         letterGrades[i] = \"A\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out\
    \ of range [1] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0001d25d8, 0x1,\
    \ 0x0?})\n\t/tmp/tmponsji89t_test.go:34 +0x22d\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmponsji89t_test.go:58 +0x117\ntesting.tRunner(0xc00019b1e0, 0x529058)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesCount\
    \ := 0\n    gradesTotal := 0.0\n    for _, grade := range gradesSorted {\n   \
    \     gradesCount++\n        gradesTotal += grade\n    }\n\n    letterGrades :=\
    \ make([]string, gradesCount)\n    for i := 0; i < gradesCount; i++ {\n      \
    \  letter := \"\"\n        if gradesTotal >= gradesSorted[i] {\n            letter\
    \ = \"A+\"\n            gradesTotal -= gradesSorted[i]\n        } else {\n   \
    \         if gradesTotal >= gradesSorted[i+1] {\n                letter = \"A\"\
    \n                gradesTotal -= gradesSorted[i+1]\n            } else {\n   \
    \             if gradesTotal >= gradesSorted[i+2] {\n                    letter\
    \ = \"A-\"\n                    gradesTotal -= gradesSorted[i+2]\n           \
    \     } else {\n                    if gradesTotal >= gradesSorted[i+3] {\n  \
    \                      letter = \"B+\"\n                        gradesTotal -=\
    \ gradesSorted[i+3]\n                    } else {\n                        if\
    \ gradesTotal >= gradesSorted[i+4] {\n                            letter = \"\
    B\"\n                            gradesTotal -= gradesSorted[i+4]\n          \
    \              } else {\n                            if gradesTotal >= gradesSorted[i+5]\
    \ {\n                                letter = \"B-\"\n                       \
    \         gradesTotal -= gradesSorted[i+5]\n                            } else\
    \ {\n                                if gradesTotal >= gradesSorted[i+6] {\n \
    \                                   letter = \"C+\"\n                        \
    \            gradesTotal -= gradesSorted[i+6]\n                              \
    \  } else {\n                                    if gradesTotal >= gradesSorted[i+7]\
    \ {\n                                        letter = \"C\"\n                \
    \                        gradesTotal -= gradesSorted[i+7]\n                  \
    \                  } else {\n                                        if gradesTotal\
    \ >= gradesSorted[i+8] {\n                                            letter =\
    \ \"C-\"\n                                            gradesTotal -= gradesSorted[i+8]\n\
    \                                        } else {\n                          \
    \                  if gradesTotal >= gradesSorted[i+9] {\n                   \
    \                             letter = \"D+\"\n                              \
    \                  gradesTotal -= gradesSorted[i+9]\n                        \
    \                    } else {\n                                              \
    \  if gradesTotal >= gradesSorted[i+10] {\n                                  \
    \                  letter = \"D\"\n                                          \
    \          gradesTotal -= gradesSorted[i+10]\n                               \
    \                 } else {\n                                                 \
    \   if gradesTotal >= gradesSorted[i+11] {\n                                 \
    \                       letter = \"D-\"\n                                    \
    \                    gradesTotal -= gradesSorted[i+11]\n                     \
    \                               } else {\n                                   \
    \                     if gradesTotal >= gradesSorted[i+12] {\n               \
    \                                             letter = \"E\"\n               \
    \                                             grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph7t96b0e_test.go:96:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075486
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            result := append(result, fmt.Sprintf(\"\
    A+\"))\n        } else if grade > 2.7 {\n            result := append(result,\
    \ fmt.Sprintf(\"B\"))\n        } else if grade > 2.3 {\n            result :=\
    \ append(result, fmt.Sprintf(\"B-\"))\n        } else if grade > 2.0 {\n     \
    \       result := append(result, fmt.Sprintf(\"C+\"))\n        } else if grade\
    \ > 1.7 {\n            result := append(result, fmt.Sprintf(\"C\"))\n        }\
    \ else if grade > 1.3 {\n            result := append(result, fmt.Sprintf(\"C-\"\
    ))\n        } else if grade > 1.0 {\n            result := append(result, fmt.Sprintf(\"\
    D+\"))\n        } else if grade > 0.7 {\n            result := append(result,\
    \ fmt.Sprintf(\"D\"))\n        } else if grade > 0.0 {\n            result :=\
    \ append(result, fmt.Sprintf(\"D-\"))\n        } else {\n            result :=\
    \ append(result, fmt.Sprintf(\"E\"))\n        }\n    }\n    return result\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcc0_rkzo_test.go:34:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:36:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:38:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:40:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:42:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:44:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:46:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:48:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:50:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:52:13: result declared but not used

    /tmp/tmpcc0_rkzo_test.go:52:13: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The second letter grade is A if the GPA is > 3.7\n  \
    \  letter_grades[1] = \"A\"\n    \n    // The third letter grade is A if the GPA\
    \ is > 3.3\n    letter_grades[2] = \"A-\"\n    \n    // The fourth letter grade\
    \ is B+ if the GPA is > 2.7\n    letter_grades[3] = \"B+\"\n    \n    // The fifth\
    \ letter grade is B if the GPA is > 2.3\n    letter_grades[4] = \"B\"\n    \n\
    \    // The sixth letter grade is B- if the GPA is > 2.0\n    letter_grades[5]\
    \ = \"B-\"\n    \n    // The seventh letter grade is C+ if the GPA is > 1.7\n\
    \    letter_grades[6] = \"C+\"\n    \n    // The eighth letter grade is C if the\
    \ GPA is > 1.3\n    letter_grades[7] = \"C\"\n    \n    // The ninth letter grade\
    \ is C- if the GPA is > 1.0\n    letter_grades[8] = \"C-\"\n    \n    // The tenth\
    \ letter grade is D+ if the GPA is > 0.7\n    letter_grades[9] = \"D+\"\n    \n\
    \    // The eleventh letter grade is D if the GPA is > 0.0\n    letter_grades[10]\
    \ = \"D\"\n    \n    // The twelfth letter grade is D- if the GPA is < 0.0\n \
    \   letter_grades[11] = \"D-\"\n    \n    // The last letter grade is E if the\
    \ GPA is 0.0\n    letter_grades[12] = \"E\"\n    \n    // The function should\
    \ return a list of letter grades\n    // If the GPA is less than 0.0 the function\
    \ should return an empty list\n    // If the GPA is greater than 1.0 the function\
    \ should return an empty list\n    // If the GPA is greater than or equal to 0.0\
    \ the function should return an empty list\n    // If the GPA is less than or\
    \ equal to 0.0 the function should return an empty list\n    // If the GPA is\
    \ less than or equal to 1.0 the function should return an empty list\n    // If\
    \ the GPA is greater than or equal to 1.0 the function should return an empty\
    \ list\n    \n    // The function should return a list of letter grades\n    //\
    \ If the GPA is less than 0.0 the function should return an empty list\n    //\
    \ If the GPA is greater than 1.0 \nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps7uty3bl_test.go:84:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The second letter grade is A if GPA > 3.7\n    letter_grades[1]\
    \ = \"A\"\n    \n    // The third letter grade is A if GPA > 3.3\n    letter_grades[2]\
    \ = \"A-\"\n    \n    // The fourth letter grade is B+ if GPA > 3.0\n    letter_grades[3]\
    \ = \"B+\"\n    \n    // The fifth letter grade is B if GPA > 2.7\n    letter_grades[4]\
    \ = \"B\"\n    \n    // The sixth letter grade is B if GPA > 2.3\n    letter_grades[5]\
    \ = \"B-\"\n    \n    // The seventh letter grade is C+ if GPA > 2.0\n    letter_grades[6]\
    \ = \"C+\"\n    \n    // The eighth letter grade is C if GPA > 1.7\n    letter_grades[7]\
    \ = \"C\"\n    \n    // The ninth letter grade is C if GPA > 1.3\n    letter_grades[8]\
    \ = \"C-\"\n    \n    // The tenth letter grade is D+ if GPA > 1.0\n    letter_grades[9]\
    \ = \"D+\"\n    \n    // The eleventh letter grade is D if GPA > 0.7\n    letter_grades[10]\
    \ = \"D\"\n    \n    // The twelfth letter grade is D if GPA > 0.0\n    letter_grades[11]\
    \ = \"D-\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[12]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[13]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[14]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[15]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[16]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[17]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n    letter_grades[18]\
    \ = \"E\"\n    \n    // The letter grade is E if GPA = 0.0\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkjflqt7a_test.go:93:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := make([]float64, len(grades))\n    grades[0]\
    \ = grades[0]\n    grades[len(grades)-1] = grades[len(grades)-1]\n    \n    result\
    \ := make([]string, len(grades))\n    \n    i := 0\n    for i < len(grades)-1\
    \ {\n        if grades[i] > grades[i+1] {\n            result[i] = \"D+\"\n  \
    \          i += 2\n        } else if grades[i] < grades[i+1] {\n            result[i]\
    \ = \"D-\"\n            i += 2\n        } else {\n            result[i] = \"D\"\
    \n            i += 1\n        }\n    }\n    \n    for i < len(grades) {\n    \
    \    if grades[i] > grades[i+1] {\n            result[i] = \"D+\"\n          \
    \  i += 2\n        } else if grades[i] < grades[i+1] {\n            result[i]\
    \ = \"D-\"\n            i += 2\n        } else {\n            result[i] = \"D\"\
    \n            i += 1\n        }\n    }\n    \n    for i < len(grades) {\n    \
    \    if grades[i] > grades[i+1] {\n            result[i] = \"D+\"\n          \
    \  i += 2\n        } else if grades[i] < grades[i+1] {\n            result[i]\
    \ = \"D-\"\n            i += 2\n        } else {\n            result[i] = \"D\"\
    \n            i += 1\n        }\n    }\n    \n    for i < len(grades) {\n    \
    \    if grades[i] > grades[i+1] {\n            result[i] = \"D+\"\n          \
    \  i += 2\n        } else if grades[i] < grades[i+1] {\n            result[i]\
    \ = \"D-\"\n            i += 2\n        } else {\n            result[i] = \"D\"\
    \n            i += 1\n        }\n    }\n    \n    for i < len(grades) {\n    \
    \    if grades[i] > grades[i+1] {\n            result[i] = \"D+\"\n          \
    \  i += 2\n        } else if grades[i] < grades[i+1] {\n            result[i]\
    \ = \"D-\"\n            i += 2\n        } else {\n            result[i] = \"D\"\
    \n            i += 1\n        }\n    }\n    \n    for i < len(grades) {\n    \
    \    if grades[i] > grades[i+1] {\n            result[i] = \"D+\"\n          \
    \  i += 2\n        } else if grades[i] < grades[i+1] {\n            result[i]\
    \ = \"D-\"\n            i += 2\n        } else {\n            result[i] = \"D\"\
    \n            i += 1\n        }\n    }\n    \n    for i < len(grades) {\n    \
    \    if grades[i] > grades[i+1] {\n            result[i] = \"D+\"\n          \
    \  i += 2\n        } else if grades[i] < grades[i+1] {\n            result[i]\
    \ = \"D-\"\n            i += 2\n        } else {\n            result[i] = \"D\"\
    \n            i += 1\n        }\n    }\n    \n    for i < len(grades) {\n    \
    \    if grades[i] > grades[i+1] {\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpedry48u5_test.go:132:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letters := make([]string,\
    \ grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i]\
    \ >= 3.0 {\n            letters[i] = \"A+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letters[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n  \
    \          letters[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letters[i] = \"C\"\n        } else if grades[i] >= 1.3\
    \ && grades[i] < 2.7 {\n            letters[i] = \"C-\"\n        } else if grades[i]\
    \ >= 1.0 {\n            letters[i] = \"D+\"\n        } else if grades[i] >= 0.7\
    \ {\n            letters[i] = \"D\"\n        } else if grades[i] < 0.0 {\n   \
    \         letters[i] = \"D-\"\n        } else {\n            letters[i] = \"E\"\
    \n        }\n    }\n    return letters\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpgaikd7ql_test.go:76: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmpgaikd7ql_test.go:76: expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpgaikd7ql_test.go:76: expected '[D D- C- B B+]', got '[D+\
    \ E C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpgaikd7ql_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0\
    \ {\n            letterGrades[i] = \"E\"\n        } else if grades[i] >= 3.0 &&\
    \ grades[i] < 3.7 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"D-\"\n        }\
    \ else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.6 {\n          \
    \  letterGrades[i] = \"C\"\n        } else if grades[i] >= 4.6 && grades[i] <\
    \ 4.9 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 4.9 && grades[i] < 5.2 {\n            letterGrades[i] = \"B\"\n        } else\
    \ if grades[i] >= 5.2 && grades[i] < 5.5 {\n            letterGrades[i] = \"A-\"\
    \n        } else if grades[i] >= 5.5 && grades[i] < 5.8 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 5.8 && grades[i] < 6.1 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else {\n            letterGrades[i] =\
    \ \"A\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpi8y535h9_test.go:79: expected '[A+ B C- C A-]', got '[C+\
    \ D+ E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpi8y535h9_test.go:79: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpi8y535h9_test.go:79: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpi8y535h9_test.go:79:\
    \ expected '[D D- C- B B+]', got '[E E E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpi8y535h9_test.go:79: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := 0; i < len(grades); i++ {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphxslzxcl_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075486
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr3an72uj_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075354
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    \n   \
    \ // Write your code here\n    \n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpa4a_k7ib_test.go:56: expected '[A+ B C- C A-]', got '[ \
    \   ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n       \
    \ tmpa4a_k7ib_test.go:56: expected '[D+]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpa4a_k7ib_test.go:56: expected '[D-]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpa4a_k7ib_test.go:56:\
    \ expected '[E]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpa4a_k7ib_test.go:56: expected '[D D- C- B B+]', got '[ \
    \   ]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n       \
    \ tmpa4a_k7ib_test.go:56: expected '[E D-]', got '[ ]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075487
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = \"B+\"\n        } else if grade\
    \ > 2.7 {\n            grade = \"B\"\n        } else if grade > 2.3 {\n      \
    \      grade = \"B-\"\n        } else if grade > 2.0 {\n            grade = \"\
    C+\"\n        } else if grade > 1.7 {\n            grade = \"C\"\n        } else\
    \ if grade > 1.3 {\n            grade = \"C-\"\n        } else if grade > 1.0\
    \ {\n            grade = \"D+\"\n        } else if grade > 0.7 {\n           \
    \ grade = \"D\"\n        } else if grade > 0.0 {\n            grade = \"D-\"\n\
    \        } else {\n            grade = \"E\"\n        }\n        result = append(result,\
    \ grade)\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi3kc1xir_test.go:34:21: cannot use "B+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:36:21: cannot use "B" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:38:21: cannot use "B-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:40:21: cannot use "C+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:42:21: cannot use "C" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:44:21: cannot use "C-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:46:21: cannot use "D+" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:48:21: cannot use "D" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:50:21: cannot use "D-" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:52:21: cannot use "E" (untyped string constant) as float64
    value in assignment

    /tmp/tmpi3kc1xir_test.go:52:21: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade >= 3.0 {\n            result = append(result, fmt.Sprintf(\"\
    A+\"))\n        } else if grade >= 2.7 {\n            result = append(result,\
    \ fmt.Sprintf(\"B\"))\n        } else if grade >= 2.3 {\n            result =\
    \ append(result, fmt.Sprintf(\"B-\"))\n        } else if grade >= 2.0 {\n    \
    \        result = append(result, fmt.Sprintf(\"C+\"))\n        } else if grade\
    \ >= 1.7 {\n            result = append(result, fmt.Sprintf(\"C\"))\n        }\
    \ else if grade >= 1.3 {\n            result = append(result, fmt.Sprintf(\"C-\"\
    ))\n        } else if grade >= 1.0 {\n            result = append(result, fmt.Sprintf(\"\
    D+\"))\n        } else if grade >= 0.7 {\n            result = append(result,\
    \ fmt.Sprintf(\"D\"))\n        } else if grade >= 0.0 {\n            result =\
    \ append(result, fmt.Sprintf(\"D-\"))\n        } else {\n            result =\
    \ append(result, fmt.Sprintf(\"E\"))\n        }\n    }\n    return result\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpfl735c10_test.go:76: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpfl735c10_test.go:76: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpfl735c10_test.go:76: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpfl735c10_test.go:76: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades =\
    \ append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpomahjezv_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075350
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\n        }\
    \ else if grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n          \
    \  letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] <\
    \ 3.0 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else if\
    \ grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\n\
    \        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i]\
    \ < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n        } else\
    \ if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\
    \n        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n  \
    \  return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp63mf22kf_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp63mf22kf_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp63mf22kf_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp63mf22kf_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.3 {\n\
    \            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.0 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.3 {\n \
    \           letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.0 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp_7xffs6__test.go:77: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmp_7xffs6__test.go:77: expected '[D+]', got '[C]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmp_7xffs6__test.go:77: expected '[D-]', got '[D+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmp_7xffs6__test.go:77:\
    \ expected '[E]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp_7xffs6__test.go:77: expected '[D D- C- B B+]', got '[C\
    \ D+ C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp_7xffs6__test.go:77: expected '[E D-]', got '[D C-]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := 0; i < len(grades); i++ {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    \nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnbvh3hv7_test.go:67:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyacbzfsp_test.go:65:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075353
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 2; i < gradesLen; i++ {\n        if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"A\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out\
    \ of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45d8, 0x1,\
    \ 0x0?})\n\t/tmp/tmpd89ucdg3_test.go:34 +0x1ec\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpd89ucdg3_test.go:58 +0x117\ntesting.tRunner(0xc0001a0340, 0x529058)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpk08bvp9z_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075354
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    letterGrades[gradesLen-2] = \"D\"\n    letterGrades[gradesLen-3] = \"\
    C-\"\n    letterGrades[gradesLen-4] = \"C\"\n    letterGrades[gradesLen-5] = \"\
    B-\"\n    letterGrades[gradesLen-6] = \"B\"\n    letterGrades[gradesLen-7] = \"\
    A-\"\n    letterGrades[gradesLen-8] = \"A\"\n    letterGrades[gradesLen-9] = \"\
    A+\"\n    letterGrades[gradesLen-10] = \"B+\"\n    letterGrades[gradesLen-11]\
    \ = \"C+\"\n    letterGrades[gradesLen-12] = \"C\"\n    letterGrades[gradesLen-13]\
    \ = \"B-\"\n    letterGrades[gradesLen-14] = \"B\"\n    letterGrades[gradesLen-15]\
    \ = \"A-\"\n    letterGrades[gradesLen-16] = \"A\"\n    letterGrades[gradesLen-17]\
    \ = \"A+\"\n    letterGrades[gradesLen-18] = \"B+\"\n    letterGrades[gradesLen-19]\
    \ = \"C+\"\n    letterGrades[gradesLen-20] = \"C\"\n    letterGrades[gradesLen-21]\
    \ = \"B-\"\n    letterGrades[gradesLen-22] = \"B\"\n    letterGrades[gradesLen-23]\
    \ = \"A-\"\n    letterGrades[gradesLen-24] = \"A\"\n    letterGrades[gradesLen-25]\
    \ = \"A+\"\n    letterGrades[gradesLen-26] = \"B+\"\n    letterGrades[gradesLen-27]\
    \ = \"C+\"\n    letterGrades[gradesLen-28] = \"C\"\n    letterGrades[gradesLen-29]\
    \ = \"B-\"\n    letterGrades[gradesLen-30] = \"B\"\n    letterGrades[gradesLen-31]\
    \ = \"A-\"\n    letterGrades[gradesLen-32] = \"A\"\n    letterGrades[gradesLen-33]\
    \ = \"A+\"\n    letterGrades[gradesLen-34] = \"B+\"\n    letterGrades[gradesLen-35]\
    \ = \"C+\"\n    letterGrades[gradesLen-\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpleuq718q_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] < 3.3 {\n \
    \           letterGrades[i] = \"C\"\n        } else if grades[i] < 3.7 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] < 4.0 {\n    \
    \        letterGrades[i] = \"B\"\n        } else if grades[i] < 4.3 {\n      \
    \      letterGrades[i] = \"A-\"\n        } else if grades[i] < 4.7 {\n       \
    \     letterGrades[i] = \"A\"\n        } else if grades[i] < 5.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out\
    \ of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45d8, 0x1,\
    \ 0x0?})\n\t/tmp/tmp6ni5od87_test.go:34 +0x473\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmp6ni5od87_test.go:66 +0x117\ntesting.tRunner(0xc0001a0340, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    for i\
    \ := 0; i < len(grades); i++ {\n        if grades[i] < 3.0 {\n            result[i]\
    \ = \"E\"\n        } else {\n            switch {\n            case grades[i]\
    \ >= 3.0:\n                result[i] = \"D+\"\n            case grades[i] >= 2.7:\n\
    \                result[i] = \"D\"\n            case grades[i] >= 2.3:\n     \
    \           result[i] = \"C-\"\n            case grades[i] >= 2.0:\n         \
    \       result[i] = \"C\"\n            case grades[i] >= 1.7:\n              \
    \  result[i] = \"B+\"\n            case grades[i] >= 1.3:\n                result[i]\
    \ = \"B\"\n            case grades[i] >= 1.0:\n                result[i] = \"\
    A+\"\n            case grades[i] >= 0.7:\n                result[i] = \"A\"\n\
    \            case grades[i] >= 0.0:\n                result[i] = \"A-\"\n    \
    \        default:\n                result[i] = \"A+\"\n            }\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmptlt8szyn_test.go:81: expected '[A+ B C- C A-]', got '[D+\
    \ D+ E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmptlt8szyn_test.go:81: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmptlt8szyn_test.go:81: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmptlt8szyn_test.go:81:\
    \ expected '[D D- C- B B+]', got '[E E E E D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmptlt8szyn_test.go:81: expected '[E D-]', got '[E E]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    var gpas []float64\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            gpas\
    \ = append(gpas, grade)\n        }\n    }\n    for _, grade := range gpas{\n \
    \       if grade > 3.0 {\n            letterGrades = append(letterGrades, \"A+\"\
    )\n        }\n        if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        }\n        if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        }\n        if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        }\n        if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        }\n        if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        }\n        if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        }\n        if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        }\n        if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppnu81dpl_test.go:88: expected '[A+ B C- C A-]', got '[A+\
    \ B B- C C- D+ D D- E A+ B B- C C- D+ D D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmppnu81dpl_test.go:88: expected '[D+]', got '[]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmppnu81dpl_test.go:88:\
    \ expected '[D-]', got '[]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmppnu81dpl_test.go:88: expected '[E]', got '[]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmppnu81dpl_test.go:88:\
    \ expected '[D D- C- B B+]', got '[A+ B B- C C- D+ D D- E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmppnu81dpl_test.go:88: expected '[E D-]', got '[]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr3an72uj_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075354
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpj991icsv_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpj991icsv_test.go:76: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpj991icsv_test.go:76: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpj991icsv_test.go:76:\
    \ expected '[D D- C- B B+]', got '[D+ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpj991icsv_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075485
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpiu_dofsv_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075353
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is always A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are calculated using the formula\n\
    \    // letter_grade = (GPA - lowest_grade) / highest_grade * 100\n    // The\
    \ lowest grade is always 0\n    lowest_grade := 0\n    \n    // The highest grade\
    \ is always 100\n    highest_grade := 100\n    \n    // The middle grade is calculated\
    \ using the formula\n    // middle_grade = (GPA - lowest_grade) / highest_grade\
    \ * 100\n    // The middle grade is always 0\n    middle_grade := 0\n    \n  \
    \  // The middle grade is calculated using the formula\n    // middle_grade =\
    \ (GPA - lowest_grade) / highest_grade * 100\n    // The middle grade is always\
    \ 0\n    middle_grade := 0\n    \n    // The middle grade is calculated using\
    \ the formula\n    // middle_grade = (GPA - lowest_grade) / highest_grade * 100\n\
    \    // The middle grade is always 0\n    middle_grade := 0\n    \n    // The\
    \ middle grade is calculated using the formula\n    // middle_grade = (GPA - lowest_grade)\
    \ / highest_grade * 100\n    // The middle grade is always 0\n    middle_grade\
    \ := 0\n    \n    // The middle grade is calculated using the formula\n    //\
    \ middle_grade = (GPA - lowest_grade) / highest_grade * 100\n    // The middle\
    \ grade is always 0\n    middle_grade := 0\n    \n    // The middle grade is calculated\
    \ using the formula\n    // middle_grade = (GPA - lowest_grade) / highest_grade\
    \ * 100\n    // The middle grade is always 0\n    middle_grade := 0\n    \n  \
    \  // The middle grade is calculated using the formula\n    // middle_grade =\
    \ (GPA - lowest_grade) / highest_grade * 100\n    // The middle grade is always\
    \ 0\n    middle_grade := 0\n    \n    // The middle grade is calculated using\
    \ the formula\n    // middle_grade = (GPA - lowest_grade) / highest_grade * 100\n\
    \    // The middle grade is always 0\n    middle_grade := 0\n    \n    // The\
    \ middle grade is calculated using the \nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf8sxiqa1_test.go:89:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    \n   \
    \ for i := range grades {\n        if grades[i] >= 4.0 {\n            result[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            result[i] = \"A\"\
    \n        } else if grades[i] >= 3.3 {\n            result[i] = \"A-\"\n     \
    \   } else if grades[i] >= 3.0 {\n            result[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            result[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n  \
    \          result[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n         \
    \   result[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n            result[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 {\n            result[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 {\n            result[i] = \"D-\"\n     \
    \   } else {\n            result[i] = \"E\"\n        }\n    }\n    \n    return\
    \ result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp230wvcpw_test.go:84: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp230wvcpw_test.go:84: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp230wvcpw_test.go:84: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp230wvcpw_test.go:84: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{}, grades...)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2_f6aaop_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 3.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 3.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.7)\n    gradesSorted = append(gradesSorted, 2.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 1.7)\n    gradesSorted = append(gradesSorted,\
    \ 1.3)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.7)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSor\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppljt7t3c_test.go:74:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    result := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0\
    \ {\n            result[i] = \"E\"\n            continue\n        }\n        if\
    \ grades[i] < 3.3 {\n            result[i] = \"D-\"\n            continue\n  \
    \      }\n        if grades[i] < 3.7 {\n            result[i] = \"C+\"\n     \
    \       continue\n        }\n        if grades[i] < 4.0 {\n            result[i]\
    \ = \"B+\"\n            continue\n        }\n        if grades[i] < 4.3 {\n  \
    \          result[i] = \"B\"\n            continue\n        }\n        if grades[i]\
    \ < 4.7 {\n            result[i] = \"B-\"\n            continue\n        }\n \
    \       if grades[i] < 5.0 {\n            result[i] = \"A+\"\n            continue\n\
    \        }\n        if grades[i] < 5.3 {\n            result[i] = \"A\"\n    \
    \        continue\n        }\n        if grades[i] < 5.7 {\n            result[i]\
    \ = \"A-\"\n            continue\n        }\n        if grades[i] < 6.0 {\n  \
    \          result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 6.3 {\n            result[i] = \"A+\"\n            continue\n        }\n \
    \       if grades[i] < 6.7 {\n            result[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 7.0 {\n            result[i] = \"B+\"\n   \
    \         continue\n        }\n        if grades[i] < 7.3 {\n            result[i]\
    \ = \"B\"\n            continue\n        }\n        if grades[i] < 7.7 {\n   \
    \         result[i] = \"B-\"\n            continue\n        }\n        if grades[i]\
    \ < 8.0 {\n            result[i] = \"C+\"\n            continue\n        }\n \
    \       if grades[i] < 8.3 {\n            result[i] = \"C\"\n            continue\n\
    \        }\n        if grades[i] < 8.7 {\n            result[i] = \"C-\"\n   \
    \         continue\n        }\n        if grades[i] < 9.0 {\n            result[i]\
    \ = \"C\"\n            continue\n        }\n        if grades[i] < 9.3 {\n   \
    \         result[i] = \"C+\"\n            continue\n        }\n        if grades[i]\
    \ < 9.7 {\n            result[i] = \"C\"\n            continue\n        }\n  \
    \      if grades[i] < 10.0 {\n            result[i] = \"D+\"\n            continue\n\
    \        }\n        if grades[i] < 10.3 {\n            result[i] = \"D\"\n   \
    \         continue\n        }\n        if grades[i] < 10.7 {\n            result[i]\
    \ = \"D-\"\n            continue\n        }\n        if grades[i] < 11.0 {\n \
    \           result[i] = \"D\"\n            continue\n        }\n        if grades[i]\
    \ < 11.3 {\n            result[i] = \"D+\"\n            continue\n        }\n\
    \        if grades[i] < 11.7 {\n            result[i] = \"D\"\n            continue\n\
    \        }\n        if grades[i] < 12.0 {\n            result[i] = \"E\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1pishbd4_test.go:143:25: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 0.0 {\n            grade = grade + 3.0\n        }\n        if\
    \ grade < 2.0 {\n            grade = grade - 2.0\n        }\n        if grade\
    \ < 1.7 {\n            grade = grade - 1.7\n        }\n        if grade < 1.0\
    \ {\n            grade = grade - 1.0\n        }\n        if grade < 0.7 {\n  \
    \          grade = grade - 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade - 0.3\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < -0.3 {\n            grade = grade\
    \ + 0.3\n        }\n        if grade < -0.7 {\n            grade = grade + 0.7\n\
    \        }\n        if grade < -1.0 {\n            grade = grade + 1.0\n     \
    \   }\n        if grade < -2.0 {\n            grade = grade + 2.0\n        }\n\
    \        if grade < -3.0 {\n            grade = grade + 3.0\n        }\n     \
    \   if grade < -4.0 {\n            grade = grade + 4.0\n        }\n        if\
    \ grade < -5.0 {\n            grade = grade + 5.0\n        }\n        if grade\
    \ < -6.0 {\n            grade = grade + 6.0\n        }\n        if grade < -7.0\
    \ {\n            grade = grade + 7.0\n        }\n        if grade < -8.0 {\n \
    \           grade = grade + 8.0\n        }\n        if grade < -9.0 {\n      \
    \      grade = grade + 9.0\n        }\n        if grade < -10.0 {\n          \
    \  grade = grade + 10.0\n        }\n        if grade < -11.0 {\n            grade\
    \ = grade + 11.0\n        }\n        if grade < -12.0 {\n            grade = grade\
    \ + 12.0\n        }\n        if grade < -13.0 {\n            grade = grade + 13.0\n\
    \        }\n        if grade < -14.0 {\n            grade = grade + 14.0\n   \
    \     }\n        if grade < -15.0 {\n            grade = grade + 15.0\n      \
    \  }\n        if grade < -16.0 {\n            grade = grade + 16.0\n        }\n\
    \        if grade < -17.0 {\n            grade = grade + 17.0\n        }\n   \
    \     if grade < -18.0 {\n            grade = grade + 18.0\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4r_i8tdd_test.go:117:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075487
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppljr5ja4_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := make([]float64, len(grades))\n    grades[0]\
    \ = 4.0\n    grades[1] = 3.7\n    grades[2] = 3.3\n    grades[3] = 3.0\n    grades[4]\
    \ = 2.7\n    grades[5] = 2.3\n    grades[6] = 2.0\n    grades[7] = 1.7\n    grades[8]\
    \ = 1.3\n    grades[9] = 1.0\n    grades[10] = 0.7\n    grades[11] = 0.0\n   \
    \ grades[12] = 0.0\n    grades[13] = 0.0\n    grades[14] = 0.0\n    grades[15]\
    \ = 0.0\n    grades[16] = 0.0\n    grades[17] = 0.0\n    grades[18] = 0.0\n  \
    \  grades[19] = 0.0\n    grades[20] = 0.0\n    grades[21] = 0.0\n    grades[22]\
    \ = 0.0\n    grades[23] = 0.0\n    grades[24] = 0.0\n    grades[25] = 0.0\n  \
    \  grades[26] = 0.0\n    grades[27] = 0.0\n    grades[28] = 0.0\n    grades[29]\
    \ = 0.0\n    grades[30] = 0.0\n    grades[31] = 0.0\n    grades[32] = 0.0\n  \
    \  grades[33] = 0.0\n    grades[34] = 0.0\n    grades[35] = 0.0\n    grades[36]\
    \ = 0.0\n    grades[37] = 0.0\n    grades[38] = 0.0\n    grades[39] = 0.0\n  \
    \  grades[40] = 0.0\n    grades[41] = 0.0\n    grades[42] = 0.0\n    grades[43]\
    \ = 0.0\n    grades[44] = 0.0\n    grades[45] = 0.0\n    grades[46] = 0.0\n  \
    \  grades[47] = 0.0\n    grades[48] = 0.0\n    grades[49] = 0.0\n    grades[50]\
    \ = 0.0\n    grades[51] = 0.0\n    grades[52] = 0.0\n    grades[53] = 0.0\n  \
    \  grades[54] = 0.0\n    grades[55] = 0.0\n    grades[56] = 0.0\n    grades[57]\
    \ = 0.0\n    grades[58] = 0.0\n    grades[59] = 0.0\n    grades[60] = 0.0\n  \
    \  grades[61] = 0.0\n    grades[62] = 0.0\n    grades[63] = 0.0\n    grades[64]\
    \ = 0.0\n    grades[65] = 0.0\n    grades[66] = 0.0\n    grades[67] = 0.0\n  \
    \  grades[68] = 0.0\n    grades[69] = 0.0\n    grades[70] = 0.0\n    grades[71]\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpok6crto9_test.go:104:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075350
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    var gpas []float64\n\
    \    var letter string\n    var i int\n    for i = 0; i < len(grades); i++ {\n\
    \        gpas = append(gpas, grades[i])\n    }\n    for i = 0; i < len(gpas);\
    \ i++ {\n        if gpas[i] > 3.0 {\n            letter = \"B+\"\n        } else\
    \ if gpas[i] > 2.7 {\n            letter = \"B\"\n        } else if gpas[i] >\
    \ 2.3 {\n            letter = \"B-\"\n        } else if gpas[i] > 2.0 {\n    \
    \        letter = \"C+\"\n        } else if gpas[i] > 1.7 {\n            letter\
    \ = \"C\"\n        } else if gpas[i] > 1.3 {\n            letter = \"C-\"\n  \
    \      } else if gpas[i] > 1.0 {\n            letter = \"D+\"\n        } else\
    \ if gpas[i] > 0.7 {\n            letter = \"D\"\n        } else if gpas[i] >\
    \ 0.0 {\n            letter = \"D-\"\n        } else {\n            letter = \"\
    E\"\n        }\n        grades_string = append(grades_string, letter)\n    }\n\
    \    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpu6jnioo7_test.go:83: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // The first letter grade is always A+\n    letterGrades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always E\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    \n    // The middle letter grades are calculated using the formula\n\
    \    // GPA * 100 / GPA - 100\n    for i := 1; i < gradesLen; i++ {\n        letterGrades[i]\
    \ = fmt.Sprintf(\"%+.2f\", grades[i]*100/grades[i-1]-100)\n    }\n    \n    return\
    \ letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp1pd7_ioc_test.go:67: expected '[A+ B C- C A-]', got '[A+\
    \ -25.00 -43.33 +17.65 +75.00]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmp1pd7_ioc_test.go:67: expected '[D+]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp1pd7_ioc_test.go:67:\
    \ expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp1pd7_ioc_test.go:67: expected '[D D- C- B B+]', got '[A+\
    \ -70.00 +400.00 +86.67 +17.86]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp1pd7_ioc_test.go:67: expected '[E D-]', got '[A+ +Inf]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp4bv1zgid_test.go:74: expected '[A+ B C- C A-]', got '[C+\
    \ B C C C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n \
    \       tmp4bv1zgid_test.go:74: expected '[D D- C- B B+]', got '[D D- C B C+]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    gradesMax := gradesLen\
    \ - 1\n    gradesMin := 0\n    gradesSum, gradesProduct, gradesAvg := 0, 0, 0\n\
    \    for i := 0; i < gradesLen; i++ {\n        gradesSum += grades[i]\n      \
    \  gradesProduct *= grades[i]\n        gradesAvg += grades[i]\n    }\n    gradesAvg\
    \ /= float64(gradesLen)\n    gradesProduct /= float64(gradesLen)\n    gradesSum\
    \ /= float64(gradesLen)\n    gradesMax /= float64(gradesLen)\n    gradesMin /=\
    \ float64(gradesLen)\n    gradesMax += gradesMin\n    gradesSum -= gradesAvg\n\
    \    gradesProduct -= gradesAvg\n    gradesAvg /= float64(gradesLen)\n    gradesProduct\
    \ /= float64(gradesLen)\n    gradesSum /= float64(gradesLen)\n    gradesMax /=\
    \ float64(gradesLen)\n    gradesMin /= float64(gradesLen)\n    gradesMax += gradesMin\n\
    \    gradesSum -= gradesAvg\n    gradesProduct -= gradesAvg\n    gradesAvg /=\
    \ float64(gradesLen)\n    gradesProduct /= float64(gradesLen)\n    gradesSum /=\
    \ float64(gradesLen)\n    gradesMax /= float64(gradesLen)\n    gradesMin /= float64(gradesLen)\n\
    \    gradesMax += gradesMin\n    gradesSum -= gradesAvg\n    gradesProduct -=\
    \ gradesAvg\n    gradesAvg /= float64(gradesLen)\n    gradesProduct /= float64(gradesLen)\n\
    \    gradesSum /= float64(gradesLen)\n    gradesMax /= float64(gradesLen)\n  \
    \  gradesMin /= float64(gradesLen)\n    gradesMax += gradesMin\n    gradesSum\
    \ -= gradesAvg\n    gradesProduct -= gradesAvg\n    gradesAvg /= float64(gradesLen)\n\
    \    gradesProduct /= float64(gradesLen)\n    gradesSum /= float64(gradesLen)\n\
    \    gradesMax /= float64(gradesLen)\n    gradesMin /= float64(gradesLen)\n  \
    \  gradesMax += gradesMin\n    grades\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprmm5b_q0_test.go:79:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075488
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    \n    // The first letter\
    \ grade is always A+\n    result := append(result, \"A+\")\n    \n    // The second\
    \ letter grade is always B\n    result := append(result, \"B\")\n    \n    //\
    \ The third letter grade is always C- \n    result := append(result, \"C-\")\n\
    \    \n    // The fourth letter grade is always C\n    result := append(result,\
    \ \"C\")\n    \n    // The fifth letter grade is always A-\n    result := append(result,\
    \ \"A-\")\n    \n    // The sixth letter grade is always D+\n    result := append(result,\
    \ \"D+\")\n    \n    // The seventh letter grade is always D\n    result := append(result,\
    \ \"D\")\n    \n    // The eighth letter grade is always D-\n    result := append(result,\
    \ \"D-\")\n    \n    // The ninth letter grade is always E\n    result := append(result,\
    \ \"E\")\n    \n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppuyoa27v_test.go:34:12: no new variables on left side of :=

    /tmp/tmppuyoa27v_test.go:37:12: no new variables on left side of :=

    /tmp/tmppuyoa27v_test.go:40:12: no new variables on left side of :=

    /tmp/tmppuyoa27v_test.go:43:12: no new variables on left side of :=

    /tmp/tmppuyoa27v_test.go:46:12: no new variables on left side of :=

    /tmp/tmppuyoa27v_test.go:49:12: no new variables on left side of :=

    /tmp/tmppuyoa27v_test.go:52:12: no new variables on left side of :=

    /tmp/tmppuyoa27v_test.go:55:12: no new variables on left side of :=

    /tmp/tmppuyoa27v_test.go:58:12: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    gradesGPA := make([]float64,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        gradesGPA[i] = grades[i]\n\
    \    }\n    gradesGPA[0] = gradesGPA[0] / 4.0\n    gradesGPA[1] = gradesGPA[1]\
    \ / 3.7\n    gradesGPA[2] = gradesGPA[2] / 3.3\n    gradesGPA[3] = gradesGPA[3]\
    \ / 3.0\n    gradesGPA[4] = gradesGPA[4] / 2.7\n    gradesGPA[5] = gradesGPA[5]\
    \ / 2.3\n    gradesGPA[6] = gradesGPA[6] / 2.0\n    gradesGPA[7] = gradesGPA[7]\
    \ / 1.7\n    gradesGPA[8] = gradesGPA[8] / 1.3\n    gradesGPA[9] = gradesGPA[9]\
    \ / 1.0\n    gradesGPA[10] = gradesGPA[10] / 0.7\n    gradesGPA[11] = gradesGPA[11]\
    \ / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1] / 0.0\n    gradesGPA[gradesLen]\
    \ = gradesGPA[gradesLen] / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1]\
    \ / 0.0\n    gradesGPA[gradesLen] = gradesGPA[gradesLen] / 0.0\n    gradesGPA[gradesLen-1]\
    \ = gradesGPA[gradesLen-1] / 0.0\n    gradesGPA[gradesLen] = gradesGPA[gradesLen]\
    \ / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1] / 0.0\n    gradesGPA[gradesLen]\
    \ = gradesGPA[gradesLen] / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1]\
    \ / 0.0\n    gradesGPA[gradesLen] = gradesGPA[gradesLen] / 0.0\n    gradesGPA[gradesLen-1]\
    \ = gradesGPA[gradesLen-1] / 0.0\n    gradesGPA[gradesLen] = gradesGPA[gradesLen]\
    \ / 0.0\n    gradesGPA[gradesLen-1] = gradesGPA[grades\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph_1ah2_7_test.go:60:46: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := range gradesSorted {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[2]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[0] -= gradesSorted[3]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-4]\n    gradesSorted[0] -= gradesSorted[4]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-5]\n\
    \    gradesSorted[0] -= gradesSorted[5]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-6]\n    gradesSorted[0] -= gradesSorted[6]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-7]\n\
    \    gradesSorted[0] -= gradesSorted[7]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-8]\n    gradesSorted[0] -= gradesSorted[8]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-9]\n\
    \    gradesSorted[0] -= gradesSorted[9]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-10]\n    gradesSorted[0] -= gradesSorted[10]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-11]\n\
    \    gradesSorted[0] -= gradesSorted[11]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-12]\n    gradesSorted[0] -= gradesSorted[12]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-13]\n\
    \    gradesSorted[0] -= gradesSorted[13]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-14]\n    gradesSorted[0] -= gradesSorted[14\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuntmjdm9_test.go:64:39: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSor\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpev37ress_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[1] = \"D-\"\n    letterGrades[2]\
    \ = \"D\"\n    letterGrades[3] = \"C-\"\n    letterGrades[4] = \"C\"\n    letterGrades[5]\
    \ = \"B-\"\n    letterGrades[6] = \"B\"\n    letterGrades[7] = \"A-\"\n    letterGrades[8]\
    \ = \"A+\"\n    letterGrades[9] = \"A\"\n    letterGrades[10] = \"B+\"\n    letterGrades[11]\
    \ = \"B\"\n    letterGrades[12] = \"C+\"\n    letterGrades[13] = \"C\"\n    letterGrades[14]\
    \ = \"D+\"\n    letterGrades[15] = \"D\"\n    letterGrades[16] = \"D-\"\n    letterGrades[17]\
    \ = \"E\"\n    letterGrades[18] = \"F\"\n    letterGrades[19] = \"F+\"\n    letterGrades[20]\
    \ = \"F\"\n    letterGrades[21] = \"F-\"\n    letterGrades[22] = \"F\"\n    letterGrades[23]\
    \ = \"F+\"\n    letterGrades[24] = \"F\"\n    letterGrades[25] = \"F-\"\n    letterGrades[26]\
    \ = \"F\"\n    letterGrades[27] = \"F+\"\n    letterGrades[28] = \"F\"\n    letterGrades[29]\
    \ = \"F-\"\n    letterGrades[30] = \"F\"\n    letterGrades[31] = \"F+\"\n    letterGrades[32]\
    \ = \"F\"\n    letterGrades[33] = \"F-\"\n    letterGrades[34] = \"F\"\n    letterGrades[35]\
    \ = \"F+\"\n    letterGrades[36] = \"F\"\n    letterGrades[37] = \"F-\"\n    letterGrades[38]\
    \ = \"F\"\n    letterGrades[39] = \"F+\"\n    letterGrades[40] = \"F\"\n    letterGrades[41]\
    \ = \"F-\"\n    letterGrades[42] = \"F\"\n    letterGrades[43] = \"F+\"\n    letterGrades[44]\
    \ = \"F\"\n    letterGrades[45] = \"F-\"\n    letterGrades[46] = \"F\"\n    letterGrades[47]\
    \ = \"F+\"\n    letterGrades[48] = \"F\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4v1eb2nf_test.go:81:24: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[gradesSorted\
    \ == 0] = -1.0\n    gradesSorted[gradesSorted < 0] = -1.0\n    gradesSorted[gradesSorted\
    \ > 0] = 0.0\n    gradesSorted[gradesSorted == -1.0] = 1.0\n    gradesSorted[gradesSorted\
    \ == 1.0] = 2.0\n    gradesSorted[gradesSorted == 2.0] = 3.0\n    gradesSorted[gradesSorted\
    \ == 3.0] = 4.0\n    gradesSorted[gradesSorted == 4.0] = 5.0\n    gradesSorted[gradesSorted\
    \ == 5.0] = 6.0\n    gradesSorted[gradesSorted == 6.0] = 7.0\n    gradesSorted[gradesSorted\
    \ == 7.0] = 8.0\n    gradesSorted[gradesSorted == 8.0] = 9.0\n    gradesSorted[gradesSorted\
    \ == 9.0] = 10.0\n    gradesSorted[gradesSorted == 10.0] = 11.0\n    gradesSorted[gradesSorted\
    \ == 11.0] = 12.0\n    gradesSorted[gradesSorted == 12.0] = 13.0\n    gradesSorted[gradesSorted\
    \ == 13.0] = 14.0\n    gradesSorted[gradesSorted == 14.0] = 15.0\n    gradesSorted[gradesSorted\
    \ == 15.0] = 16.0\n    gradesSorted[gradesSorted == 16.0] = 17.0\n    gradesSorted[gradesSorted\
    \ == 17.0] = 18.0\n    gradesSorted[gradesSorted == 18.0] = 19.0\n    gradesSorted[gradesSorted\
    \ == 19.0] = 20.0\n    gradesSorted[gradesSorted == 20.0] = 1.0\n    gradesSorted[gradesSorted\
    \ == -1.0] = 1.0\n    gradesSorted[gradesSorted == 1.0] = 2.0\n    gradesSorted[gradesSorted\
    \ == 2.0] = 3.0\n    gradesSorted[gradesSorted == 3.0] = 4.0\n    gradesSorted[gradesSorted\
    \ == 4.0] = 5.0\n    gradesSorted[gradesSorted == 5.0] = 6.0\n    gradesSorted[gradesSorted\
    \ == 6.0] = 7.0\n    gradesSorted[gradesSorted \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq98c2qtr_test.go:67:31: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i]\
    \ >= 3.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letter_grades[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letter_grades[i] = \"B\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letter_grades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.3 {\n            letter_grades[i] = \"C\"\n        } else if grades[i]\
    \ >= 1.0 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 {\n            letter_grades[i] = \"D\"\n        } else if grades[i]\
    \ >= 0.0 {\n            letter_grades[i] = \"D-\"\n        } else {\n        \
    \    letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmph3blw81b_test.go:76: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C+ C+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmph3blw81b_test.go:76: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmph3blw81b_test.go:76: expected '[D D- C- B B+]', got '[D+\
    \ D- C B+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmph3blw81b_test.go:76: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := range gradesSorted {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6pt6wu1_test.go:76:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075352
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := 0; i < len(grades); i++ {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSortedSorted := make([]float64, len(gradesSorted))\n\
    \    sort.Float64s(gradesSorted)\n    gradesSortedSortedCopy := make([]float64,\
    \ len(gradesSortedSorted))\n    copy(gradesSortedSortedCopy, gradesSortedSorted)\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSorted[len(gradesSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpln5shqe0_test.go:56:66: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n   \
    \         letterGrades[i] = \"D-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letterGrades[i] = \"B\"\
    \n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 5.3 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 5.3 && grades[i] < 5.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 5.7 && grades[i] < 6.0 {\n            letterGrades[i] = \"A\"\
    \n        } else if grades[i] >= 6.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n   \
    \ return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpsl3_a46c_test.go:81: expected '[A+ B C- C A-]', got '[B\
    \ C- D- D- C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpsl3_a46c_test.go:81: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpsl3_a46c_test.go:81: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpsl3_a46c_test.go:81:\
    \ expected '[D D- C- B B+]', got '[D- D- D- D- C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpsl3_a46c_test.go:81: expected '[E D-]', got '[D- D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075489
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesCount\
    \ := 0\n    gradesTotal := 0.0\n    for _, grade := range gradesSorted {\n   \
    \     gradesCount += 1\n        gradesTotal += grade\n    }\n\n    gradesCount\
    \ -= 1 // remove last grade\n    gradesTotal -= gradesSorted[len(gradesSorted)-1]\n\
    \n    gradesGrades := make([]string, gradesCount)\n    for i := 0; i < gradesCount;\
    \ i++ {\n        gradesGrades[i] = fmt.Sprintf(\"%+.2f\", gradesSorted[i]/gradesTotal)\n\
    \    }\n\n    return gradesGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9298ietw_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    gradesMax := grades[gradesLen-1]\n\
    \    gradesMin := grades[0]\n    gradesAvg := grades[gradesLen-2]\n    gradesGrade\
    \ := grades[gradesLen-3]\n    gradesGrades := []string{}\n    gradesGrades = append(gradesGrades,\
    \ \"A+\")\n    gradesGrades = append(gradesGrades, \"A\")\n    gradesGrades =\
    \ append(gradesGrades, \"A-\")\n    gradesGrades = append(gradesGrades, \"B+\"\
    )\n    gradesGrades = append(gradesGrades, \"B\")\n    gradesGrades = append(gradesGrades,\
    \ \"B-\")\n    gradesGrades = append(gradesGrades, \"C+\")\n    gradesGrades =\
    \ append(gradesGrades, \"C\")\n    gradesGrades = append(gradesGrades, \"C-\"\
    )\n    gradesGrades = append(gradesGrades, \"D+\")\n    gradesGrades = append(gradesGrades,\
    \ \"D\")\n    gradesGrades = append(gradesGrades, \"D-\")\n    gradesGrades =\
    \ append(gradesGrades, \"E\")\n    for i := 0; i < gradesLen; i++ {\n        if\
    \ grades[i] >= gradesMax {\n            grades[i] = grades[i] - gradesMax\n  \
    \          gradesGrades = append(gradesGrades, \"D\")\n        }\n        if grades[i]\
    \ >= gradesMin {\n            grades[i] = grades[i] - gradesMin\n            gradesGrades\
    \ = append(gradesGrades, \"C\")\n        }\n        if grades[i] >= gradesAvg\
    \ {\n            grades[i] = grades[i] - gradesAvg\n            gradesGrades =\
    \ append(gradesGrades, \"B\")\n        }\n        if grades[i] >= gradesGrade\
    \ {\n            grades[i] = grades[i] - gradesGrade\n            gradesGrades\
    \ = append(gradesGrades, \"A\")\n        }\n        if grades[i] < gradesGrade\
    \ {\n            grades[i] = grades[i] + gradesGrade\n            gradesGrades\
    \ = append(gradesGrades, \"E\")\n        }\n    }\n    return gradesGrades\n}\n\
    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000f5dd8?, 0x5?,\
    \ 0x0?})\n\t/tmp/tmpf2h96xwu_test.go:34 +0xb57\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpf2h96xwu_test.go:83 +0x117\ntesting.tRunner(0xc0001a0340, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5hyndnjb_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{}, grades...)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2_f6aaop_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    \n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\
    \n    }\n    \n    for i := gradesLen - 1; i >= 0; i-- {\n        if grades[i]\
    \ >= 3.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3\
    \ {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.7\
    \ {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.3 {\n\
    \            letterGrades[i] = \"D-\"\n        } else if grades[i] >= 0.0 {\n\
    \            letterGrades[i] = \"D+\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmppim3pv5k_test.go:82: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmppim3pv5k_test.go:82: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmppim3pv5k_test.go:82: expected '[E]', got '[D+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmppim3pv5k_test.go:82:\
    \ expected '[D D- C- B B+]', got '[D D- C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmppim3pv5k_test.go:82: expected '[E D-]', got '[D+ D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // Loop through the grades and add them to the letter\
    \ grades array\n    for i := 0; i < grades_len; i++ {\n        if grades[i] >=\
    \ 3.0 {\n            letter_grades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letter_grades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 3.0 {\n            letter_grades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 2.7 {\n            letter_grades[i] = \"\
    C-\"\n        } else if grades[i] >= 1.0 {\n            letter_grades[i] = \"\
    D+\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i] = \"\
    D\"\n        } else if grades[i] < 1.0 {\n            letter_grades[i] = \"D-\"\
    \n        } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n \
    \   return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpp7y5qpue_test.go:77: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmpp7y5qpue_test.go:77: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpp7y5qpue_test.go:77: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpp7y5qpue_test.go:77: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n  \
    \          letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n  \
    \          letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n   \
    \         letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n   \
    \         letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n    \
    \        letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n    \
    \        letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n    \
    \        letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n     \
    \       letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"A+\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7l5j7s9h_test.go:79: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp7l5j7s9h_test.go:79: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7l5j7s9h_test.go:79: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp7l5j7s9h_test.go:79: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72rggtbx_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpzvh6n4s6_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpzvh6n4s6_test.go:76: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpzvh6n4s6_test.go:76: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzvh6n4s6_test.go:76:\
    \ expected '[D D- C- B B+]', got '[D+ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpzvh6n4s6_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    var gpas []float64\n\
    \    var letter string\n    var i int\n    var j int\n    var k int\n    var l\
    \ int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n\
    \    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n \
    \   var w int\n    var x int\n    var y int\n    var z int\n    var a int\n  \
    \  var b int\n    var c int\n    var d int\n    var e int\n    var f int\n   \
    \ var g int\n    var h int\n    var i int\n    var j int\n    var k int\n    var\
    \ l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q\
    \ int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n\
    \    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n \
    \   var b int\n    var c int\n    var d int\n    var e int\n    var f int\n  \
    \  var g int\n    var h int\n    var i int\n    var j int\n    var k int\n   \
    \ var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var\
    \ q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v\
    \ int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n\
    \    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n \
    \   var g int\n    var h int\n    var i int\n    var j int\n    var k int\n  \
    \  var l int\n    var m int\n    var n int\n    var o int\n    var p int\n   \
    \ var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var\
    \ v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a\
    \ int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n\
    \    var g int\n    var h int\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var b \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8zgw50ar_test.go:157:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := range gradesSorted {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6pt6wu1_test.go:76:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075352
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 1; i < gradesLen; i++ {\n        if grades[i] > grades[i-1]\
    \ {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] < grades[i-1]\
    \ {\n            letterGrades[i] = \"D-\"\n        } else if grades[i] == grades[i-1]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] > grades[i-1]\
    \ && grades[i] < grades[i+1] {\n            letterGrades[i] = \"B-\"\n       \
    \ } else if grades[i] > grades[i-1] && grades[i] != grades[i+1] {\n          \
    \  letterGrades[i] = \"B+\"\n        } else if grades[i] < grades[i-1] && grades[i]\
    \ != grades[i+1] {\n            letterGrades[i] = \"B\"\n        } else if grades[i]\
    \ > grades[i-1] && grades[i] != grades[i+1] {\n            letterGrades[i] = \"\
    A-\"\n        } else if grades[i] < grades[i-1] && grades[i] != grades[i+1] {\n\
    \            letterGrades[i] = \"A+\"\n        } else {\n            letterGrades[i]\
    \ = \"A\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmps4p79tzp_test.go:77: expected '[A+ B C- C A-]', got '[E\
    \ D- D- D+ D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmps4p79tzp_test.go:77: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmps4p79tzp_test.go:77: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmps4p79tzp_test.go:77:\
    \ expected '[D D- C- B B+]', got '[E D- D+ D+ D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmps4p79tzp_test.go:77: expected '[E D-]', got '[E D+]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letterGrades []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            letterGrades = append(letterGrades,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpzvh6n4s6_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpzvh6n4s6_test.go:76: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpzvh6n4s6_test.go:76: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpzvh6n4s6_test.go:76:\
    \ expected '[D D- C- B B+]', got '[D+ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpzvh6n4s6_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesCount\
    \ := 0\n    gradesTotal := 0.0\n    for _, grade := range gradesSorted {\n   \
    \     gradesCount += 1\n        gradesTotal += grade\n    }\n\n    gradesGrades\
    \ := make([]string, gradesCount)\n    for i := 0; i < gradesCount; i++ {\n   \
    \     gradesGrades[i] = fmt.Sprintf(\"%+.2f\", gradesSorted[i]/gradesTotal)\n\
    \    }\n\n    return gradesGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0ewuqrve_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    letterGrades[gradesLen-2] = \"D\"\n    letterGrades[gradesLen-3] = \"\
    C-\"\n    letterGrades[gradesLen-4] = \"C\"\n    letterGrades[gradesLen-5] = \"\
    B-\"\n    letterGrades[gradesLen-6] = \"B\"\n    letterGrades[gradesLen-7] = \"\
    A-\"\n    letterGrades[gradesLen-8] = \"A\"\n    letterGrades[gradesLen-9] = \"\
    A+\"\n    letterGrades[gradesLen-10] = \"B+\"\n    letterGrades[gradesLen-11]\
    \ = \"C+\"\n    letterGrades[gradesLen-12] = \"C\"\n    letterGrades[gradesLen-13]\
    \ = \"B-\"\n    letterGrades[gradesLen-14] = \"B\"\n    letterGrades[gradesLen-15]\
    \ = \"A-\"\n    letterGrades[gradesLen-16] = \"A\"\n    letterGrades[gradesLen-17]\
    \ = \"A+\"\n    letterGrades[gradesLen-18] = \"B+\"\n    letterGrades[gradesLen-19]\
    \ = \"C+\"\n    letterGrades[gradesLen-20] = \"C\"\n    letterGrades[gradesLen-21]\
    \ = \"B-\"\n    letterGrades[gradesLen-22] = \"B\"\n    letterGrades[gradesLen-23]\
    \ = \"A-\"\n    letterGrades[gradesLen-24] = \"A\"\n    letterGrades[gradesLen-25]\
    \ = \"A+\"\n    letterGrades[gradesLen-26] = \"B+\"\n    letterGrades[gradesLen-27]\
    \ = \"C+\"\n    letterGrades[gradesLen-28] = \"C\"\n    letterGrades[gradesLen-29]\
    \ = \"B-\"\n    letterGrades[gradesLen-30] = \"B\"\n    letterGrades[gradesLen-31]\
    \ = \"A-\"\n    letterGrades[gradesLen-32] = \"A\"\n    letterGrades[gradesLen-33]\
    \ = \"A+\"\n    letterGrades[gradesLen-34] = \"B+\"\n    letterGrades[gradesLen-35]\
    \ = \"C+\"\n    letterGrades[gradesLen-\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpleuq718q_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075484
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr3an72uj_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075354
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr3an72uj_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075354
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    \n    // Loop through\
    \ each grade and add it to the grades_string\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"E\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"A\")\n        }\n    }\n    \n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpqj_0_p5p_test.go:81: expected '[A+ B C- C A-]', got '[B+\
    \ B C+ C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpqj_0_p5p_test.go:81: expected '[D+]', got '[C-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpqj_0_p5p_test.go:81: expected '[D-]', got '[D]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpqj_0_p5p_test.go:81:\
    \ expected '[E]', got '[A]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpqj_0_p5p_test.go:81: expected '[D D- C- B B+]', got '[D+\
    \ D- C+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpqj_0_p5p_test.go:81: expected '[E D-]', got '[A D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are the letter grades using\
    \ the formula\n    // GPA - 2.7\n    for i := 1; i < grades_len; i++ {\n     \
    \   letter_grades[i] = letter_grades[i-1] + \n            fmt.Sprintf(\"%+.2f\"\
    , grades[i] - 2.7)\n    }\n    \n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpx8towyqt_test.go:68: expected '[A+ B C- C A-]', got '[A+\
    \ A++0.30 A++0.30-1.00 A++0.30-1.00-0.70 A++0.30-1.00-0.70+0.80]'\n    --- FAIL:\
    \ TestNumerical_Letter_Grade/test_num__1 (0.00s)\n        tmpx8towyqt_test.go:68:\
    \ expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpx8towyqt_test.go:68: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpx8towyqt_test.go:68:\
    \ expected '[D D- C- B B+]', got '[A+ A+-2.40 A+-2.40-1.20 A+-2.40-1.20+0.10 A+-2.40-1.20+0.10+0.60]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n        tmpx8towyqt_test.go:68:\
    \ expected '[E D-]', got '[A+ A+-2.00]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    i := 0\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            result[i]\
    \ = \"B+\"\n        } else if grade > 2.7 {\n            result[i] = \"B\"\n \
    \       } else if grade > 2.3 {\n            result[i] = \"B-\"\n        } else\
    \ if grade > 2.0 {\n            result[i] = \"C+\"\n        } else if grade >\
    \ 1.7 {\n            result[i] = \"C\"\n        } else if grade > 1.3 {\n    \
    \        result[i] = \"C-\"\n        } else if grade > 1.0 {\n            result[i]\
    \ = \"D+\"\n        } else if grade > 0.7 {\n            result[i] = \"D\"\n \
    \       } else if grade > 0.0 {\n            result[i] = \"D-\"\n        } else\
    \ {\n            result[i] = \"E\"\n        }\n        i++\n    }\n    return\
    \ result\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp5o94sanm_test.go:78: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var grades_string []string\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpiu_dofsv_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075353
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letters := make([]string,\
    \ grades_len)\n    \n    // The first letter must be A+\n    letters[0] = \"A+\"\
    \n    \n    // The last letter must be D-\n    letters[grades_len-1] = \"D-\"\n\
    \    \n    // The middle letters must be A, B, C or D\n    for i := 0; i < grades_len/2;\
    \ i++ {\n        if grades[i] > 3.0 {\n            letters[i] = \"B+\"\n     \
    \   } else if grades[i] >= 3.0 && grades[i] <= 3.7 {\n            letters[i] =\
    \ \"B\"\n        } else if grades[i] >= 3.7 && grades[i] <= 3.3 {\n          \
    \  letters[i] = \"B-\"\n        } else if grades[i] >= 3.3 && grades[i] <= 3.0\
    \ {\n            letters[i] = \"C+\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ <= 2.7 {\n            letters[i] = \"C\"\n        } else if grades[i] >= 2.7\
    \ && grades[i] <= 2.3 {\n            letters[i] = \"C-\"\n        } else if grades[i]\
    \ >= 2.3 && grades[i] <= 2.0 {\n            letters[i] = \"D+\"\n        } else\
    \ if grades[i] >= 2.0 && grades[i] <= 1.7 {\n            letters[i] = \"D\"\n\
    \        } else if grades[i] >= 1.7 && grades[i] <= 1.3 {\n            letters[i]\
    \ = \"D-\"\n        } else if grades[i] >= 1.3 && grades[i] <= 1.0 {\n       \
    \     letters[i] = \"E\"\n        }\n    }\n    \n    return letters\n}\n\nfunc\
    \ TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp9yzst_yr_test.go:86: expected '[A+ B C- C A-]', got '[B+\
    \ B   D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n   \
    \     tmp9yzst_yr_test.go:86: expected '[D+]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmp9yzst_yr_test.go:86: expected '[E]', got '[D-]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmp9yzst_yr_test.go:86:\
    \ expected '[D D- C- B B+]', got '[A+    D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp9yzst_yr_test.go:86: expected '[E D-]', got '[A+ D-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpu1kweajz_test.go:63:28: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // Loop through the grades\n    for i := 0; i < gradesLen;\
    \ i++ {\n        // If the grade is greater than or equal to 3.7\n        if grades[i]\
    \ >= 3.7 {\n            // If the grade is greater than or equal to 3.0\n    \
    \        if grades[i] >= 3.0 {\n                // If the grade is greater than\
    \ or equal to 2.0\n                if grades[i] >= 2.0 {\n                   \
    \ // If the grade is greater than or equal to 1.0\n                    if grades[i]\
    \ >= 1.0 {\n                        // If the grade is greater than or equal to\
    \ 0.7\n                        if grades[i] >= 0.7 {\n                       \
    \     // If the grade is greater than or equal to 0.0\n                      \
    \      if grades[i] >= 0.0 {\n                                // If the grade\
    \ is less than or equal to 0.0\n                                if grades[i] <=\
    \ 0.0 {\n                                    // If the grade is less than or equal\
    \ to 0.7\n                                    if grades[i] <= 0.7 {\n        \
    \                                // If the grade is less than or equal to 1.0\n\
    \                                        if grades[i] <= 1.0 {\n             \
    \                               // If the grade is less than or equal to 2.0\n\
    \                                            if grades[i] <= 2.0 {\n         \
    \                                       // If the grade is less than or equal\
    \ to 3.0\n                                                if grades[i] <= 3.0\
    \ {\n                                                    // If the grade is less\
    \ than or equal to 4.0\n                                                    if\
    \ grades[i] <= 4.0 {\n                                                       \
    \ // If the grade is less than or equal to 5.0\n                             \
    \                           if grades[i] <= 5.0 {\n                          \
    \                                  // If the grade is less than or equal to 6.0\n\
    \                                                            if grades[i] <= 6.0\
    \ {\n                                                                // If the\
    \ grade is less than or equal to 7.0\n                                       \
    \                         if grades[i] <= 7.0 {\n                            \
    \                                        // If the grade is less than or equal\
    \ to 8.0\n                                                                   \
    \ if grades[i] <= 8.0 {\n                                                    \
    \                    // If the grade is less than or equal to 9.0\n          \
    \                                                              if grades[i] <=\
    \ 9.0 {\n                                                                    \
    \        // If the grade is less than or equal to 10.0\n                     \
    \                                                       if grades[i] <= 10.0 {\n\
    \                                                                            \
    \    // If the grade is less than or equal to 11.0\n                         \
    \                                                       if grades[i] <= 11.0 {\n\
    \                                                                            \
    \        // If the grade is less than or equal to 12.0\n                     \
    \                                                               if grades[i] <=\
    \ 12.0 {\n                                                                   \
    \                     // If the grade is less than or equal to 13.0\n        \
    \                                                                            \
    \    if grades[i] <= 13.0 {\n                                                \
    \                                            // If the grade is less than or equal\
    \ to 14.0\n                                                                  \
    \                          if grades[i] <= 14.0 {\n                          \
    \                                                                      // If the\
    \ grade is less than or equal to 15.0\n                                      \
    \                                                          if grades[i] <= 15.0\
    \ {\n                                                                        \
    \                            // If the grade is less than or equal to 16.0\n \
    \                                                                            \
    \                       if grades[i] <= 16.0 {\n                             \
    \                                                                           //\
    \ If the grade is \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj1n39gmf_test.go:85:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    for i := 1; i < gradesLen; i++\
    \ {\n        letterGrades[i] = letterGrades[i-1] + \"+\"\n        if grades[i]\
    \ > grades[i-1] {\n            letterGrades[i] = letterGrades[i] + \"-\"\n   \
    \     }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp2x25zpsl_test.go:61: expected '[A+ B C- C A-]', got '[E\
    \ E+ E++ E+++- E+++-+-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1\
    \ (0.00s)\n        tmp2x25zpsl_test.go:61: expected '[D+]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n        tmp2x25zpsl_test.go:61:\
    \ expected '[D-]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp2x25zpsl_test.go:61: expected '[D D- C- B B+]', got '[E\
    \ E+ E++- E++-+- E++-+-+-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmp2x25zpsl_test.go:61: expected '[E D-]', got '[E E+-]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen\
    \ - 1] = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i]\
    \ = \"\"\n    }\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >=\
    \ 3.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.3 {\n \
    \           letterGrades[i] = \"D-\"\n        } else if grades[i] >= 0.0 {\n \
    \           letterGrades[i] = \"D+\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\npanic: runtime error: index\
    \ out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out\
    \ of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513720,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513720, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.numerical_letter_grade({0xc0000c45d8, 0x1,\
    \ 0x0?})\n\t/tmp/tmpu109m1h9_test.go:34 +0x565\ncommand-line-arguments_test.TestNumerical_Letter_Grade(0x0?)\n\
    \t/tmp/tmpu109m1h9_test.go:71 +0x117\ntesting.tRunner(0xc0001924e0, 0x529060)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_string := []string{}\n    for _, grade :=\
    \ range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpo9s3jmze_test.go:76: expected '[A+ B C- C A-]', got '[B+\
    \ B C- C B+]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ := gradesSorted[:len(grades)-1]\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, grades[0])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-1])\n    gradesSorted = append(gradesSorted, grades[len(grades)-2])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-3])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-4])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-5])\n    gradesSorted = append(gradesSorted, grades[len(grades)-6])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-7])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-8])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-9])\n    gradesSorted = append(gradesSorted, grades[len(grades)-10])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-11])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-12])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-13])\n    gradesSorted = append(gradesSorted, grades[len(grades)-14])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-15])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-16])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-17])\n    gradesSorted = append(gradesSorted, grades[len(grades)-18])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-19])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-20])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-21])\n    gradesSorted = append(gradesSorted, grades[len(grades)-22])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-23])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-24])\n    grades\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5mqy75vz_test.go:62:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72rggtbx_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // The first letter grade is always A+\n    letterGrades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always E\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    \n    // The middle letter grades are the letter grades using the\
    \ formula\n    // GPA - 2.7\n    // GPA - 2.3\n    // GPA - 2.0\n    // GPA -\
    \ 1.7\n    // GPA - 1.3\n    // GPA - 1.0\n    // GPA - 0.7\n    // GPA - 0.0\n\
    \    for i := 1; i < gradesLen; i++ {\n        letterGrades[i] = letterGrades[i-1]\
    \ + \n            string(grades[i-1] - grades[i-1]*float64(2.7)/float64(2.3)/float64(2.0)/float64(1.7)/float64(1.3)/float64(1.0)/float64(0.7)/float64(0.0))\n\
    \    }\n    \n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwv2k0kul_test.go:51:20: cannot convert grades[i - 1] - grades[i - 1] *
    float64(2.7) / float64(2.3) / float64(2.0) / float64(1.7) / float64(1.3) / float64(1.0)
    / float64(0.7) / float64(0.0) (value of type float64) to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_count := len(grades)\n    letter_grades :=\
    \ make([]string, grades_count)\n    \n    // The first letter grade is A+\n  \
    \  letter_grades[0] = \"A+\"\n    \n    // The second letter grade is B\n    letter_grades[1]\
    \ = \"B\"\n    \n    // The third letter grade is C- \n    letter_grades[2] =\
    \ \"C-\"\n    \n    // The fourth letter grade is C\n    letter_grades[3] = \"\
    C\"\n    \n    // The fifth letter grade is A-\n    letter_grades[4] = \"A-\"\n\
    \    \n    // The sixth letter grade is D+\n    letter_grades[5] = \"D+\"\n  \
    \  \n    // The seventh letter grade is D\n    letter_grades[6] = \"D\"\n    \n\
    \    // The eighth letter grade is D-\n    letter_grades[7] = \"D-\"\n    \n \
    \   // The ninth letter grade is E\n    letter_grades[8] = \"E\"\n    \n    //\
    \ The tenth letter grade is F\n    letter_grades[9] = \"F\"\n    \n    // The\
    \ eleventh letter grade is F\n    letter_grades[10] = \"F\"\n    \n    // The\
    \ twelfth letter grade is F\n    letter_grades[11] = \"F\"\n    \n    // The thirteenth\
    \ letter grade is F\n    letter_grades[12] = \"F\"\n    \n    // The fourteenth\
    \ letter grade is F\n    letter_grades[13] = \"F\"\n    \n    // The fifteenth\
    \ letter grade is F\n    letter_grades[14] = \"F\"\n    \n    // The sixteenth\
    \ letter grade is F\n    letter_grades[15] = \"F\"\n    \n    // The seventeenth\
    \ letter grade is F\n    letter_grades[16] = \"F\"\n    \n    // The eighteenth\
    \ letter grade is F\n    letter_grades[17] = \"F\"\n    \n    // The nineteenth\
    \ letter grade is F\n    letter_grades[18] = \"F\"\n    \n    // The twentieth\
    \ letter grade is F\n    letter_grades[19] = \"F\"\n    \n    // The twenty-first\
    \ letter grade is F\n    letter_grades[20] = \"F\"\n    \n    // The twenty-second\
    \ letter grade is F\n    letter_grades[21] = \"F\"\n    \n    // The twenty-\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr8njb790_test.go:101:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075489
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ grades[0])\n    gradesSorted = append(gradesSorted, grades[len(grades)-1])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-2])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-3])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-4])\n    gradesSorted = append(gradesSorted, grades[len(grades)-5])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-6])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-7])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-8])\n    gradesSorted = append(gradesSorted, grades[len(grades)-9])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-10])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-11])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-12])\n    gradesSorted = append(gradesSorted, grades[len(grades)-13])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-14])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-15])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-16])\n    gradesSorted = append(gradesSorted, grades[len(grades)-17])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-18])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-19])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-20])\n    gradesSorted = append(gradesSorted, grades[len(grades)-21])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grades)-22])\n    gradesSorted\
    \ = append(gradesSorted, grades[len(grades)-23])\n    gradesSorted = append(gradesSorted,\
    \ grades[len(grades)-24])\n    gradesSorted = append(gradesSorted, grades[len(grades)-25])\n\
    \    gradesSorted = append(gradesSorted, grades[len(grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz4mta3uz_test.go:60:57: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen - 1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n   \
    \         letterGrades[i] = \"B+\"\n        } else if grades[i] < 3.3 {\n    \
    \        letterGrades[i] = \"B\"\n        } else if grades[i] < 3.7 {\n      \
    \      letterGrades[i] = \"B-\"\n        } else if grades[i] < 4.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] < 4.3 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] < 4.7 {\n          \
    \  letterGrades[i] = \"A-\"\n        } else if grades[i] < 5.0 {\n           \
    \ letterGrades[i] = \"C+\"\n        } else if grades[i] < 5.3 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] < 5.7 {\n            letterGrades[i] =\
    \ \"C-\"\n        } else if grades[i] < 6.0 {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i] < 6.3 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] < 6.7 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n   \
    \ return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n\
    \  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpj5dj1c2a_test.go:85: expected '[A+ B C- C A-]', got '[A\
    \ B B+ B+ B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpj5dj1c2a_test.go:85: expected '[D+]', got '[B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpj5dj1c2a_test.go:85: expected '[D-]', got '[B+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n        tmpj5dj1c2a_test.go:85:\
    \ expected '[E]', got '[B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpj5dj1c2a_test.go:85: expected '[D D- C- B B+]', got '[B+\
    \ B+ B+ B+ B-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpj5dj1c2a_test.go:85: expected '[E D-]', got '[B+ B+]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n        if grades[i]\
    \ >= 3.0 {\n            letter_grades[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letter_grades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] <= 1.3 {\n            letter_grades[i] = \"C+\"\n      \
    \  } else if grades[i] >= 1.1 && grades[i] <= 0.7 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 0.7 && grades[i] <= 0.1 {\n        \
    \    letter_grades[i] = \"C-\"\n        } else if grades[i] >= 0.0 {\n       \
    \     letter_grades[i] = \"D+\"\n        } else if grades[i] <= -0.1 {\n     \
    \       letter_grades[i] = \"D\"\n        } else if grades[i] <= -0.7 {\n    \
    \        letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpoca4nd3u_test.go:78: expected '[A+ B C- C A-]', got '[B+\
    \ B+ D+ D+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2 (0.00s)\n\
    \        tmpoca4nd3u_test.go:78: expected '[D-]', got '[D+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3\
    \ (0.00s)\n        tmpoca4nd3u_test.go:78: expected '[E]', got '[D+]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpoca4nd3u_test.go:78:\
    \ expected '[D D- C- B B+]', got '[D+ D+ D+ B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpoca4nd3u_test.go:78: expected '[E D-]', got '[D+ D+]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = gradesSorted[0]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[len(gradesSorted)-1]\n  \
    \  gradesSorted[0] = gradesSorted[0]\n    grade\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdn837dqf_test.go:66:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075482
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSor\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy3z5e5ms_test.go:73:36: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72rggtbx_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n  \
    \          letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n  \
    \          letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n   \
    \         letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n   \
    \         letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n    \
    \        letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n    \
    \        letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n    \
    \        letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n     \
    \       letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"A+\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7l5j7s9h_test.go:79: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp7l5j7s9h_test.go:79: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7l5j7s9h_test.go:79: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp7l5j7s9h_test.go:79: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 2.0 {\n            grade = grade + 2.0\n        }\n        if\
    \ grade < 1.0 {\n            grade = grade + 1.0\n        }\n        if grade\
    \ < 0.7 {\n            grade = grade + 0.7\n        }\n        if grade < 0.3\
    \ {\n            grade = grade + 0.3\n        }\n        if grade < 0.1 {\n  \
    \          grade = grade + 0.1\n        }\n        if grade < 0.01 {\n       \
    \     grade = grade + 0.01\n        }\n        if grade < 0.001 {\n          \
    \  grade = grade + 0.001\n        }\n        if grade < 0.0001 {\n           \
    \ grade = grade + 0.0001\n        }\n        if grade < 0.00001 {\n          \
    \  grade = grade + 0.00001\n        }\n        if grade < 0.000001 {\n       \
    \     grade = grade + 0.0000001\n        }\n        if grade < 0.0000001 {\n \
    \           grade = grade + 0.00000001\n        }\n        if grade < 0.000000001\
    \ {\n            grade = grade + 0.000000001\n        }\n        if grade < 0.0000000001\
    \ {\n            grade = grade + 0.0000000001\n        }\n        if grade < 0.00000000001\
    \ {\n            grade = grade + 0.00000000001\n        }\n        if grade <\
    \ 0.000000000001 {\n            grade = grade + 0.000000000001\n        }\n  \
    \      if grade < 0.0000000000001 {\n            grade = grade + 0.0000000000001\n\
    \        }\n        if grade < 0.00000000000001 {\n            grade = grade +\
    \ 0.00000000000001\n        }\n        if grade < 0.000000000000001 {\n      \
    \      grade = grade + 0.000000000000001\n        }\n        if grade < 0.0000000000000001{\n\
    \            grade = grade + 0.0000000000000001\n        }\n        if grade <\
    \ 0.00000000000000001 {\n            grade = grade + 0.00000000000000001\n   \
    \     }\n        if grade < 0.000000000000000001{\n            grade = grade +\
    \ 0.000000000000000001\n        }\n        if grade < 0.0000000000000000001 {\n\
    \            grade = grade + 0.0000000000000000001\n        }\n        if grade\
    \ < 0.00000000000000000001 {\n            grade = grade + 0.00000000000000000001\n\
    \        }\n        if grade < 0.000000000000000000001 {\n            grade =\
    \ grade + 0.\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate :=\
    \ numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppipw_2zd_test.go:107:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_string := \"\"\n    for _, grade := range\
    \ grades {\n        if grade > 3.0 {\n            grades_string += \"A+\"\n  \
    \      } else if grade > 2.7 {\n            grades_string += \"B+\"\n        }\
    \ else if grade > 2.3 {\n            grades_string += \"B\"\n        } else if\
    \ grade > 1.7 {\n            grades_string += \"C+\"\n        } else if grade\
    \ > 1.3 {\n            grades_string += \"C\"\n        } else if grade > 1.0 {\n\
    \            grades_string += \"D+\"\n        } else if grade > 0.7 {\n      \
    \      grades_string += \"D\"\n        } else if grade > 0.0 {\n            grades_string\
    \ += \"D-\"\n        } else {\n            grades_string += \"E\"\n        }\n\
    \    }\n    return []string{grades_string}\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpxbg0znyj_test.go:74: expected '[A+ B C- C A-]', got '[A+B+CC+A+]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpxbg0znyj_test.go:74:\
    \ expected '[D D- C- B B+]', got '[DD-CB+A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpxbg0znyj_test.go:74: expected '[E D-]', got '[ED-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5hyndnjb_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 2
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesCount\
    \ := 0\n    gradesSumOfGrades := 0.0\n    for _, grade := range gradesSorted {\n\
    \        gradesCount += 1\n        gradesSumOfGrades += grade\n    }\n\n    gradesCount\
    \ -= 1\n    gradesSumOfGrades /= float64(gradesCount)\n\n    gradesLetters :=\
    \ make([]string, gradesCount)\n    for i := 0; i < gradesCount; i++ {\n      \
    \  gradesLetters[i] = fmt.Sprintf(\"%+.2f\", gradesSorted[i]/gradesSumOfGrades)\n\
    \    }\n\n    return gradesLetters\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdeolll4f_test.go:33:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ := append([]float64{}, gradesSorted...)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprtt3ka58_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075490
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var letter string\n    var gpa, sum float64\n   \
    \ for _, grade := range grades {\n        gpa = grade\n        sum += gpa\n  \
    \  }\n    if sum == 0.0 {\n        letter = \"E\"\n    } else {\n        if gpa\
    \ > 4.0 {\n            letter = \"A+\"\n        } else if gpa > 3.7 {\n      \
    \      letter = \"A\"\n        } else if gpa > 3.3 {\n            letter = \"\
    A-\"\n        } else if gpa > 3.0 {\n            letter = \"B+\"\n        } else\
    \ if gpa > 2.7 {\n            letter = \"B\"\n        } else if gpa > 2.3 {\n\
    \            letter = \"B-\"\n        } else if gpa > 2.0 {\n            letter\
    \ = \"C+\"\n        } else if gpa > 1.7 {\n            letter = \"C\"\n      \
    \  } else if gpa > 1.3 {\n            letter = \"C-\"\n        } else if gpa >\
    \ 1.0 {\n            letter = \"D+\"\n        } else if gpa > 0.7 {\n        \
    \    letter = \"D\"\n        } else if gpa > 0.0 {\n            letter = \"D-\"\
    \n        } else {\n            letter = \"E\"\n        }\n    }\n    return []string{letter}\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpa13nsz7f_test.go:89: expected '[A+ B C- C A-]', got '[A-]'\n\
    \    --- FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpa13nsz7f_test.go:89:\
    \ expected '[D D- C- B B+]', got '[B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpa13nsz7f_test.go:89: expected '[E D-]', got '[D-]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5hyndnjb_test.go:73:32: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075347
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is always A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always E\n    letter_grades[grades_len-1]\
    \ = \"E\"\n    \n    // The grades are sorted in descending order\n    for i :=\
    \ grades_len-2; i >= 0; i-- {\n        if grades[i] >= 3.0 {\n            letter_grades[i+1]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i+1]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i+1]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 {\n            letter_grades[i+1]\
    \ = \"C+\"\n        } else if grades[i] >= 1.3 {\n            letter_grades[i+1]\
    \ = \"C\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i+1]\
    \ = \"C-\"\n        } else if grades[i] >= 0.3 {\n            letter_grades[i+1]\
    \ = \"D+\"\n        } else if grades[i] >= 0.0 {\n            letter_grades[i+1]\
    \ = \"D\"\n        } else {\n            letter_grades[i+1] = \"D-\"\n       \
    \ }\n    }\n    return letter_grades\n}\n\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpibpe75ze_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ B+ C+ C+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpibpe75ze_test.go:83: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpibpe75ze_test.go:83: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpibpe75ze_test.go:83:\
    \ expected '[D D- C- B B+]', got '[A+ C- D+ C B]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpibpe75ze_test.go:83: expected '[E D-]', got '[A+ D]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp0_rhmo48_test.go:75: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp0_rhmo48_test.go:75: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp0_rhmo48_test.go:75: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp0_rhmo48_test.go:75: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075356
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    for i := 0; i < len(grades); i++ {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptmkiqfk8_test.go:84:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    \n    for i := 1; i < gradesLen; i++ {\n        if grades[i-1] <= 3.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i-1] > 3.0\
    \ && grades[i-1] <= 3.7 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i-1] > 3.7 && grades[i-1] <= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i-1] > 3.3 && grades[i-1] <= 3.0 {\n      \
    \      letterGrades[i] = \"B+\"\n        } else if grades[i-1] > 3.0 && grades[i-1]\
    \ <= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i-1]\
    \ > 2.7 && grades[i-1] <= 2.3 {\n            letterGrades[i] = \"B-\"\n      \
    \  } else if grades[i-1] > 2.3 && grades[i-1] <= 2.0 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if grades[i-1] > 2.0 && grades[i-1] <= 1.7 {\n    \
    \        letterGrades[i] = \"C\"\n        } else if grades[i-1] > 1.7 && grades[i-1]\
    \ <= 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i-1]\
    \ > 1.3 && grades[i-1] <= 1.0 {\n            letterGrades[i] = \"D+\"\n      \
    \  } else if grades[i-1] > 1.0 && grades[i-1] <= 0.7 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i-1] > 0.7 && grades[i-1] <= 0.0 {\n     \
    \       letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpez4vjoky_test.go:86: expected '[A+ B C- C A-]', got '[E\
    \ E A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpez4vjoky_test.go:86: expected '[D+]', got '[E]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__2\
    \ (0.00s)\n        tmpez4vjoky_test.go:86: expected '[D-]', got '[E]'\n    ---\
    \ FAIL: TestNumerical_Letter_Grade/test_num__4 (0.00s)\n        tmpez4vjoky_test.go:86:\
    \ expected '[D D- C- B B+]', got '[E A+ A+ A+ A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5\
    \ (0.00s)\n        tmpez4vjoky_test.go:86: expected '[E D-]', got '[E A+]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    \n    \n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"E\"\n            continue\n       \
    \ }\n        \n        \n        if grades[i] > 3.0 {\n            letterGrades[i]\
    \ = \"D-\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < 2.7 {\n            letterGrades[i] = \"C-\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < 2.3 {\n            letterGrades[i]\
    \ = \"B-\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < 1.7 {\n            letterGrades[i] = \"B+\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"A+\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"A\"\n            continue\n       \
    \ }\n        \n        \n        if grades[i] < 0.3 {\n            letterGrades[i]\
    \ = \"A-\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < 0.0 {\n            letterGrades[i] = \"A\"\n            continue\n       \
    \ }\n        \n        \n        if grades[i] < -3.0 {\n            letterGrades[i]\
    \ = \"D+\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -2.7 {\n            letterGrades[i] = \"C\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < -2.3 {\n            letterGrades[i]\
    \ = \"B\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -1.7 {\n            letterGrades[i] = \"A\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < -1.3 {\n            letterGrades[i]\
    \ = \"A-\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -1.0 {\n            letterGrades[i] = \"A\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < -1.7 {\n            letterGrades[i]\
    \ = \"A\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -1.3 {\n            letterGrades[i] = \"A\"\n            continue\n      \
    \  }\n        \n        \n        if grades[i] < -1.0 {\n            letterGrades[i]\
    \ = \"A\"\n            continue\n        }\n        \n        \n        if grades[i]\
    \ < -1.7 {\n            letterGrade\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4sd0f7dz_test.go:149:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n  \
    \          letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n  \
    \          letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n   \
    \         letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n   \
    \         letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n    \
    \        letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n    \
    \        letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n    \
    \        letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n     \
    \       letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"A+\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp7l5j7s9h_test.go:79: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp7l5j7s9h_test.go:79: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp7l5j7s9h_test.go:79: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp7l5j7s9h_test.go:79: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp64b6z01z_test.go:77: expected '[A+ B C- C A-]', got '[B+\
    \ B+ C C+ B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp64b6z01z_test.go:77: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp64b6z01z_test.go:77: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B B+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp64b6z01z_test.go:77: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075353
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72rggtbx_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSor\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpev37ress_test.go:70:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075349
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := []string{}\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 0.0 {\n            grade = grade + 3.0\n        }\n        if\
    \ grade < 2.0 {\n            grade = grade + 2.0\n        }\n        if grade\
    \ < 1.7 {\n            grade = grade + 1.7\n        }\n        if grade < 1.0\
    \ {\n            grade = grade + 1.0\n        }\n        if grade < 0.7 {\n  \
    \          grade = grade + 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade + 0.3\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < -3.0 {\n            grade = grade\
    \ - 3.0\n        }\n        if grade < -2.0 {\n            grade = grade - 2.0\n\
    \        }\n        if grade < -1.7 {\n            grade = grade - 1.7\n     \
    \   }\n        if grade < -1.0 {\n            grade = grade - 1.0\n        }\n\
    \        if grade < -0.7 {\n            grade = grade - 0.7\n        }\n     \
    \   if grade < -0.3 {\n            grade = grade - 0.3\n        }\n        if\
    \ grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade > 2.0\
    \ {\n            grade = grade - 2.0\n        }\n        if grade > 1.7 {\n  \
    \          grade = grade - 1.7\n        }\n        if grade > 1.0 {\n        \
    \    grade = grade - 1.0\n        }\n        if grade > 0.7 {\n            grade\
    \ = grade - 0.7\n        }\n        if grade > 0.3 {\n            grade = grade\
    \ - 0.3\n        }\n        if grade > 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade > 3.0 {\n            grade = grade - 3.0\n      \
    \  }\n        if grade > 2.0 {\n            grade = grade - 2.0\n        }\n \
    \       if grade > 1.7 {\n            grade = grade - 1.7\n        }\n       \
    \ if grade > 1.0 {\n            grade = grade - 1.0\n        }\n        if grade\
    \ > 0.7 {\n            grade = grade - 0.7\n        }\n        if grade > 0.3\
    \ {\n            grade = grade - 0.3\n        }\n        if grade > 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt5kc6zf4_test.go:121:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := append([]float64{0.0}, grades...)\n   \
    \ grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(\nfunc TestNumerical_Letter_Grade(t *testing.T)\
    \ {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}), expected:\
    \ []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected: []string{\"\
    D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"E\"}\
    \ },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp72rggtbx_test.go:71:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075348
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    result := make([]string, len(grades))\n    \n   \
    \ for i := 0; i < len(grades); i++ {\n        if grades[i] >= 3.0 {\n        \
    \    result[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n            result[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            result[i] = \"B-\"\
    \n        } else if grades[i] >= 1.7 {\n            result[i] = \"C\"\n      \
    \  } else if grades[i] >= 1.3 {\n            result[i] = \"C-\"\n        } else\
    \ if grades[i] >= 0.7 {\n            result[i] = \"D\"\n        } else if grades[i]\
    \ >= 0.3 {\n            result[i] = \"D-\"\n        } else if grades[i] >= 0.0\
    \ {\n            result[i] = \"E\"\n        } else {\n            result[i] =\
    \ \"F\"\n        }\n    }\n    \n    return result\n}\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmpktxkuots_test.go:76: expected '[A+ B C- C A-]', got '[A+\
    \ A+ C C A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__1 (0.00s)\n\
    \        tmpktxkuots_test.go:76: expected '[D+]', got '[D]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmpktxkuots_test.go:76: expected '[D D- C- B B+]', got '[D\
    \ D- C- B A+]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmpktxkuots_test.go:76: expected '[E D-]', got '[E D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex\
    \ := 0\n    gradesIndex := 0\n    gradesIndex := 0\n    gradesIndex := 0\n   \
    \ gradesIndex := 0\n    \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpq6us1b3i_test.go:104:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades := make([]float64, len(grades))\n    for i\
    \ := 0; i < len(grades); i++ {\n        grades[i] = grades[i]\n    }\n    grades[len(grades)-1]\
    \ = grades[len(grades)-1]\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkj9xao89_test.go:95:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n\nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppljr5ja4_test.go:75:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075488
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    \n    // The first letter grade is always A+\n    letter_grades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always E\n    letter_grades[grades_len-1]\
    \ = \"E\"\n    \n    // The middle letter grades are the letter grades using the\
    \ table\n    // above and the GPA of the student\n    for i := 0; i < grades_len;\
    \ i++ {\n        letter_grades[i] = letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            letter_grades[i-1] + \n            letter_grades[i-1] + \n \
    \           letter_grades[i-1] + \n            letter_grades[i-1] + \n       \
    \     letter_grades[i-1] + \n            letter_grades[i-1] + \n            letter_grades[i-1]\
    \ + \n            \nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate\
    \ := numerical_letter_grade\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{4.0,\
    \ 3, 1.7, 2, 3.5}), expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n\
    \     { actual: candidate([]float64{1.2}), expected: []string{\"D+\"} },\n   \
    \  { actual: candidate([]float64{0.5}), expected: []string{\"D-\"} },\n     {\
    \ actual: candidate([]float64{0.0}), expected: []string{\"E\"} },\n     { actual:\
    \ candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected: []string{\"D\", \"\
    D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0, 0.7}),\
    \ expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg0orhhg6_test.go:102:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesSorted := make([]float64, len(grades))\n  \
    \  copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyacbzfsp_test.go:65:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075353
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7\
    \ && grades[i] < 4.0 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 && grades[i] < 3.7 {\n            letterGrades[i] = \"A-\"\n\
    \        } else if grades[i] >= 3.0 && grades[i] < 3.3 {\n            letterGrades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 && grades[i] < 3.0 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ < 2.7 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 2.0 && grades[i] < 2.3 {\n            letterGrades[i] = \"C+\"\n        } else\
    \ if grades[i] >= 1.7 && grades[i] < 2.0 {\n            letterGrades[i] = \"C\"\
    \n        } else if grades[i] >= 1.3 && grades[i] < 1.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] < 1.3 {\n        \
    \    letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ < 1.0 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 && grades[i] < 0.7 {\n            letterGrades[i] = \"D-\"\n        } else\
    \ {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n\nfunc TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
    \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual:\
    \ candidate([]float64{1.2}), expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}),\
    \ expected: []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected:\
    \ []string{\"E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}),\
    \ expected: []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual:\
    \ candidate([]float64{0.0, 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestNumerical_Letter_Grade (0.00s)\n    --- FAIL: TestNumerical_Letter_Grade/test_num__0\
    \ (0.00s)\n        tmp3bu7oufc_test.go:83: expected '[A+ B C- C A-]', got '[A+\
    \ B+ C C+ A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__3 (0.00s)\n\
    \        tmp3bu7oufc_test.go:83: expected '[E]', got '[D-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__4\
    \ (0.00s)\n        tmp3bu7oufc_test.go:83: expected '[D D- C- B B+]', got '[D+\
    \ D- C- B A-]'\n    --- FAIL: TestNumerical_Letter_Grade/test_num__5 (0.00s)\n\
    \        tmp3bu7oufc_test.go:83: expected '[E D-]', got '[D- D]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075491
- exit_code: 1
  program: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n   \
    \ \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to\
    \ give the grades\n// to students. The teacher has been making her own algorithm\
    \ for grading.\n// The only problem is, she has lost the code she used for grading.\n\
    // She has given you a list of GPAs for some students and you have to write \n\
    // a function that can output a list of letter grades using the following table:\n\
    // GPA       |    Letter grade\n// 4.0                A+\n// > 3.7           \
    \     A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7  \
    \              B \n// > 2.3                B-\n// > 2.0                C+\n//\
    \ > 1.7                C\n// > 1.3                C-\n// > 1.0               \
    \ D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0        \
    \        E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n\
    // []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades\
    \ []float64) []string {\n    var result []string\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grade = grade - 3.0\n        }\n  \
    \      if grade < 0.0 {\n            grade = grade + 3.0\n        }\n        if\
    \ grade < 2.0 {\n            grade = grade - 2.0\n        }\n        if grade\
    \ < 1.7 {\n            grade = grade - 1.7\n        }\n        if grade < 1.0\
    \ {\n            grade = grade - 1.0\n        }\n        if grade < 0.7 {\n  \
    \          grade = grade - 0.7\n        }\n        if grade < 0.3 {\n        \
    \    grade = grade - 0.3\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade > 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade > 1.0 {\n            grade = grade + 1.0\n\
    \        }\n        if grade > 1.7 {\n            grade = grade + 1.7\n      \
    \  }\n        if grade > 2.0 {\n            grade = grade + 2.0\n        }\n \
    \       if grade > 2.3 {\n            grade = grade + 2.3\n        }\n       \
    \ if grade > 2.7 {\n            grade = grade + 2.7\n        }\n        if grade\
    \ > 3.0 {\n            grade = grade + 3.0\n        }\n        if grade > 3.7\
    \ {\n            grade = grade + 3.7\n        }\n        if grade > 4.0 {\n  \
    \          grade = grade + 4.0\n        }\n        if grade > 4.7 {\n        \
    \    grade = grade + 4.7\n        }\n        if grade > 5.0 {\n            grade\
    \ = grade + 5.0\n        }\n        if grade > 5.7 {\n            grade = grade\
    \ + 5.7\n        }\n        if grade > 6.0 {\n            grade = grade + 6.0\n\
    \        }\n        if grade > 6.7 {\n            grade = grade + 6.7\n      \
    \  }\n        if grade > 7.0 {\n            grade = grade + 7.0\n        }\n \
    \       if grade > 7.7 {\n            grade = grade + 7.7\n        }\n       \
    \ if grade > 8.0 {\n            grade = grade + 8.0\n        }\n        if grade\
    \ > 8.7 {\n            grade = grade + 8.7\n        }\n        if grade > 9.0\
    \ {\n            grade = grade + 9.0\n        }\n        if grade > 9.7 {\n  \
    \          grade = grade + 9.7\n        }\n        if grade \nfunc TestNumerical_Letter_Grade(t\
    \ *testing.T) {\n  candidate := numerical_letter_grade\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}), expected: []string{\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
    \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
    \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
    E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
    \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
    \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3886vjje_test.go:118:6: expected ''('', found TestNumerical_Letter_Grade

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075491
