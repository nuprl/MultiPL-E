name: HumanEval_155_even_odd_count
language: go_test.go
prompt: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n\
  // >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int)\
  \ []interface{} {\n"
tests: "func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
  \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
  \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
  \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
  \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
  \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n  \
  \   { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    even, odd := 0, 0\n    for num > 0 {\n        num /= 10\n     \
    \   even++\n    }\n    for num > 0 {\n        num /= 10\n        odd++\n    }\n\
    \    return []interface{}{even, odd}\n}\n", "    even_count := 0\n    odd_count\
    \ := 0\n    for num > 0 {\n        if num%2 == 0 {\n            even_count++\n\
    \        } else {\n            odd_count++\n        }\n        num /= 10\n   \
    \ }\n    return []interface{}{even_count, odd_count}\n}\n", "    even, odd :=\
    \ 0, 0\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n          \
    \  even++\n        } else {\n            odd++\n        }\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    even, odd := 0, 0\n    digits := []int{}\n    for num > 0 {\n\
    \        digits = append(digits, num%10)\n        num /= 10\n    }\n    for _,\
    \ d := range digits {\n        if d%2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n    }\n    return []interface{}{even, odd}\n\
    }\n", "    evens := make([]interface{}, 0)\n    odds := make([]interface{}, 0)\n\
    \    num /= 10\n    for num > 0 {\n        num /= 10\n        if num%2 == 0 {\n\
    \            evens = append(evens, num)\n        } else {\n            odds =\
    \ append(odds, num)\n        }\n    }\n    return evens, odds\n}\n", "    even,\
    \ odd := 0, 0\n    for num > 0 {\n        num /= 10\n        if num%2 == 0 {\n\
    \            even++\n        } else {\n            odd++\n        }\n    }\n \
    \   return []interface{}{even, odd}\n}\n", "    even, odd := 0, 0\n    digits,\
    \ remainder := num%10, num/10\n    for ; remainder > 0; remainder-- {\n      \
    \  if remainder % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n", "    even,\
    \ odd := 0, 0\n    for num > 0 {\n        num /= 10\n        even++\n    }\n \
    \   for num > 0 {\n        num /= 10\n        odd++\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    even, odd := 0, 0\n    for i := 0; i < 10; i++ {\n        if\
    \ num%10 == 0 {\n            even++\n        } else {\n            odd++\n   \
    \     }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n",
  "    even, odd := 0, 0\n    count := []interface{}{}\n    for num > 0 {\n      \
    \  digit, num := num % 10, num / 10\n        if digit % 2 == 0 {\n           \
    \ even++\n        } else {\n            odd++\n        }\n        count = append(count,\
    \ digit)\n    }\n    return count\n}\n", "    evenCount := 0\n    oddCount :=\
    \ 0\n    digitCount := 0\n    num /= 10\n    for num > 0 {\n        digitCount++\n\
    \        num /= 10\n    }\n    for num > 0 {\n        if num%2 == 0 {\n      \
    \      evenCount++\n        } else {\n            oddCount++\n        }\n    \
    \    num /= 10\n    }\n    return []interface{}{evenCount, oddCount}\n}\n", " \
    \   evens := make([]int, 0)\n    odds := make([]int, 0)\n    for i := 0; i < 10;\
    \ i++ {\n        if num%2 == 0 {\n            evens = append(evens, i)\n     \
    \   } else {\n            odds = append(odds, i)\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{evens, odds}\n}\n", "    even, odd := 0, 0\n\
    \    sum := 0\n    for num > 0 {\n        sum += num % 10\n        num /= 10\n\
    \        if num > 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n    return []interface{}{even, odd}\n}\n", "    evenCount :=\
    \ 0\n    oddCount := 0\n    for i := 0; i < 10; i++ {\n        if num%10 == 0\
    \ {\n            evenCount++\n        } else {\n            oddCount++\n     \
    \   }\n        num /= 10\n    }\n    return []interface{}{evenCount, oddCount}\n\
    }\n", "    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        result = append(result, digit)\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n", "    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num = num / 10\n\
    \    }\n    result = append(result, evenCount)\n    result = append(result, oddCount)\n\
    \    return result\n}\n", "    even, odd := 0, 0\n    for num > 0 {\n        num\
    \ /= 10\n        even++\n    }\n    for num > 0 {\n        num /= 10\n       \
    \ odd++\n    }\n    return []interface{}{even, odd}\n}\n", "    even, odd := 0,\
    \ 0\n    num /= 10\n    for num > 0 {\n        if num%2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num /= 10\n    }\n  \
    \  return []interface{}{even, odd}\n}\n", "    evenCount := 0\n    oddCount :=\
    \ 0\n    for num > 0 {\n        if num%2 == 0 {\n            evenCount++\n   \
    \     } else {\n            oddCount++\n        }\n        num /= 10\n    }\n\
    \    return []interface{}{evenCount, oddCount}\n}\n", "    even_count := 0\n \
    \   odd_count := 0\n    \n    for i := 0; i < 10; i++ {\n        if num % 10 ==\
    \ 0 {\n            even_count++\n        } else {\n            odd_count++\n \
    \       }\n        num /= 10\n    }\n    \n    return []interface{}{even_count,\
    \ odd_count}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
