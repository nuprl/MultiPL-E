name: HumanEval_127_intersection
language: go_test.go
prompt: "package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // You are given two intervals,\n// where each interval is a pair of integers. For\
  \ example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\n// >>> intersection([]interface{}{1, 2}, []interface{}{2, 3})\n// \"\
  NO\"\n// >>> intersection([]interface{}{-1, 1}, []interface{}{0, 4})\n// \"NO\"\n\
  // >>> intersection([]interface{}{-3, -1}, []interface{}{-5, 5})\n// \"YES\"\nfunc\
  \ intersection(interval1 []interface{}, interval2 []interface{}) string {\n"
tests: "func TestIntersection(t *testing.T) {\n  candidate := intersection\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]interface{}{1, 2}, []interface{}{2, 3}),\
  \ expected: \"NO\" },\n     { actual: candidate([]interface{}{-1, 1}, []interface{}{0,\
  \ 4}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-3, -1}, []interface{}{-5,\
  \ 5}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-2, 2}, []interface{}{-4,\
  \ 0}), expected: \"YES\" },\n     { actual: candidate([]interface{}{-11, 2}, []interface{}{-1,\
  \ -1}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{3,\
  \ 5}), expected: \"NO\" },\n     { actual: candidate([]interface{}{1, 2}, []interface{}{1,\
  \ 2}), expected: \"NO\" },\n     { actual: candidate([]interface{}{-2, -2}, []interface{}{-3,\
  \ -2}), expected: \"NO\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    // Write your code here\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersection\
    \ := interval1Start + interval2End - interval1End - interval2Start\n    \n   \
    \ if intersection <= 0 {\n        return \"NO\"\n    }\n    \n    if isPrime(intersection)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for intersectionStart\
    \ < interval2End {\n        if interval1Start <= intersectionEnd && intersectionEnd\
    \ <= interval2Start {\n            intersectionEnd = intersectionEnd + 1\n   \
    \     } else {\n            return \"NO\"\n        }\n    }\n    \n    if interval1Start\
    \ <= intersectionEnd && intersectionEnd <= interval2Start {\n        return \"\
    YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval1End\
    \ {\n            return \"NO\"\n        }\n        if interval1End < interval1Start\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= intersectionEnd && interval1End >= intersectionStart {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            continue\n\
    \        }\n        \n        if interval1Start <= intersectionEnd && interval1End\
    \ >= intersectionStart {\n            intersectionStart = interval1End\n     \
    \       intersectionEnd = interval1Start\n            continue\n        }\n  \
    \      \n        if interval1Start <= intersectionEnd && interval1End <= intersectionStart\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            continue\n        }\n        \n        if interval1Start\
    \ <= intersectionEnd && interval1End >= intersectionStart {\n            intersectionStart\
    \ = interval1End\n            intersectionEnd = interval1Start\n            continue\n\
    \        }\n        \n        if interval1Start <= intersectionEnd && interval1End\
    \ <= intersectionStart {\n            intersectionStart = interval1Start\n   \
    \         intersectionEnd = interval1End\n            continue\n        }\n  \
    \      \n        if interval1Start <= intersectionEnd && interval1End >= intersectionStart\
    \ {\n            intersectionStart = interval1End\n            intersectionEnd\
    \ = interval1Start\n            continue\n        }\n        \n        if interval1Start\
    \ <= intersectionEnd && interval1End <= intersectionStart {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            continue\n\
    \        }\n        \n        if interval1Start <= intersectionEnd && interval1End\
    \ >= intersectionStart {\n            intersectionStart = interval1End\n     \
    \       intersectionEnd = interval1Start\n            continue\n        }\n  \
    \      \n        if interval1Start <= intersectionEnd && interval1End <= intersectionStart\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            continue\n        }\n        \n        if interval1",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ <= interval1End {\n            intersectionStart = min(intersectionStart, interval1Start)\n\
    \            intersectionEnd = max(intersectionEnd, interval1End)\n        } else\
    \ {\n            intersectionStart = min(intersectionStart, interval1End)\n  \
    \          intersectionEnd = max(intersectionEnd, interval1Start)\n        }\n\
    \    }\n    \n    for i := 1; i < len(interval2); i++ {\n        interval2Start\
    \ := interval2[i].(float64)\n        interval2End := interval2[i+1].(float64)\n\
    \        \n        if interval2Start <= interval2End {\n            intersectionStart\
    \ = min(intersectionStart, interval2Start)\n            intersectionEnd = max(intersectionEnd,\
    \ interval2End)\n        } else {\n            intersectionStart = min(intersectionStart,\
    \ interval2End)\n            intersectionEnd = max(intersectionEnd, interval2Start)\n\
    \        }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n     \
    \   if intersectionStart <= interval1End {\n            if intersectionEnd <=\
    \ interval2End {\n                if intersectionStart <= interval2Start {\n \
    \                   if intersectionEnd <= interval1Start {\n                 \
    \       if intersectionEnd <= interval1End {\n                            if intersectionEnd\
    \ <= interval2Start {\n                                if intersectionEnd <= interval2End\
    \ {\n                                    if intersectionEnd <= interval1Start\
    \ {\n                                        if intersectionEnd <= interval1End\
    \ {\n                                            if intersectionEnd <= interval2Start\
    \ {\n                                                if intersectionEnd <= interval2End\
    \ {\n                                                    if intersectionEnd <=\
    \ interval1Start {\n                                                        if\
    \ intersectionEnd <= interval1End {\n                                        \
    \                    if intersectionEnd <= interval2Start {\n                \
    \                                                if intersectionEnd <= interval2End\
    \ {\n                                                    if intersectionEnd <=\
    \ interval1Start {\n                                                        if\
    \ intersectionEnd <= interval1End {\n                                        \
    \                    if intersectionEnd <= interval2Start {\n                \
    \                                                if intersectionEnd <= interval2End\
    \ {\n                                                    if intersectionEnd <=\
    \ interval1Start {\n                                                        if\
    \ intersectionEnd <= interval1End {\n                                        \
    \                    if intersectionEnd <= interval2Start {\n                \
    \                                                if intersectionEnd <= interval2End\
    \ {", "    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1 := make([]int, len(interval1))\n    interval2 := make([]int,\
    \ len(interval2))\n    \n    for i := 0; i < len(interval1); i++ {\n        interval1[i]\
    \ = int(interval1[i])\n    }\n    for i := 0; i < len(interval2); i++ {\n    \
    \    interval2[i] = int(interval2[i])\n    }\n    \n    result := make([]int,\
    \ len(interval1))\n    \n    for i := 0; i < len(interval1); i++ {\n        for\
    \ j := 0; j < len(interval2); j++ {\n            if interval1[i] < interval2[j]\
    \ {\n                result[i] = interval1[i]\n                break\n       \
    \     }\n        }\n    }\n    \n    if result == interval1 {\n        return\
    \ \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    var result string\n    \n\
    \    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n   \
    \ \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n            result += fmt.Sprintf(\"%d\", interval1[i].(float64))\n\
    \        } else {\n            result += fmt.Sprintf(\"%d\", interval2[i].(float64))\n\
    \        }\n    }\n    \n    if result == \"0\" || result == \"1\" {\n       \
    \ return \"NO\"\n    }\n    \n    if isPrime(int(result)) {\n        return \"\
    YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if len(interval1) == 0 || len(interval2) == 0\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        interval1Start += interval1Start\n        interval1End += interval1End\n\
    \        interval2Start += interval2Start\n        interval2End += interval2End\n\
    \    }\n    \n    if interval1Start <= interval2End {\n        interval1Start\
    \ += interval1Start\n        interval1End += interval1End\n        interval2Start\
    \ += interval2Start\n        interval2End += interval2End\n    }\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start {\n        interval1Start += interval1Start\n        interval1End\
    \ += interval1End\n        interval2Start += interval2Start\n        interval2End\
    \ += interval2End\n    }\n    \n    if interval1Start <= interval2End {\n    \
    \    interval1Start += interval1Start\n        interval1End += interval1End\n\
    \        interval2Start += interval2Start\n        interval2End += interval2End\n\
    \    }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2Start {\n        interval1Start += interval1Start\n\
    \        interval1End += interval1End\n        interval2Start += interval2Start\n\
    \        interval2End += interval2End\n    }\n    \n    if interval1Start <= interval2End\
    \ {\n        interval1Start += interval1Start\n        interval1End += interval1End\n\
    \        interval2Start += interval2Start\n        interval2End += interval2End\n\
    \    }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2Start {\n        interval", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    result\
    \ := 0\n    \n    if interval1Start <= interval2Start {\n        result = interval1Start\
    \ <= interval2End ? interval1End : interval2End\n    } else {\n        result\
    \ = interval1Start <= interval2End ? interval2Start : interval1Start\n    }\n\
    \    \n    if result % 2 == 0 {\n        return \"NO\"\n    }\n    \n    for i\
    \ := 3; i <= result/2; i++ {\n        if result % i == 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    \n    return \"YES\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    result := 0\n  \
    \  \n    for i := 0; i < interval1Start; i++ {\n        result ^= interval2[i]\n\
    \    }\n    \n    for i := interval1End; i < interval2End; i++ {\n        result\
    \ ^= interval2[i]\n    }\n    \n    if result != 0 {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ || interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n   \
    \ interval1Length := interval1End - interval1Start\n    interval2Length := interval2End\
    \ - interval2Start\n    \n    if interval1Length == 0 || interval2Length == 0\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        if interval1Start <= interval2Start {\n            return \"NO\"\n\
    \        }\n        if interval1End >= interval2End {\n            return \"NO\"\
    \n        }\n        return \"YES\"\n    }\n    \n    if interval1Length > interval2Length\
    \ {\n        interval1Length -= interval2Length\n        interval2Length = 0\n\
    \    }\n    \n    if interval1Length < interval2Length {\n        interval2Length\
    \ -= interval1Length\n        interval1Length = 0\n    }\n    \n    if interval1Length\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    if interval2Length == 0 {\n\
    \        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        if interval1Start < interval2Start {\n            return \"NO\"\n   \
    \     }\n        return \"YES\"\n    }\n    \n    if interval1End >= interval2End\
    \ {\n        if interval1End > interval2End {\n            return \"NO\"\n   \
    \     }\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2End\
    \ {\n        if interval1Start < interval2End {\n            return \"NO\"\n \
    \       }\n        return \"YES\"\n    }\n    \n    if interval1End >= interval2Start\
    \ {\n        if interval1End > interval2Start {\n            return \"NO\"\n \
    \       }\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "   \
    \ if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionLength := interval1End - interval1Start\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return \"YES\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n    \n    if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \ return \"YES\"\n    }\n    if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n    \n    if\
    \ interval1Start <= interval2Start && interval1End >= interval2End {\n       \
    \ return \"YES\"\n    }\n    if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ >= interval2Start && ", "    \n    var interval1Start, interval1End int\n  \
    \  var interval2Start, interval2End int\n    \n    interval1Start, interval1End\
    \ = interval1[0].(int), interval1[1].(int)\n    interval2Start, interval2End =\
    \ interval2[0].(int), interval2[1].(int)\n    \n    if interval1Start > interval2End\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    if interval1End < interval2Start\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    // Your code here\n\
    \    \n    return \"\"\n}\n", "    interval1Start, interval1End := interval1[0],\
    \ interval1[1]\n    interval2Start, interval2End := interval2[0], interval2[1]\n\
    \n    if interval1Start > interval1End {\n        fmt.Println(\"interval1Start\
    \ > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start > interval2End\
    \ {\n        fmt.Println(\"interval2Start > interval2End\")\n        return \"\
    NO\"\n    }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        fmt.Println(\"interval1Start <=\
    \ interval2End && interval1End >= interval2Start\")\n        return \"NO\"\n \
    \   }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        fmt.Println(\"interval1Start <=\
    \ interval2End && interval1End >= interval2Start\")\n        return \"NO\"\n \
    \   }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        fmt.Println(\"interval1Start <=\
    \ interval2End && interval1End >= interval2Start\")\n        return \"NO\"\n \
    \   }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        fmt.Println(\"interval1Start <=\
    \ interval2End && interval1End >= interval2Start\")\n        return \"NO\"\n \
    \   }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        f", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        return \"NO\"\n    }\n    if interval2Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for intersectionStart <= interval2End\
    \ {\n        if interval1Start <= intersectionEnd && intersectionEnd <= interval2End\
    \ {\n            if interval1Start <= intersectionStart && intersectionStart <=\
    \ interval2Start {\n                intersectionEnd = interval2End\n         \
    \   } else {\n                intersectionStart = interval2Start\n           \
    \ }\n        } else {\n            break\n        }\n    }\n    \n    if intersectionStart\
    \ <= interval2End {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n", "    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval2End\
    \ {\n            return \"NO\"\n        }\n        if interval1End < interval2Start\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= intersectionEnd && interval1End >= intersectionStart {\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1Start >= intersectionEnd && interval1End\
    \ <= intersectionStart {\n            intersectionStart = interval1Start\n   \
    \     }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n", "    \n    // Write your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval2End\
    \ {\n            return \"NO\"\n        }\n        if interval1End < interval2Start\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= intersectionEnd {\n            if interval1End >= intersectionStart {\n \
    \               intersectionEnd = interval1End\n            }\n        } else\
    \ {\n            if interval1Start >= intersectionStart {\n                intersectionStart\
    \ = interval1Start\n            }\n        }\n    }\n    \n    if intersectionEnd\
    \ <= intersectionStart {\n        return \"NO\"\n    }\n    \n    if isPrime(intersectionEnd\
    \ - intersectionStart) {\n        return \"YES\"\n    }\n    \n    return \"NO\"\
    \n}\n", "    if len(interval1) == 0 || len(interval2) == 0 {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n        if interval1Start <= interval2Start\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1End <= interval2End {\n     \
    \       intersectionEnd = interval1End\n        }\n        if intersectionStart\
    \ > intersectionEnd {\n            return \"NO\"\n        }\n        \n      \
    \  interval1Start = interval1Start + 1\n        interval1End = interval1End +\
    \ 1\n        interval2Start = interval2Start + 1\n        interval2End = interval2End\
    \ + 1\n    }\n    \n    if intersectionStart > intersectionEnd {\n        return\
    \ \"NO\"\n    }\n    \n    if isPrime(intersectionStart) && isPrime(intersectionEnd)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ == 0 || len(interval2) == 0 {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"NO\"\n    }\n    if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n        return \"NO\"\n  \
    \  }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for i := 1;\
    \ i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd {\n            if interval1End >= intersectionStart\
    \ {\n                intersectionEnd = interval1End\n            }\n        }\
    \ else {\n            if interval1Start >= intersectionStart {\n             \
    \   intersectionStart = interval1Start\n            }\n        }\n    }\n    \n\
    \    if intersectionEnd <= intersectionStart {\n        return \"NO\"\n    }\n\
    \    \n    if isPrime(intersectionEnd - intersectionStart) {\n        return \"\
    YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    \n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    \n    if interval1Start <=\
    \ interval2Start && interval1End <= interval2End {\n        return fmt.Sprintf(\"\
    NO\")\n    }\n    \n    if interval1Start >= interval2Start && interval1End <=\
    \ interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n    \n    if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n    \n    return \"NO\"\n}\n", "    var result string\n    \n \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"\" {\n        return \"YES\"\n    }\n    \n   \
    \ return result\n}\n", "    interval1Start, interval1End := interval1[0], interval1[1]\n\
    \    interval2Start, interval2End := interval2[0], interval2[1]\n\n    if interval1Start\
    \ > interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\n    if interval1End\
    \ < interval2Start {\n        return fmt.Sprintf(\"NO\")\n    }\n\n    if interval1Start\
    \ > interval2Start {\n        return fmt.Sprintf(\"NO\")\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n\n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return fmt.Sprintf(\"YES\")\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End < interval2End {\n        return fmt.Sprintf(\"YES\")\n    }\n\
    \n    if interval1Start > interval2Start && interval1End <= interval2End {\n \
    \       return fmt.Sprintf(\"YES\")\n    }\n\n    if interval1Start > interval2Start\
    \ && interval1End > interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\
    \n    return fmt.Sprintf(\"NO\")\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionLength := interval1End\
    \ - interval1Start\n    \n    if interval2Start > interval2End {\n        intersectionLength\
    \ += interval2End - interval2Start\n    }\n    \n    if intersectionLength ==\
    \ 0 {\n        return \"NO\"\n    }\n    \n    if intersectionLength == 1 {\n\
    \        return \"YES\"\n    }\n    \n    if isPrime(intersectionLength) {\n \
    \       return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    intersectionLength\
    \ := interval1Length * interval2Length\n    if intersectionLength == 0 {\n   \
    \     return \"NO\"\n    }\n    \n    if interval1Length == interval2Length {\n\
    \        if interval1Start <= interval2Start {\n            return \"YES\"\n \
    \       }\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ {\n        if interval1Length == 1 {\n            return \"YES\"\n        }\n\
    \        return \"NO\"\n    }\n    \n    if interval1End >= interval2End {\n \
    \       if interval2Length == 1 {\n            return \"YES\"\n        }\n   \
    \     return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        if interval1Length == 1 {\n            return \"YES\"\n        }\n  \
    \      return \"NO\"\n    }\n    \n    if interval1End >= interval2End {\n   \
    \     if interval2Length == 1 {\n            return \"YES\"\n        }\n     \
    \   return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n  \
    \      if interval1Length == 1 {\n            return \"YES\"\n        }\n    \
    \    return \"NO\"\n    }\n    \n    if interval1End >= interval2End {\n     \
    \   if interval2Length == 1 {\n            return \"YES\"\n        }\n       \
    \ return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n    \
    \    if interval1Length == 1 {\n            return \"YES\"\n        }\n      \
    \  return \"NO\"\n    }\n    \n    if interval1End >= interval2End {\n       \
    \ if interval2Length == 1 {\n            return \"YES\"\n        }\n        return\
    \ \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n        if interval1Length\
    \ == 1 {\n            return \"YES\"\n        }\n        return \"NO\"\n    }\n\
    \    \n    if interval1End >= interval2End {\n        if interval2Length == 1\
    \ {\n            return \"YES\"\n        }\n        return \"NO\"", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    var interval1_start, interval1_end int\n\
    \    var interval2_start, interval2_end int\n    var interval1_length, interval2_length\
    \ int\n\n    for _, interval := range interval1 {\n        interval1_start = interval.(float64)\n\
    \    }\n    for _, interval := range interval2 {\n        interval2_start = interval.(float64)\n\
    \    }\n    interval1_length = interval1_end - interval1_start\n    interval2_length\
    \ = interval2_end - interval2_start\n\n    if interval1_length == 0 || interval2_length\
    \ == 0 {\n        return \"NO\"\n    }\n\n    if interval1_start <= interval2_start\
    \ {\n        if interval1_end >= interval2_end {\n            return \"NO\"\n\
    \        }\n        if interval1_start <= interval2_end {\n            return\
    \ \"YES\"\n        }\n    }\n    if interval1_end >= interval2_start {\n     \
    \   if interval1_start <= interval2_end {\n            return \"YES\"\n      \
    \  }\n        if interval1_end >= interval2_end {\n            return \"NO\"\n\
    \        }\n    }\n    if interval1_start <= interval2_start {\n        if interval1_end\
    \ >= interval2_end {\n            return \"YES\"\n        }\n        if interval1_start\
    \ <= interval2_end {\n            return \"NO\"\n        }\n    }\n    if interval1_end\
    \ >= interval2_start {\n        if interval1_start <= interval2_end {\n      \
    \      return \"NO\"\n        }\n        if interval1_end >= interval2_end {\n\
    \            return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n", "    if\
    \ len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n   \
    \ interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval1End {\n        return \"NO\"\n    }\n\
    \    if interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    interval1Interval := interval1End - interval1Start\n    interval2Interval\
    \ := interval2End - interval2Start\n    \n    if interval1Interval == 0 || interval2Interval\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    intersection := interval1Interval\
    \ * interval2Interval\n    \n    if intersection <= 1 {\n        return \"NO\"\
    \n    }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n    }\n\
    \    \n    return \"NO\"\n}\n", "    var interval1_start, interval1_end int\n\
    \    var interval2_start, interval2_end int\n    \n    interval1_start = interval1[0].(int)\n\
    \    interval1_end = interval1[1].(int)\n    interval2_start = interval2[0].(int)\n\
    \    interval2_end = interval2[1].(int)\n    \n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start\n    }\n    \n    if interval1_start > interval2_end\
    \ {\n        return \"NO\"\n    }\n    if interval2_start > interval1_end {\n\
    \        return \"NO\"\n    }\n    \n    if interval1_start == interval1_end {\n\
    \        if interval2_start == interval2_end {\n            if interval1_start\
    \ == interval1_end {\n                return \"YES\"\n            }\n        \
    \    return \"NO\"\n        }\n        return \"NO\"\n    }\n    \n    if interval2_start\
    \ == interval2_end {\n        return \"NO\"\n    }\n    \n    if interval1_start\
    \ < interval1_end {\n        if interval2_start < interval2_end {\n          \
    \  if interval1_start < interval2_start {\n                return \"NO\"\n   \
    \         }\n            if interval1_end < interval2_end {\n                return\
    \ \"NO\"\n            }\n        }\n        if interval2_start < interval1_end\
    \ {\n            return \"NO\"\n        }\n        if interval1_start < interval2_end\
    \ {\n            return \"NO\"\n        }\n    }\n    \n    return \"YES\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval1End {\n        return \"NO\"\n    }\n\
    \    if interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    intersection := interval1Start <= interval2End && interval2Start <= interval1End\n\
    \    \n    if intersection {\n        intersectionLength := interval1End - interval1Start\n\
    \        if intersectionLength == 2 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 3 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 5 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 7 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 9 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 11 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 13 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 17 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 19 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 31 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 37 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 47 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 71 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 97 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 109 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 127 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 131 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 137 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 143 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 151 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 157 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 163 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 169 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 173 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 179 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 183 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 191 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 197 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 203 {\n            return \"YES\"\n        }\n\
    \        if intersectionLength == 209 {\n            return \"YES\"\n        }",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    interval1Length := interval1End - interval1Start\n    interval2Length :=\
    \ interval2End - interval2Start\n    \n    if interval1Length == 0 || interval2Length\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        if interval1Start <= interval2Start {\n            return \"YES\"\
    \n        }\n        return \"NO\"\n    }\n    \n    if interval1Length < interval2Length\
    \ {\n        interval1Start += interval1Length\n        interval1End -= interval1Length\n\
    \    } else {\n        interval2Start += interval2Length\n        interval2End\
    \ -= interval2Length\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ == 0 || len(interval2) == 0 {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersection\
    \ := interval1Start + interval1End + interval2Start + interval2End\n    \n   \
    \ if intersection <= 1 {\n        return \"NO\"\n    }\n    \n    if isPrime(intersection)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ <= interval1End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1End\n        } else {\n            intersectionStart\
    \ = interval1End\n            intersectionEnd = interval1Start\n        }\n  \
    \  }\n    \n    for i := 1; i < len(interval2); i++ {\n        interval2Start\
    \ := interval2[i].(float64)\n        interval2End := interval2[i+1].(float64)\n\
    \        \n        if interval2Start <= interval2End {\n            intersectionStart\
    \ = interval2Start\n            intersectionEnd = interval2End\n        } else\
    \ {\n            intersectionStart = interval2End\n            intersectionEnd\
    \ = interval2Start\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        if intersectionStart <= interval1Start && intersectionEnd <= interval1End\
    \ {\n            return \"YES\"\n        }\n        if intersectionStart <= interval2Start\
    \ && intersectionEnd <= interval2End {\n            return \"YES\"\n        }\n\
    \        if intersectionStart <= interval1Start && intersectionEnd <= interval2End\
    \ {\n            return \"YES\"\n        }\n        if intersectionStart <= interval2Start\
    \ && intersectionEnd <= interval1End {\n            return \"YES\"\n        }\n\
    \    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) < len(interval2)\
    \ {\n        interval1, interval2 = interval2, interval1\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            interval1Start, interval1End = interval1End, interval1Start\n\
    \        }\n        \n        if interval2Start > interval2End {\n           \
    \ interval2Start, interval2End = interval2End, interval2Start\n        }\n   \
    \     \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        \n        if interval2Start <= interval1Start\
    \ && interval2End >= interval1End {\n            intersectionStart = interval2Start\n\
    \            intersectionEnd = interval2End\n        }\n    }\n    \n    if intersectionStart\
    \ > intersectionEnd {\n        return \"NO\"\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        intersectionStart += 0.5\n        intersectionEnd\
    \ -= 0.5\n    }\n    \n    if intersectionStart > interval1End {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionStart <= interval1Start {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionEnd >= interval1End {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionEnd >= interval2End {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionStart <= interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionEnd >= interval2End {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionStart <= interval1Start {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionEnd >= interval1End {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionStart <= interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionEnd >= interval2End {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionStart <= interval1Start {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionEnd >= interval1End {\n        return\
    \ \"NO\"\n    }\n    \n    if intersectionStart <= interval2Start {\n        return\
    \ \"NO\"\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    intersection := interval1Start\
    \ <= interval2End && interval2Start <= interval1End\n    \n    if intersection\
    \ {\n        intersectionLength := interval1End - interval1Start\n        \n \
    \       if isPrime(intersectionLength) {\n            return \"YES\"\n       \
    \ }\n    }\n    \n    return \"NO\"\n}\n", "    var result string\n    \n    if\
    \ len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n   \
    \ for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64) >=\
    \ interval2[i].(float64) {\n            result = \"NO\"\n            break\n \
    \       }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n   \
    \ }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if interval1[0].(float64) <= interval2[0].(float64) {\n      \
    \  result = \"NO\"\n    }\n    \n    if result == \"NO\" {\n        return \"\
    NO\"\n    }\n    \n    if interval1[1].(float64) >= interval2[1].(float64) {\n\
    \        result = \"NO\"\n    }\n    \n    if result == \"NO\" {\n        return\
    \ \"NO\"\n    }\n    \n    if interval1[1].(float64) < interval2[1].(float64)\
    \ {\n        result = \"NO\"\n    }\n    \n    if result == \"NO\" {\n       \
    \ return \"NO\"\n    }\n    \n    if interval1[0].(float64) <= interval2[0].(float64)\
    \ && interval1[1].(float64) >= interval2[1].(float64) {\n        result = \"YES\"\
    \n    }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n   \
    \ \n    if interval1[0].(float64) >= interval2[0].(float64) && interval1[1].(float64)\
    \ <= interval2[1].(float64) {\n        result = \"YES\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        return \"YES\"\n    }\n    \n    if interval1[0].(float64)\
    \ <= interval2[0].(float64) && interval1[1].(float64) < interval2[1].(float64)\
    \ {\n        result = \"YES\"\n    }\n    \n    if result == \"YES\" {\n     \
    \   return \"YES\"\n    }\n    \n    if interval1[0].(float64) >= interval2[0].(float64)\
    \ && interval1[1].(float64) > interval2[1].(float64) {\n        result = \"YES\"\
    \n    }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n   \
    \ \n    if interval1[0].(float64) < interval2[0].(float64) && interval1[1].(float64)\
    \ > interval2[1].(float64) {\n        result = \"YES\"\n    }\n    \n    if result\
    \ == \"YES\" {\n        return \"YES\"\n    }\n    \n    if interval1[0].(float64)\
    \ > interval2[0].(float64) && interval1[1].(float64", "    var result string\n\
    \    var start1 int\n    var end1 int\n    var start2 int\n    var end2 int\n\
    \    var length1 int\n    var length2 int\n    var isPrime bool\n    \n    start1\
    \ = interval1[0].(int)\n    end1 = interval1[1].(int)\n    start2 = interval2[0].(int)\n\
    \    end2 = interval2[1].(int)\n    \n    length1 = end1 - start1\n    length2\
    \ = end2 - start2\n    \n    if length1 == 0 || length2 == 0 {\n        result\
    \ = \"NO\"\n    } else {\n        isPrime = true\n        for i := 2; i < length1;\
    \ i++ {\n            if start1 + i == end1 || start2 + i == end2 {\n         \
    \       isPrime = false\n                break\n            }\n            if\
    \ start1 + i == start2 || start2 + i == start1 {\n                isPrime = false\n\
    \                break\n            }\n        }\n    }\n    \n    if isPrime\
    \ {\n        result = \"YES\"\n    }\n    \n    return result\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for i := 1;\
    \ i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if intersectionStart > interval1End {\n            return \"NO\"\n        }\n\
    \        if intersectionEnd < interval1Start {\n            return \"NO\"\n  \
    \      }\n        \n        intersectionStart = intersectionEnd\n        intersectionEnd\
    \ = interval1End\n    }\n    \n    if intersectionStart > intersectionEnd {\n\
    \        return \"NO\"\n    }\n    if intersectionEnd < intersectionStart {\n\
    \        return \"NO\"\n    }\n    \n    if interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End {\n        return \"YES\"\n    }\n    if\
    \ interval1Start <= intersectionEnd && intersectionEnd <= interval1End {\n   \
    \     return \"YES\"\n    }\n    if intersectionStart <= interval1Start && intersectionStart\
    \ <= intersectionEnd {\n        return \"YES\"\n    }\n    if intersectionStart\
    \ <= interval1End && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    intersectionStart := interval1Start\
    \ < interval2Start ? interval1Start : interval2Start\n    intersectionEnd := interval1End\
    \ < interval2End ? interval1End : interval2End\n    \n    intersectionLength :=\
    \ intersectionEnd - intersectionStart\n    \n    if intersectionLength == 0 {\n\
    \        return \"NO\"\n    }\n    \n    if intersectionLength == 1 {\n      \
    \  return \"YES\"\n    }\n    \n    if isPrime(intersectionLength) {\n       \
    \ return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ >= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) <= interval2[i].(float64) {\n \
    \               result = \"NO\"\n                break\n            }\n      \
    \  }\n    }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"YES\"\n                break\n            }\n     \
    \   }\n    }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"YES\"\n                break\n            }\n     \
    \   }\n    }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"YES\"\n                break\n            }\n     \
    \   }\n    }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"YES\"\n                break\n            }\n     \
    \   }\n    }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"YES\"\n                break\n            }\n     \
    \   }\n    }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"YES\"\n                break\n            }\n     \
    \   }\n    }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"YES\"\n                break\n            }\n     \
    \   }\n    }\n    \n    if result == \"YES\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) == interval2[i].(float64) {\n \
    \               result = \"YES\"\n                break\n            }\n     \
    \   }\n    }\n    \n    if result == \"YES", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if len(interval1) != len(interval2) {\n     \
    \   return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start <= interval2Start {\n        return \"NO\"\
    \n    }\n    if interval1End >= interval2End {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2End {\n        return \"YES\"\n    }\n\
    \    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n \
    \       return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        return \"NO\"\n    }\n    if interval2Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    \n    interval1Start += interval2Start\n    interval1End\
    \ += interval2Start\n    \n    if interval1Start > interval1End {\n        return\
    \ \"NO\"\n    }\n    if interval2Start > interval2End {\n        return \"NO\"\
    \n    }\n    \n    interval1Start += interval2End\n    interval1End += interval2End\n\
    \    \n    if interval1Start > interval1End {\n        return \"NO\"\n    }\n\
    \    if interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    result := false\n    \n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        result = true\n    }\n    \n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        result = true\n\
    \    }\n    \n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        result = true\n    }\n    \n    if interval1Start >= interval2End\
    \ && interval1End <= interval2Start {\n        result = true\n    }\n    \n  \
    \  if result {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ || interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n   \
    \ interval1Length := interval1End - interval1Start\n    interval2Length := interval2End\
    \ - interval2Start\n    \n    if interval1Length == 0 || interval2Length == 0\
    \ {\n        return \"NO\"\n    }\n    \n    intersection := interval1Start +\
    \ interval2Start\n    \n    if interval1Length == interval2Length {\n        return\
    \ fmt.Sprintf(\"YES\")\n    }\n    \n    if interval1Length > interval2Length\
    \ {\n        intersection := interval1Start + interval2Length\n    }\n    \n \
    \   if interval1Length < interval2Length {\n        intersection := interval2Start\
    \ + interval1Length\n    }\n    \n    if isPrime(intersection) {\n        return\
    \ fmt.Sprintf(\"YES\")\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for interval1Start <= interval1End && interval2Start <= interval2End\
    \ {\n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n            intersectionStart = interval1End\n        \
    \    intersectionEnd = interval1Start\n        }\n        if interval1Start <=\
    \ interval2Start && interval1End <= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n        }\n  \
    \      if interval1Start >= interval2Start && interval1End >= interval2End {\n\
    \            intersectionStart = interval1End\n            intersectionEnd = interval1Start\n\
    \        }\n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n        }\n        if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1End\n        }\n        if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n            intersectionStart = interval1Start\n\
    \            intersectionEnd = interval1End\n        }\n    }\n    \n    if intersectionStart\
    \ > intersectionEnd {\n        return \"NO\"\n    }\n    \n    if intersectionStart\
    \ < intersectionEnd {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for i := 1;\
    \ i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start < intersectionStart {\n            intersectionStart = interval1Start\n\
    \        }\n        if interval1End > intersectionEnd {\n            intersectionEnd\
    \ = interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ && intersectionStart % 2 == 0 {\n        return \"YES\"\n    }\n    if intersectionStart\
    \ <= intersectionEnd && intersectionStart % 2 != 0 {\n        return \"NO\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1End < interval2Start\
    \ {\n        return \"NO\"\n    }\n    \n    intersection := interval1Start +\
    \ interval1End - interval2Start - interval2End\n    if intersection <= 0 {\n \
    \       return \"NO\"\n    }\n    \n    if isPrime(intersection) {\n        return\
    \ \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n    // Write your code\
    \ here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    var result string\n   \
    \ \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval1);\
    \ i++ {\n            if interval1[i].(float64) >= interval2[i].(float64) {\n \
    \               result = \"NO\"\n                break\n            }\n      \
    \  }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n    }\n \
    \   \n    if result == \"YES\" {\n        return \"YES\"\n    }\n    \n    return\
    \ result\n}\n", "    if len(interval1) == 0 || len(interval2) == 0 {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0].([]interface{})[0],\
    \ interval1[0].([]interface{})[1]\n    interval2Start, interval2End := interval2[0].([]interface{})[0],\
    \ interval2[0].([]interface{})[1]\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := make([]interface{}, 0)\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1Start <=\
    \ interval1[i].([]interface{})[1] && interval1[i].([]interface{})[1] < interval1End\
    \ {\n            intersection = append(intersection, interval1[i])\n        }\n\
    \    }\n    \n    for i := 0; i < len(interval2); i++ {\n        if interval2Start\
    \ <= interval2[i].([]interface{})[1] && interval2[i].([]interface{})[1] < interval2End\
    \ {\n            intersection = append(intersection, interval2[i])\n        }\n\
    \    }\n    \n    if len(intersection) == 0 {\n        return \"NO\"\n    }\n\
    \    \n    length := len(intersection)\n    \n    if length == 1 {\n        return\
    \ \"NO\"\n    }\n    \n    if length == 2 && interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    \n   \
    \ if length == 2 && interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    if length == 3 && interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if length == 3 && interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    \n    if length == 4\
    \ && interval1Start <= interval2Start && interval1End >= interval2End {\n    \
    \    return \"YES\"\n    }\n    \n    if length == 4 && interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    \n \
    \   if length == 5 && interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if length == 5 && interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"YES\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n\n    if interval1Start <= interval2End\
    \ && interval1End <= interval2Start {\n        if interval1Start <= interval2Start\
    \ {\n            interval1Start = interval1Start\n            interval1End = interval1End\n\
    \        } else {\n            interval1End = interval1End\n            interval1Start\
    \ = interval1Start\n        }\n    }\n\n    if interval1Start <= interval2End\
    \ {\n        if interval1End <= interval2End {\n            interval1End = interval1End\n\
    \            interval1Start = interval1Start\n        } else {\n            interval1End\
    \ = interval1End\n            interval1Start = interval1Start\n        }\n   \
    \ }\n\n    if interval1Start <= interval2Start {\n        if interval1End <= interval2End\
    \ {\n            interval1End = interval1End\n            interval1Start = interval1Start\n\
    \        } else {\n            interval1End = interval1End\n            interval1Start\
    \ = interval1Start\n        }\n    }\n\n    if interval1Start <= interval2End\
    \ {\n        if interval1Start <= interval2End {\n            interval1Start =\
    \ interval1Start\n            interval1End = interval1End\n        } else {\n\
    \            interval1End = interval1End\n            interval1Start = interval1Start\n\
    \        }\n    }\n\n    if interval1Start <= interval2Start {\n        if interval1End\
    \ <= interval2End {\n            interval1End = interval1End\n            interval1Start\
    \ = interval1Start\n        } else {\n            interval1End = interval1End\n\
    \            interval1Start = interval1Start\n        }\n    }\n\n    if interval1Start\
    \ <= interval2End {\n        if interval1Start <= interval2End {\n           \
    \ interval1Start = interval1Start\n            interval1End = interval1End\n \
    \       } else {\n            interval1End = interval1End\n            interval1Start\
    \ = interval1Start\n        }\n    }\n\n    if interval1Start <= interval2Start\
    \ {\n        if interval1End <= interval2End {\n            interval1End = interval1End\n\
    \            interval1Start = interval1Start\n        } else {\n            interval1End\
    \ = interval1End\n            interval1Start = interval1Start\n        }\n   \
    \ }\n\n    if interval1Start <= interval2End {\n        if interval1Start <= interval2End\
    \ {\n            interval1Start = interval1Start\n            interval1End = interval1End\n\
    \        } else {\n            interval1End = interval1End\n            interval1Start\
    \ = interval1Start\n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0], interval1[1]\n\
    \    interval2Start, interval2End := interval2[0], interval2[1]\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval2Start < interval2End\
    \ {\n        if interval2Start <= intersectionEnd {\n            intersectionEnd\
    \ = interval2End\n        } else {\n            intersectionStart = intersectionEnd\n\
    \            intersectionEnd = interval2Start\n        }\n    }\n    \n    if\
    \ intersectionStart <= intersectionEnd {\n        return \"NO\"\n    }\n    \n\
    \    if interval1Start <= interval2Start && interval1End >= interval2End {\n \
    \       return \"YES\"\n    }\n    \n    if interval1Start <= interval2End &&\
    \ interval1End >= interval2Start {\n        return \"YES\"\n    }\n    \n    return\
    \ \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval2End {\n      \
    \  return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n    intersectionEnd\
    \ := interval1End\n    \n    for intersectionEnd < interval2End {\n        if\
    \ interval1[intersectionEnd].(int) == interval2[intersectionEnd].(int) {\n   \
    \         intersectionEnd += 1\n        } else {\n            break\n        }\n\
    \    }\n    \n    if intersectionEnd > interval2End {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start < intersectionStart {\n        return \"NO\"\
    \n    }\n    \n    if interval1End > intersectionEnd {\n        return \"NO\"\n\
    \    }\n    \n    if intersectionStart < interval2Start {\n        return \"NO\"\
    \n    }\n    \n    if intersectionEnd > interval2End {\n        return \"NO\"\n\
    \    }\n    \n    if interval1[intersectionStart].(int) == interval2[intersectionStart].(int)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersection\
    \ := interval1Start + interval1End - interval2Start - interval2End\n    \n   \
    \ if intersection <= 0 {\n        return \"NO\"\n    }\n    \n    if isPrime(intersection)\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    // Your code here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    interval1Start, interval1End := interval1[0].([]interface{})[0],\
    \ interval1[0].([]interface{})[1]\n    interval2Start, interval2End := interval2[0].([]interface{})[0],\
    \ interval2[0].([]interface{})[1]\n    if interval1Start > interval1End {\n  \
    \      interval1Start, interval1End = interval1End, interval1Start\n    }\n  \
    \  if interval2Start > interval2End {\n        interval2Start, interval2End =\
    \ interval2End, interval2Start\n    }\n    if interval1Start > interval2End {\n\
    \        return \"NO\"\n    }\n    if interval1Start < interval2Start {\n    \
    \    return \"NO\"\n    }\n    if interval1End > interval2End {\n        return\
    \ \"NO\"\n    }\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n        return \"YES\"\n \
    \   }\n    if interval1Start >= interval2Start && interval1End < interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start < interval2Start && interval1End\
    \ >= interval2End {\n        return \"NO\"\n    }\n    if interval1Start < interval2Start\
    \ && interval1End <= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End < interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start < interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    return \"NO\"\n}\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    \n    if interval1Start\
    \ > interval1End {\n        fmt.Println(\"interval1Start > interval1End\")\n \
    \       return \"NO\"\n    }\n    if interval2Start > interval2End {\n       \
    \ fmt.Println(\"interval2Start > interval2End\")\n        return \"NO\"\n    }\n\
    \    \n    \n    \n    if interval1Start < interval2Start {\n        fmt.Println(\"\
    interval1Start < interval2Start\")\n        return \"NO\"\n    }\n    if interval1End\
    \ > interval2End {\n        fmt.Println(\"interval1End > interval2End\")\n   \
    \     return \"NO\"\n    }\n    \n    \n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        fmt.Println(\"interval1Start <= interval2Start\
    \ && interval1End >= interval2End\")\n        return \"NO\"\n    }\n    \n   \
    \ \n    \n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        fmt.Println(\"interval1Start >= interval2Start && interval1End <=\
    \ interval2End\")\n        return \"NO\"\n    }\n    \n    \n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        fmt.Println(\"\
    interval1Start <= interval2Start && interval1End >= interval2End\")\n        return\
    \ \"NO\"\n    }\n    \n    \n    \n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        fmt.Println(\"interval1Start >= interval2Start\
    \ && interval1End <= interval2End\")\n        return \"NO\"\n    }\n    \n   \
    \ \n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"NO\"\n    }\n    \n    \n    \n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        fmt.Println(\"\
    interval1Start >= interval2Start && interval1End <= interval2End\")\n        return\
    \ \"NO\"\n    }\n    \n    \n    \n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        fmt.Println(\"interval1Start <= interval2",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1 := interval1\n    interval2 := interval2\n    \n    result := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i]\
    \ > interval2[i] {\n            interval1[i], interval2[i] = interval2[i], interval1[i]\n\
    \        }\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if\
    \ interval1[i] <= interval2[i] {\n            result = append(result, interval1[i])\n\
    \        }\n    }\n    \n    if len(result) == 0 {\n        return \"NO\"\n  \
    \  }\n    \n    if len(result) == 1 {\n        return \"YES\"\n    }\n    \n \
    \   if isPrime(len(result)) {\n        return \"YES\"\n    }\n    \n    return\
    \ \"NO\"\n}\n", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(int) < interval2[i].(int) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(int) > interval2[i].(int) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n        return\
    \ \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n\
    \    interval2 := make([]int, len(interval2))\n    \n    for i, v := range interval1\
    \ {\n        interval1[i] = int(v.(float64))\n    }\n    for i, v := range interval2\
    \ {\n        interval2[i] = int(v.(float64))\n    }\n    \n    result := make([]int,\
    \ len(interval1))\n    \n    for i, v := range interval1 {\n        for j, w :=\
    \ range interval2 {\n            if v < w {\n                result[i] = v\n \
    \               break\n            }\n        }\n    }\n    \n    if len(result)\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    length := len(result)\n    \n\
    \    if length == 1 {\n        return \"YES\"\n    }\n    \n    if length == 2\
    \ && result[0] == result[1] {\n        return \"YES\"\n    }\n    \n    if length\
    \ == 2 && result[0] == result[1] {\n        return \"NO\"\n    }\n    \n    if\
    \ length == 3 && result[0] == result[1] && result[1] == result[2] {\n        return\
    \ \"YES\"\n    }\n    \n    if length == 3 && result[0] == result[1] && result[1]\
    \ == result[2] {\n        return \"NO\"\n    }\n    \n    if length == 4 && result[0]\
    \ == result[1] && result[1] == result[2] && result[2] == result[3] {\n       \
    \ return \"YES\"\n    }\n    \n    if length == 4 && result[0] == result[1] &&\
    \ result[1] == result[2] && result[2] == result[3] {\n        return \"NO\"\n\
    \    }\n    \n    if length == 5 && result[0] == result[1] && result[1] == result[2]\
    \ && result[2] == result[3] && result[3] == result[4] {\n        return \"YES\"\
    \n    }\n    \n    if length == 5 && result[0] == result[1] && result[1] == result[2]\
    \ && result[2] == result[3] && result[3] == result[4] {\n        return \"NO\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    \n    if interval1Start\
    \ > interval1End {\n        fmt.Println(\"interval1Start > interval1End\")\n \
    \       return \"NO\"\n    }\n    if interval2Start > interval2End {\n       \
    \ fmt.Println(\"interval2Start > interval2End\")\n        return \"NO\"\n    }\n\
    \    \n    \n    if interval1Start < interval2Start {\n        fmt.Println(\"\
    interval1Start < interval2Start\")\n        return \"NO\"\n    }\n    if interval1End\
    \ > interval2End {\n        fmt.Println(\"interval1End > interval2End\")\n   \
    \     return \"NO\"\n    }\n    \n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        fmt.Println(\"interval1Start <= interval2Start\
    \ && interval1End >= interval2End\")\n        return \"YES\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        fmt.Println(\"\
    interval1Start >= interval2Start && interval1End <= interval2End\")\n        return\
    \ \"YES\"\n    }\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End >=\
    \ interval2End\")\n        return \"YES\"\n    }\n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        fmt.Println(\"interval1Start >= interval2Start\
    \ && interval1End <= interval2End\")\n        return \"YES\"\n    }\n    \n  \
    \  \n    if interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \        fmt.Println(\"interval1Start <= interval2Start && interval1End >= interval2End\"\
    )\n        return \"YES\"\n    }\n    if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n        fmt.Println(\"interval1Start >= interval2Start &&\
    \ interval1End <= interval2End\")\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        fmt.Println(\"\
    interval1Start <= interval2Start && interval1End >= interval2End\")\n        return\
    \ \"YES\"\n    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        f", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    intersectionStart := interval1Start <= interval2Start && interval1End >=\
    \ interval2End\n    intersectionEnd := interval1Start <= interval2End && interval1End\
    \ >= interval2Start\n    \n    if intersectionStart && intersectionEnd {\n   \
    \     intersectionLength := interval1End - interval1Start\n        if isPrime(intersectionLength)\
    \ {\n            return \"YES\"\n        }\n    }\n    \n    return \"NO\"\n}\n",
  "    if len(interval1) < len(interval2) {\n        interval1, interval2 = interval2,\
    \ interval1\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n\n    if interval1Start > interval2End {\n        return\
    \ \"NO\"\n    }\n    if interval1End < interval2Start {\n        return \"NO\"\
    \n    }\n    \n    interval1Len := interval1End - interval1Start\n    interval2Len\
    \ := interval2End - interval2Start\n    \n    if interval1Len > interval2Len {\n\
    \        return \"NO\"\n    }\n    \n    if interval1Len == interval2Len {\n \
    \       \n        if interval1Start <= interval2Start {\n            return \"\
    YES\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"YES\"\n        }\n        \n        if interval1Start <= interval2End {\n\
    \            return \"YES\"\n        }\n        if interval1End >= interval2Start\
    \ {\n            return \"YES\"\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        if interval1End\
    \ >= interval2End {\n            return \"YES\"\n        }\n        \n       \
    \ if interval1Start <= interval2Start {\n            return \"YES\"\n        }\n\
    \        if interval1End >= interval2End {\n            return \"YES\"\n     \
    \   }\n        \n        if interval1Start <= interval2Start {\n            return\
    \ \"YES\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"YES\"\n        }\n        \n        if interval1Start <= interval2Start {\n\
    \            return \"YES\"\n        }\n        if interval1End >= interval2End\
    \ {\n            return \"YES\"\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        if interval1End\
    \ >= interval2End {\n            return \"YES\"\n        }\n        \n       \
    \ if interval1Start <= interval2Start {\n            return \"YES\"\n        }\n\
    \        if interval1End >= interval2End {\n            return \"YES\"\n     \
    \   }\n        \n        if interval1Start <= interval2Start {\n            return\
    \ \"YES\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"YES\"\n        }\n        \n        if interval1Start <= interval2Start {\n\
    \            return \"YES\"\n        }\n        if interval1End >= interval2End\
    \ {\n            return \"YES\"\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            return \"YES\"\n        }\n        if interval",
  "    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersection := interval1Start + interval1End - interval2Start - interval2End\n\
    \    \n    if intersection <= 0 {\n        return \"NO\"\n    }\n    \n    if\
    \ isPrime(intersection) {\n        return \"YES\"\n    }\n    \n    return \"\
    NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End :=\
    \ interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n    interval2End\
    \ := interval2[1].(float64)\n    \n    intersectionLength := interval1End - interval1Start\n\
    \    \n    if interval2Start <= interval1End && interval2End <= interval1End {\n\
    \        if interval2Start <= interval1Start && interval2End <= interval1Start\
    \ {\n            if interval2Start <= interval1End && interval2End <= interval1End\
    \ {\n                return \"YES\"\n            }\n        }\n    }\n    \n \
    \   if interval2Start <= interval1Start && interval2End <= interval1Start {\n\
    \        if interval2Start <= interval1End && interval2End <= interval1End {\n\
    \            if interval2Start <= interval1End && interval2End <= interval1End\
    \ {\n                return \"YES\"\n            }\n        }\n    }\n    \n \
    \   if interval2Start <= interval1Start && interval2End <= interval1Start {\n\
    \        if interval2Start <= interval1End && interval2End <= interval1End {\n\
    \            if interval2Start <= interval1End && interval2End <= interval1End\
    \ {\n                return \"YES\"\n            }\n        }\n    }\n    \n \
    \   if interval2Start <= interval1Start && interval2End <= interval1Start {\n\
    \        if interval2Start <= interval1End && interval2End <= interval1End {\n\
    \            if interval2Start <= interval1End && interval2End <= interval1End\
    \ {\n                return \"YES\"\n            }\n        }\n    }\n    \n \
    \   if interval2Start <= interval1Start && interval2End <= interval1Start {\n\
    \        if interval2Start <= interval1End && interval2End <= interval1End {\n\
    \            if interval2Start <= interval1End && interval2End <= interval1End\
    \ {\n                return \"YES\"\n            }\n        }\n    }\n    \n \
    \   if interval2Start <= interval1Start && interval2End <= interval1Start {\n\
    \        if interval2Start <= interval1End && interval2End <= interval1End {\n\
    \            if interval2Start <= interval1End && interval2End <= interval1End\
    \ {\n                return \"YES\"\n            }\n        }\n    }\n    \n \
    \   if interval2Start <= interval1Start && interval2End <= interval1Start {\n\
    \        if interval2Start <= interval1End && interval2End <= interval1", "  \
    \  if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval1End || interval2Start > interval2End {\n\
    \        return \"NO\"\n    }\n    \n    intersection := make([]interface{}, 0)\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1Start <=\
    \ interval2Start && interval1End >= interval2End {\n            intersection =\
    \ append(intersection, interval1[i])\n        }\n        if interval1Start <=\
    \ interval2End && interval1End >= interval2Start {\n            intersection =\
    \ append(intersection, interval1[i])\n        }\n        if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n            intersection =\
    \ append(intersection, interval1[i])\n        }\n        if interval1Start >=\
    \ interval2End && interval1End <= interval2Start {\n            intersection =\
    \ append(intersection, interval1[i])\n        }\n    }\n    \n    if len(intersection)\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    length := len(intersection)\n\
    \    \n    if length == 1 {\n        return \"YES\"\n    }\n    \n    if length\
    \ == 2 && interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \        return \"YES\"\n    }\n    \n    if length == 2 && interval1Start <=\
    \ interval2End && interval1End >= interval2Start {\n        return \"YES\"\n \
    \   }\n    \n    if length == 2 && interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n        return \"YES\"\n    }\n    \n    if length == 2 &&\
    \ interval1Start >= interval2End && interval1End <= interval2Start {\n       \
    \ return \"YES\"\n    }\n    \n    if length == 3 && interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    \n   \
    \ if length == 3 && interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    if length == 3 && interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if length == 3 && interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n\
    }\n", "    var result string\n    \n    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n\
    \        if interval1[i].(float64) >= interval2[i].(float64) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n        for\
    \ i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64) <=\
    \ interval2[i].(float64) {\n                result = \"NO\"\n                break\n\
    \            }\n        }\n    }\n    \n    if result == \"YES\" {\n        for\
    \ i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64) <=\
    \ interval2[i].(float64) {\n                result = \"YES\"\n               \
    \ break\n            }\n        }\n    }\n    \n    if result == \"YES\" {\n \
    \       for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n                result = \"YES\"\n            \
    \    break\n            }\n        }\n    }\n    \n    if result == \"YES\" {\n\
    \        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n                result = \"YES\"\n            \
    \    break\n            }\n        }\n    }\n    \n    if result == \"YES\" {\n\
    \        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n                result = \"YES\"\n            \
    \    break\n            }\n        }\n    }\n    \n    if result == \"YES\" {\n\
    \        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n                result = \"YES\"\n            \
    \    break\n            }\n        }\n    }\n    \n    if result == \"YES\" {\n\
    \        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n                result = \"YES\"\n            \
    \    break\n            }\n        }\n    }\n    \n    if result == \"YES\" {\n\
    \        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n                result = \"YES\"\n            \
    \    break\n            }\n        }\n    }\n    \n    if result == \"YES\" {\n\
    \        for i := 0; i < len(interval1); i++ {\n            if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n                result = \"YES\"\n            \
    \    break\n            }\n        }\n    }\n    \n    if result == \"YES", " \
    \   interval1Start, interval1End := interval1[0], interval1[1]\n    interval2Start,\
    \ interval2End := interval2[0], interval2[1]\n\n    if interval1Start > interval2End\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n\n    if interval1End < interval2Start\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n\n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n\n    if interval1Start >= interval2Start {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n\n    if interval1End <= interval2End {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n\n    if interval1Start <= interval2Start {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return fmt.Sprintf(\"YES\")\n    }\n\n    if interval1Start >= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n\n    return fmt.Sprintf(\"NO\")\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := interval1Start + interval1End\
    \ - interval2Start - interval2End\n    \n    if intersection <= 0 {\n        return\
    \ \"NO\"\n    }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) < len(interval2)\
    \ {\n        interval1, interval2 = interval2, interval1\n    }\n    \n    var\
    \ result string\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        result = \"YES\"\n    } else {\n        result =\
    \ \"NO\"\n    }\n    \n    return result\n}\n", "    var interval1Start, interval1End\
    \ int\n    var interval2Start, interval2End int\n    \n    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        interval1Start = interval1[i].(int)\n        interval1End = interval1Start\
    \ + interval1[i].(int)\n        \n        for j := 0; j < len(interval2); j++\
    \ {\n            interval2Start = interval2[j].(int)\n            interval2End\
    \ = interval2Start + interval2[j].(int)\n            \n            if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n                return\
    \ \"YES\"\n            }\n        }\n    }\n    \n    return \"NO\"\n}\n", " \
    \   \n    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    \n    if interval1Start > interval1End {\n        fmt.Println(\"interval1Start\
    \ > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start > interval2End\
    \ {\n        fmt.Println(\"interval2Start > interval2End\")\n        return \"\
    NO\"\n    }\n    \n    \n    if interval1Start < interval2Start {\n        fmt.Println(\"\
    interval1Start < interval2Start\")\n        return \"NO\"\n    }\n    if interval1End\
    \ > interval2End {\n        fmt.Println(\"interval1End > interval2End\")\n   \
    \     return \"NO\"\n    }\n    \n    \n    if interval1Start <= interval2Start\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start\")\n        return\
    \ \"NO\"\n    }\n    if interval1End >= interval2End {\n        fmt.Println(\"\
    interval1End >= interval2End\")\n        return \"NO\"\n    }\n    \n    \n  \
    \  if interval1Start <= interval2Start && interval1End >= interval2End {\n   \
    \     fmt.Println(\"interval1Start <= interval2Start && interval1End >= interval2End\"\
    )\n        return \"NO\"\n    }\n    \n    \n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        fmt.Println(\"interval1Start <= interval2Start\
    \ && interval1End <= interval2End\")\n        return \"YES\"\n    }\n    \n  \
    \  \n    if interval1Start >= interval2Start && interval1End >= interval2End {\n\
    \        fmt.Println(\"interval1Start >= interval2Start && interval1End >= interval2End\"\
    )\n        return \"YES\"\n    }\n    \n    \n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        fmt.Println(\"interval1Start >= interval2Start\
    \ && interval1End <= interval2End\")\n        return \"YES\"\n    }\n    \n  \
    \  \n    if interval1Start <= interval2Start && interval1End <= interval2End {\n\
    \        fmt.Println(\"interval1Start <= interval2Start && interval1End <= interval2End\"\
    )\n        return \"YES\"\n    }\n    \n    \n    if interval1Start >= interval2Start\
    \ && interval1End >= interval2End {\n        fmt.Println(\"interval1Start >= interval2Start\
    \ && interval", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n    \n    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        interval1Start\
    \ = interval1[i].(int)\n        interval1End = interval1Start + 1\n        interval2Start\
    \ = interval2[i].(int)\n        interval2End = interval2Start + 1\n        \n\
    \        if interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \            continue\n        }\n        \n        if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n            continue\n        }\n     \
    \   \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            continue\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            continue\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            continue\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            continue\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            continue\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            continue\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            continue\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            continue\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    intersectionStart := interval1Start\
    \ <= interval2Start && interval2Start <= interval1End\n    intersectionEnd :=\
    \ interval1End <= interval2End && interval2End <= interval1End\n    \n    if intersectionStart\
    \ && intersectionEnd {\n        intersectionLength := interval1End - interval1Start\n\
    \        if isPrime(intersectionLength) {\n            return \"YES\"\n      \
    \  }\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval1End\
    \ {\n        return \"NO\"\n    }\n    if interval2Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := interval1Start <= interval2Start\
    \ && interval1End >= interval2End\n    if intersection {\n        intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \  if intersection {\n            intersection := interval1Start <= interval2Start\
    \ && interval1End >= interval2End\n            if intersection {\n           \
    \     intersection := interval1Start <= interval2End && interval1End >= interval2Start\n\
    \                if intersection {\n                    intersection := interval1Start\
    \ <= interval2End && interval1End >= interval2Start\n                    if intersection\
    \ {\n                        intersection := interval1Start <= interval2End &&\
    \ interval1End >= interval2Start\n                        if intersection {\n\
    \                            intersection := interval1Start <= interval2End &&\
    \ interval1End >= interval2Start\n                            if intersection\
    \ {\n                                intersection := interval1Start <= interval2End\
    \ && interval1End >= interval2Start\n                                if intersection\
    \ {\n                                    intersection := interval1Start <= interval2End\
    \ && interval1End >= interval2Start\n                                    if intersection\
    \ {\n                                        intersection := interval1Start <=\
    \ interval2End && interval1End >= interval2Start\n                           \
    \             if intersection {\n                                            intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \                                      if intersection {\n                   \
    \                             intersection := interval1Start <= interval2End &&\
    \ interval1End >= interval2Start\n                                           \
    \     if intersection {\n                                                    intersection\
    \ := interval1Start <= interval2End && interval1End >= interval2Start\n      \
    \                                              if intersection {\n           \
    \                                             intersection := interval1Start <=\
    \ interval2End && interval1End >= interval2Start\n                           \
    \                             if intersection {\n                            \
    \                                intersection := interval1Start <= interval2End\
    \ && interval1End >= interval2Start\n                                        \
    \                    if intersection {\n                                     \
    \                           intersection := interval1Start <= interval2End &&\
    \ interval1End >= interval2Start\n                                           \
    \                     if intersection {\n                                    \
    \                                intersection := interval1Start <= interval2End\
    \ && interval1End >= interval2Start\n                                        \
    \                            if intersection {\n                             \
    \   ", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n   \
    \ }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    intersection := interval1Start <= interval2Start && interval1End >=\
    \ interval2End\n    \n    if intersection {\n        intersectionLength := interval1End\
    \ - interval1Start\n        \n        if isPrime(intersectionLength) {\n     \
    \       return \"YES\"\n        }\n    }\n    \n    return \"NO\"\n}\n", "   \
    \ interval1Start, interval1End := interval1[0].(int), interval1[1].(int)\n   \
    \ interval2Start, interval2End := interval2[0].(int), interval2[1].(int)\n\n \
    \   if interval1Start > interval2End {\n        return fmt.Sprintf(\"NO\")\n \
    \   }\n    if interval1End < interval2Start {\n        return fmt.Sprintf(\"NO\"\
    )\n    }\n\n    intersection := interval1Start <= interval2End && interval1End\
    \ >= interval2Start\n\n    if intersection {\n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            return fmt.Sprintf(\"YES\")\n\
    \        }\n        if interval1Start <= interval2End && interval1End < interval2Start\
    \ {\n            return fmt.Sprintf(\"NO\")\n        }\n        if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n            return fmt.Sprintf(\"\
    NO\")\n        }\n    }\n\n    return fmt.Sprintf(\"NO\")\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n   \
    \ }\n    if interval1Start < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1End < interval2End {\n        return \"NO\"\n    }\n  \
    \  \n    intersection := interval1Start + interval2End - interval1End - interval2Start\n\
    \    if isPrime(intersection) {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i] > interval2[i] {\n            result = \"NO\"\n \
    \           break\n        }\n    }\n    \n    if result == \"NO\" {\n       \
    \ return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n    \
    \    if interval1[i] < interval2[i] {\n            result = \"NO\"\n         \
    \   break\n        }\n    }\n    \n    if result == \"NO\" {\n        return \"\
    NO\"\n    }\n    \n    if result == \"YES\" {\n        return \"YES\"\n    }\n\
    \    \n    return \"NO\"\n}\n", "    \n    // Write your code here\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i] > interval2[i] {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i] < interval2[i] {\n            result = \"NO\"\
    \n            break\n        }\n    }\n    \n    if result == \"NO\" {\n     \
    \   return \"NO\"\n    }\n    \n    if result == \"YES\" {\n        return \"\
    YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start <= interval2Start {\n        return \"NO\"\
    \n    }\n    if interval1End >= interval2End {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2End {\n        return \"YES\"\n    }\n\
    \    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n \
    \       return \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n\
    \    interval2 := make([]int, len(interval2))\n    \n    for i, v := range interval1\
    \ {\n        interval1[i] = v.(int)\n    }\n    for i, v := range interval2 {\n\
    \        interval2[i] = v.(int)\n    }\n    \n    result := make([]int, len(interval1))\n\
    \    \n    for i, v := range interval1 {\n        for j, w := range interval2\
    \ {\n            if v < w {\n                result[i] = v\n                break\n\
    \            }\n        }\n    }\n    \n    if len(result) == 0 {\n        return\
    \ \"NO\"\n    }\n    \n    result := make([]int, len(result))\n    \n    for i,\
    \ v := range result {\n        if v == 1 {\n            return \"YES\"\n     \
    \   }\n    }\n    \n    return \"NO\"\n}\n", "    var interval1Start, interval1End\
    \ int\n    var interval2Start, interval2End int\n    \n    if len(interval1) !=\
    \ len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        interval1Start = interval1[i].(int)\n        interval1End = interval1Start\
    \ + interval1[i].(int)\n        \n        for j := 0; j < len(interval2); j++\
    \ {\n            interval2Start = interval2[j].(int)\n            interval2End\
    \ = interval2Start + interval2[j].(int)\n            \n            if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n                fmt.Println(interval1Start,\
    \ interval1End, interval2Start, interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start\
    \ <= interval2Start && interval1End >= interval2End)\n                fmt.Println(interval1Start ",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    intersectionStart := interval1Start <= interval2Start && interval1End\
    \ >= interval2End\n    intersectionEnd := interval1Start <= interval2End && interval1End\
    \ >= interval2Start\n    \n    if intersectionStart && intersectionEnd {\n   \
    \     intersectionLength := interval1End - interval1Start\n        if isPrime(intersectionLength)\
    \ {\n            return \"YES\"\n        }\n    }\n    \n    return \"NO\"\n}\n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ && intersectionEnd >= interval2Start {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval2End {\n      \
    \  return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersectionLength := interval1End - interval1Start\
    \ + 1\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        if interval1Start <= interval2Start {\n            intersectionLength++\n\
    \        }\n        if interval1End >= interval2End {\n            intersectionLength++\n\
    \        }\n    }\n    if intersectionLength == 2 {\n        return \"YES\"\n\
    \    }\n    if intersectionLength % 2 == 0 {\n        return \"NO\"\n    }\n \
    \   \n    primeLength := 0\n    primeLength := intersectionLength / 2\n    if\
    \ primeLength == 2 {\n        return \"YES\"\n    }\n    if primeLength % 2 ==\
    \ 0 {\n        return \"NO\"\n    }\n    \n    if primeLength == 1 {\n       \
    \ return \"YES\"\n    }\n    \n    if primeLength > 1 {\n        return \"NO\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    interval1Start, interval1End := interval1[0], interval1[1]\n\
    \    interval2Start, interval2End := interval2[0], interval2[1]\n    if interval1Start\
    \ > interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n    if interval1End\
    \ < interval2Start {\n        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n    if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n        return fmt.Sprintf(\"YES\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End <= interval2End {\n \
    \       return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start >= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\
    \    if interval1Start <= interval2Start && interval1End >= interval2Start {\n\
    \        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End >= interval2Start {\n\
    \        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End >= interval2Start {\n\
    \        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End >= interval2Start {\n\
    \        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End >= interval2Start {\n\
    \        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return fmt.Sprintf(\"NO\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End >= interval2Start {\n\
    \        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End ", "    var result string\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) < interval2[i].(float64) {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i].(float64) >= interval2[i].(float64) {\n     \
    \       result = \"NO\"\n            break\n        }\n    }\n    \n    if result\
    \ == \"NO\" {\n        return \"NO\"\n    }\n    \n    if isPrime(interval1[0].(float64)\
    \ + interval1[1].(float64)) && isPrime(interval2[0].(float64) + interval2[1].(float64))\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    var interval1Start, interval1End int\n\
    \    var interval2Start, interval2End int\n    var lengthOfIntersection int\n\n\
    \    interval1Start, interval1End = interval1[0].(int), interval1[1].(int)\n \
    \   interval2Start, interval2End = interval2[0].(int), interval2[1].(int)\n\n\
    \    if interval1Start <= interval2End && interval1End >= interval2Start {\n \
    \       lengthOfIntersection = interval1End - interval1Start\n    } else {\n \
    \       return \"NO\"\n    }\n\n    if lengthOfIntersection == 0 {\n        return\
    \ \"NO\"\n    }\n\n    if lengthOfIntersection == 1 {\n        if isPrime(lengthOfIntersection)\
    \ {\n            return \"YES\"\n        } else {\n            return \"NO\"\n\
    \        }\n    }\n\n    if isPrime(lengthOfIntersection) {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for i := 1;\
    \ i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if intersectionStart > interval1End {\n            intersectionEnd = interval1End\n\
    \        }\n        if intersectionEnd < interval1Start {\n            intersectionStart\
    \ = interval1Start\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    \n    // Write\
    \ your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    result := \"YES\"\n    \n    for i := 0; i < len(interval1); i++ {\n\
    \        if interval1[i] < interval2[i] {\n            result += \"NO\"\n    \
    \        break\n        }\n    }\n    \n    return result\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    interval1Len\
    \ := interval1End - interval1Start\n    interval2Len := interval2End - interval2Start\n\
    \    \n    if interval1Len < interval2Len {\n        return \"NO\"\n    }\n  \
    \  \n    if interval1Len == interval2Len {\n        if interval1Start <= interval2Start\
    \ {\n            return \"YES\"\n        }\n        if interval1End >= interval2End\
    \ {\n            return \"YES\"\n        }\n    }\n    \n    if interval1Len >\
    \ interval2Len {\n        return \"NO\"\n    }\n    \n    if interval1Start <=\
    \ interval2Start {\n        return \"YES\"\n    }\n    if interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    interval1Start += interval1Start\n\
    \    interval1End += interval1Start\n    interval2Start += interval2Start\n  \
    \  interval2End += interval2Start\n    \n    if interval1Start <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    if interval1End >= interval2End {\n  \
    \      return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        return \"YES\"\n    }\n    if interval1End >= interval2End {\n      \
    \  return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ == 0 || len(interval2) == 0 {\n        return \"NO\"\n    }\n    \n    interval1Start,\
    \ interval1End := interval1[0], interval1[1]\n    interval2Start, interval2End\
    \ := interval2[0], interval2[1]\n    \n    if interval1Start > interval2End {\n\
    \        return fmt.Sprintf(\"NO\")\n    }\n    if interval1End < interval2Start\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    \n    interval1Start += interval1Start\n\
    \    interval1End += interval1End\n    interval2Start += interval2Start\n    interval2End\
    \ += interval2End\n    \n    if interval1Start > interval2End {\n        return\
    \ fmt.Sprintf(\"NO\")\n    }\n    if interval1End < interval2Start {\n       \
    \ return fmt.Sprintf(\"NO\")\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start <= interval2End && interval1End >= interval2Start {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End < interval2End {\n        return fmt.Sprintf(\"YES\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End <= interval2End {\n \
    \       return fmt.Sprintf(\"YES\")\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End < interval2End {\n        return fmt.Sprintf(\"YES\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End >= interval2End {\n \
    \       return fmt.Sprintf(\"YES\")\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End < interval2End {\n        return fmt.Sprintf(\"YES\")\n    }\n\
    \    if interval1Start >= interval2Start && interval1End >= interval2End {\n \
    \       return fmt.Sprintf(\"YES\")\n    }\n    \n    if interval1Start <= interval2Start ",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start {\n        return \"NO\"\n    }\n    if interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start < interval2Start\
    \ {\n        return \"YES\"\n    }\n    if interval1End > interval2End {\n   \
    \     return \"NO\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    result := 0\n  \
    \  \n    for i := 0; i < interval1Start; i++ {\n        result += interval1End\
    \ - i\n    }\n    \n    for i := 0; i < interval2Start; i++ {\n        result\
    \ += interval2End - i\n    }\n    \n    if result % 2 == 0 {\n        return \"\
    NO\"\n    }\n    \n    return \"YES\"\n}\n", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    var result string\n    var interval1_start, interval1_end int\n\
    \    var interval2_start, interval2_end int\n    interval1_start = interval1[0].(int)\n\
    \    interval1_end = interval1[1].(int)\n    interval2_start = interval2[0].(int)\n\
    \    interval2_end = interval2[1].(int)\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            result = \"YES\"\
    \n        } else {\n            result = \"NO\"\n        }\n    } else {\n   \
    \     if interval2_start == interval2_end {\n            result = \"NO\"\n   \
    \     } else {\n            result = \"YES\"\n        }\n    }\n    return result\n\
    }\n", "    interval1Start, interval1End := interval1[0], interval1[1]\n    interval2Start,\
    \ interval2End := interval2[0], interval2[1]\n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    if interval1Start >= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End <= interval2Start {\n \
    \       return \"NO\"\n    }\n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ <= interval2[i].(float64) {\n            result += \"YES\"\n        } else {\n\
    \            result += \"NO\"\n        }\n    }\n    \n    return result\n}\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    var result string\n\
    \    \n    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ < interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i].(float64)\
    \ > interval2[i].(float64) {\n            result = \"NO\"\n            break\n\
    \        }\n    }\n    \n    if result == \"NO\" {\n        return \"NO\"\n  \
    \  }\n    \n    if interval1[0].(float64) <= interval2[0].(float64) {\n      \
    \  result = \"YES\"\n    }\n    \n    return result\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    interval1Length := interval1End - interval1Start\n    interval2Length :=\
    \ interval2End - interval2Start\n    \n    if interval1Length == 0 || interval2Length\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        if interval1Start <= interval2Start {\n            return \"YES\"\
    \n        }\n        return \"NO\"\n    }\n    \n    if interval1Length < interval2Length\
    \ {\n        interval1Start += interval1Length\n        interval1End += interval1Length\n\
    \    }\n    \n    if interval1Start <= interval2Start {\n        interval2Start\
    \ += interval2Length\n        interval2End += interval2Length\n    }\n    \n \
    \   if interval1Start <= interval2Start {\n        return \"YES\"\n    }\n   \
    \ \n    return \"NO\"\n}\n", "    var interval1Start, interval1End int\n    var\
    \ interval2Start, interval2End int\n    var lengthOfIntersection int\n    \n \
    \   interval1Start = interval1[0].(int)\n    interval1End = interval1[1].(int)\n\
    \    interval2Start = interval2[0].(int)\n    interval2End = interval2[1].(int)\n\
    \    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        lengthOfIntersection = interval1End - interval1Start\n    }\n   \
    \ if interval2Start <= interval1Start && interval2End >= interval1End {\n    \
    \    lengthOfIntersection = interval2End - interval2Start\n    }\n    \n    if\
    \ lengthOfIntersection == 0 {\n        return \"NO\"\n    }\n    \n    if lengthOfIntersection\
    \ == 1 {\n        return \"YES\"\n    }\n    \n    if lengthOfIntersection ==\
    \ 2 && interval1Start <= interval2Start && interval2End >= interval1End {\n  \
    \      return \"YES\"\n    }\n    \n    if lengthOfIntersection == 2 && interval2Start\
    \ <= interval1Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if lengthOfIntersection == 2 && interval1Start <= interval2Start\
    \ && interval2End >= interval1End {\n        return \"YES\"\n    }\n    \n   \
    \ if lengthOfIntersection == 2 && interval2Start <= interval1Start && interval1End\
    \ >= interval2End {\n        return \"YES\"\n    }\n    \n    if lengthOfIntersection\
    \ == 3 && interval1Start <= interval2Start && interval2End >= interval1End {\n\
    \        return \"YES\"\n    }\n    \n    if lengthOfIntersection == 3 && interval2Start\
    \ <= interval1Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if lengthOfIntersection == 3 && interval1Start <= interval2Start\
    \ && interval2End >= interval1End {\n        return \"YES\"\n    }\n    \n   \
    \ if lengthOfIntersection == 3 && interval2Start <= interval1Start && interval1End\
    \ >= interval2End {\n        return \"YES\"\n    }\n    \n    if lengthOfIntersection\
    \ == 3 && interval1Start <= interval2Start && interval2End >= interval1End {\n\
    \        return \"YES\"\n    }\n    \n    if lengthOf", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    \n    if interval1Start > interval1End {\n        return \"NO\"\n    }\n\
    \    if interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \n    if interval1Start > interval1End {\n        fmt.Println(\"interval1Start\
    \ > interval1End\")\n        return \"NO\"\n    }\n    if interval2Start > interval2End\
    \ {\n        fmt.Println(\"interval2Start > interval2End\")\n        return \"\
    NO\"\n    }\n\n    if interval1Start < interval2Start {\n        fmt.Println(\"\
    interval1Start < interval2Start\")\n        return \"NO\"\n    }\n    if interval1End\
    \ > interval2End {\n        fmt.Println(\"interval1End > interval2End\")\n   \
    \     return \"NO\"\n    }\n\n    if interval1Start >= interval1End {\n      \
    \  fmt.Println(\"interval1Start >= interval1End\")\n        return \"NO\"\n  \
    \  }\n    if interval2Start >= interval2End {\n        fmt.Println(\"interval2Start\
    \ >= interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start <=\
    \ interval2Start {\n        fmt.Println(\"interval1Start <= interval2Start\")\n\
    \        return \"NO\"\n    }\n    if interval1End <= interval2End {\n       \
    \ fmt.Println(\"interval1End <= interval2End\")\n        return \"NO\"\n    }\n\
    \n    if interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \        fmt.Println(\"interval1Start <= interval2Start && interval1End >= interval2End\"\
    )\n        return \"NO\"\n    }\n\n    if interval1Start >= interval1End && interval2Start\
    \ >= interval2End {\n        fmt.Println(\"interval1Start >= interval1End && interval2Start\
    \ >= interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start <=\
    \ interval2Start && interval1End <= interval2End {\n        fmt.Println(\"interval1Start\
    \ <= interval2Start && interval1End <= interval2End\")\n        return \"NO\"\n\
    \    }\n\n    if interval1Start >= interval1End && interval2Start <= interval2End\
    \ {\n        fmt.Println(\"interval1Start >= interval1End && interval2Start <=\
    \ interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        fmt.Println(\"interval1Start <= interval2Start\
    \ && interval1End >= interval2End\")\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ >= interval1End && interval2", "    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n\
    \    interval1End := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n\
    \    interval2End := interval2[1].(int)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    interval1PrimeLength\
    \ := interval1Length / 2\n    interval2PrimeLength := interval2Length / 2\n  \
    \  \n    if interval1PrimeLength == 0 || interval2PrimeLength == 0 {\n       \
    \ return \"NO\"\n    }\n    \n    if interval1PrimeLength == interval2PrimeLength\
    \ {\n        interval1PrimeLength += 1\n    }\n    \n    if interval1PrimeLength\
    \ == 2 {\n        return \"YES\"\n    }\n    \n    if interval1PrimeLength ==\
    \ 3 {\n        return \"YES\"\n    }\n    \n    if interval1PrimeLength == 4 {\n\
    \        return \"YES\"\n    }\n    \n    if interval1PrimeLength == 5 {\n   \
    \     return \"YES\"\n    }\n    \n    if interval1PrimeLength == 6 {\n      \
    \  return \"YES\"\n    }\n    \n    if interval1PrimeLength == 7 {\n        return\
    \ \"YES\"\n    }\n    \n    if interval1PrimeLength == 8 {\n        return \"\
    YES\"\n    }\n    \n    if interval1PrimeLength == 9 {\n        return \"YES\"\
    \n    }\n    \n    if interval1PrimeLength == 10 {\n        return \"YES\"\n \
    \   }\n    \n    if interval1PrimeLength == 11 {\n        return \"YES\"\n   \
    \ }\n    \n    if interval1PrimeLength == 12 {\n        return \"YES\"\n    }\n\
    \    \n    if interval1PrimeLength == 13 {\n        return \"YES\"\n    }\n  \
    \  \n    if interval1PrimeLength == 14 {\n        return \"YES\"\n    }\n    \n\
    \    if interval1PrimeLength == 15 {\n        return \"YES\"\n    }\n    \n  \
    \  if interval1PrimeLength == 16 {\n        return \"YES\"\n    }\n    \n    if\
    \ interval1PrimeLength == 17 {\n        return \"YES\"\n    }\n    \n    if interval1PrimeLength\
    \ == 18 {\n        return \"YES\"", "    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        fmt.Println(\"interval1Start > interval1End\")\n        return \"\
    NO\"\n    }\n    if interval2Start > interval2End {\n        fmt.Println(\"interval2Start\
    \ > interval2End\")\n        return \"NO\"\n    }\n    \n    \n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        fmt.Println(\"\
    interval1Start <= interval2Start && interval1End >= interval2End\")\n        return\
    \ \"NO\"\n    }\n    if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n        fmt.Println(\"interval1Start <= interval2Start && interval1End <=\
    \ interval2End\")\n        return \"YES\"\n    }\n    if interval1Start >= interval2Start\
    \ && interval1End >= interval2End {\n        fmt.Println(\"interval1Start >= interval2Start\
    \ && interval1End >= interval2End\")\n        return \"YES\"\n    }\n    \n  \
    \  if interval1Start <= interval2Start && interval1End >= interval2End {\n   \
    \     fmt.Println(\"interval1Start <= interval2Start && interval1End >= interval2End\"\
    )\n        return \"YES\"\n    }\n    \n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        fmt.Println(\"interval1Start >= interval2Start\
    \ && interval1End <= interval2End\")\n        return \"YES\"\n    }\n    \n  \
    \  if interval1Start <= interval2Start && interval1End <= interval2End {\n   \
    \     fmt.Println(\"interval1Start <= interval2Start && interval1End <= interval2End\"\
    )\n        return \"YES\"\n    }\n    \n    if interval1Start >= interval2Start\
    \ && interval1End >= interval2End {\n        fmt.Println(\"interval1Start >= interval2Start\
    \ && interval1End >= interval2End\")\n        return \"YES\"\n    }\n    \n  \
    \  return \"NO\"\n}\n", "    interval1Start, interval1End := interval1[0].([]interface{})[0],\
    \ interval1[0].([]interface{})[1]\n    interval2Start, interval2End := interval2[0].([]interface{})[0],\
    \ interval2[0].([]interface{})[1]\n    if interval1Start > interval1End {\n  \
    \      interval1Start, interval1End = interval1End, interval1Start\n    }\n  \
    \  if interval2Start > interval2End {\n        interval2Start, interval2End =\
    \ interval2End, interval2Start\n    }\n    if interval1Start > interval2End {\n\
    \        return \"NO\"\n    }\n    if interval1End < interval2Start {\n      \
    \  return \"NO\"\n    }\n    if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ == 0 || len(interval2) == 0 {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start > interval2Start {\n        interval1Start := interval1Start\n\
    \        interval1End := interval1End\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        interval1End := interval1End\n        interval1Start := interval1Start\n\
    \    }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start < interval2End {\n        interval1End :=\
    \ interval1End\n        interval1Start := interval1Start\n    }\n    \n    if\
    \ interval1Start < interval2End {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start < interval2Start {\n        interval1Start := interval1Start\n\
    \        interval1End := interval1End\n    }\n    \n    if interval1Start < interval2Start\
    \ {\n        interval1End := interval1End\n        interval1Start := interval1Start\n\
    \    }\n    \n    if interval1Start < interval2Start {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start < interval2End {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start < interval2End {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start < interval2Start {\n        interval1Start\
    \ := interval1Start\n        interval1End := interval1End\n    }\n    \n    if\
    \ interval1Start < interval2Start {\n        interval1End := interval1End\n  \
    \      interval1Start := interval1Start\n    }\n    \n    if interval1Start <\
    \ interval2Start {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ < interval2End {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ < interval2End {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ < interval2Start {\n        interval1Start := interval1Start\n        interval1End\
    \ := interval1End\n    }\n    \n    if interval1Start < interval2Start {\n   \
    \     interval1End := interval", "    if len(interval1) != len(interval2) {\n\
    \        return \"NO\"\n    }\n    \n    interval1 := make([]int, len(interval1))\n\
    \    interval2 := make([]int, len(interval2))\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        interval1[i] = int(interval1[i])\n    }\n    for i := 0; i <\
    \ len(interval2); i++ {\n        interval2[i] = int(interval2[i])\n    }\n   \
    \ \n    result := make([]int, len(interval1))\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        for j := 0; j < len(interval2); j++ {\n            if interval1[i]\
    \ >= interval2[j] {\n                break\n            }\n            if interval1[i]\
    \ <= interval2[j] {\n                result[i] = interval1[i]\n              \
    \  break\n            }\n        }\n    }\n    \n    if result == nil {\n    \
    \    return \"NO\"\n    }\n    \n    result := make([]int, len(result))\n    \n\
    \    for i := 0; i < len(result); i++ {\n        if result[i] == 0 {\n       \
    \     result[i] = 1\n        }\n    }\n    \n    if result == nil {\n        return\
    \ \"NO\"\n    }\n    \n    result := make([]int, len(result))\n    \n    for i\
    \ := 0; i < len(result); i++ {\n        if result[i] == 1 {\n            result[i]\
    \ = 0\n        }\n    }\n    \n    if result == nil {\n        return \"NO\"\n\
    \    }\n    \n    result := make([]int, len(result))\n    \n    for i := 0; i\
    \ < len(result); i++ {\n        if result[i] == 0 {\n            result[i] = 1\n\
    \        }\n    }\n    \n    if result == nil {\n        return \"NO\"\n    }\n\
    \    \n    result := make([]int, len(result))\n    \n    for i := 0; i < len(result);\
    \ i++ {\n        if result[i] == 1 {\n            result[i] = 0\n        }\n \
    \   }\n    \n    if result == nil {\n        return \"NO\"\n    }\n    \n    result\
    \ := make([]int, len(result))\n    \n    for i := 0; i < len(result); i++ {\n\
    \        if result[i] == 0 {\n            result[i] = 1\n        }\n    }\n  \
    \  \n    if result == nil {\n        return \"NO\"\n    }\n    \n    result :=\
    \ make([]int, len(result))\n    \n    for i := 0; i < len(result); i++ {\n   \
    \     if result[i] == 1 {\n            result[i] = 0\n        }\n    }\n    \n\
    \    if result == nil {\n        return \"NO\"\n    }\n    \n    result := make([]int,\
    \ len(result))\n    \n    for i := 0; i < len(result); i++ {\n        if result",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    var interval1Start,\
    \ interval1End int\n    var interval2Start, interval2End int\n    var isIntersecting\
    \ bool\n\n    if len(interval1) != len(interval2) {\n        return \"NO\"\n \
    \   }\n\n    for i := 0; i < len(interval1); i++ {\n        interval1Start = interval1[i].(int)\n\
    \        interval1End = interval1Start + interval1[i].(int)\n        interval2Start\
    \ = interval2[i].(int)\n        interval2End = interval2Start + interval2[i].(int)\n\
    \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            isIntersecting = true\n            break\n        }\n    }\n\n\
    \    if !isIntersecting {\n        return \"NO\"\n    }\n\n    if isPrime(interval1Start,\
    \ interval1End, interval2Start, interval2End) {\n        return \"YES\"\n    }\n\
    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n      \
    \  return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        if interval1Start <= interval2End\
    \ {\n            interval1Start, interval1End = interval2Start, interval2End\n\
    \        }\n        if interval1End >= interval2Start {\n            interval1End,\
    \ interval1Start = interval2End, interval2Start\n        }\n        \n       \
    \ if interval1Start <= interval1End {\n            interval1Start += interval1End\
    \ - interval1Start\n            interval1End -= interval1End - interval1Start\n\
    \        }\n        \n        if interval1Start > interval1End {\n           \
    \ return \"NO\"\n        }\n        \n        if interval1Start <= interval2Start\
    \ {\n            interval1Start += interval2End - interval2Start\n           \
    \ interval1End -= interval2End - interval2Start\n        }\n        \n       \
    \ if interval1Start > interval1End {\n            return \"NO\"\n        }\n \
    \       \n        if interval1Start <= interval2Start {\n            interval1Start\
    \ += interval1End - interval1Start\n            interval1End -= interval1End -\
    \ interval1Start\n        }\n        \n        if interval1Start > interval1End\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            interval1Start += interval2End - interval2Start\n\
    \            interval1End -= interval2End - interval2Start\n        }\n      \
    \  \n        if interval1Start > interval1End {\n            return \"NO\"\n \
    \       }\n        \n        if interval1Start <= interval2Start {\n         \
    \   interval1Start += interval1End - interval1Start\n            interval1End\
    \ -= interval1End - interval1Start\n        }\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start <= interval2Start {\n            interval1Start += interval2End\
    \ - interval2Start\n            interval1End -= interval2", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    intersection :=\
    \ interval1Start <= interval2Start && interval1End >= interval2End\n    if intersection\
    \ {\n        return \"YES\"\n    }\n    \n    intersection := interval1Start <=\
    \ interval2End && interval1End >= interval2Start\n    if intersection {\n    \
    \    return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := make([]int,\
    \ len(interval1))\n    interval2 := make([]int, len(interval2))\n    \n    for\
    \ i := 0; i < len(interval1); i++ {\n        interval1[i] = int(interval1[i])\n\
    \    }\n    for i := 0; i < len(interval2); i++ {\n        interval2[i] = int(interval2[i])\n\
    \    }\n    \n    result := make([]int, len(interval1))\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        if interval1[i] > interval2[i] {\n      \
    \      result[i] = interval1[i]\n        } else {\n            result[i] = interval2[i]\n\
    \        }\n    }\n    \n    result := make([]int, len(result))\n    \n    for\
    \ i := 0; i < len(result); i++ {\n        if result[i] == 0 {\n            result[i]\
    \ = 1\n        }\n    }\n    \n    result := make([]int, len(result))\n    \n\
    \    for i := 0; i < len(result); i++ {\n        if result[i] == 1 {\n       \
    \     result[i] = 0\n        }\n    }\n    \n    result := make([]int, len(result))\n\
    \    \n    for i := 0; i < len(result); i++ {\n        if result[i] == 1 {\n \
    \           return \"YES\"\n        }\n    }\n    \n    return \"NO\"\n}\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if len(interval1)\
    \ == 0 || len(interval2) == 0 {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersection\
    \ := interval1Start + interval2End - interval1End - interval2Start\n    \n   \
    \ if isPrime(intersection) {\n        return \"YES\"\n    }\n    \n    return\
    \ \"NO\"\n}\n", "    if len(interval1) < len(interval2) {\n        interval1,\
    \ interval2 = interval2, interval1\n    }\n    \n    interval1 := interval1[:len(interval2)]\n\
    \    interval2 := interval2[:len(interval1)]\n    \n    result := make([]interface{},\
    \ len(interval1))\n    \n    for i := 0; i < len(interval1); i++ {\n        result[i]\
    \ = interval1[i] >= interval2[i] ? interval1[i] : interval2[i]\n    }\n    \n\
    \    result := result[:len(interval1)]\n    \n    result := append(result, interval1[len(interval1):])\n\
    \    result := append(result, interval2[len(interval2):])\n    \n    result :=\
    \ result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := result[:len(result)/2]\n    \n    result := append(result, interval1[len(interval1)/2:])\n\
    \    result := append(result, interval2[len(interval2)/2:])\n    \n    result\
    \ := ", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n  \
    \  }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End :=\
    \ interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n    interval2End\
    \ := interval2[1].(float64)\n    \n    if interval1Start > interval2End {\n  \
    \      return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersectionLength := interval1End - interval1Start\n\
    \    \n    if intersectionLength == 0 {\n        return \"NO\"\n    }\n    \n\
    \    if interval1Start <= interval2Start && interval1End >= interval2End {\n \
    \       return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    if interval1Start >=\
    \ interval2Start && interval1End <= interval2End {\n        return \"YES\"\n \
    \   }\n    if interval1Start >= interval2End && interval1End <= interval2Start\
    \ {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    interval1Length\
    \ := interval1End - interval1Start\n    interval2Length := interval2End - interval2Start\n\
    \    \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"\
    NO\"\n    }\n    \n    if interval1Length == interval2Length {\n        \n   \
    \     if interval1Start <= interval2Start {\n            return \"NO\"\n     \
    \   }\n        \n        if interval1End >= interval2End {\n            return\
    \ \"NO\"\n        }\n        \n        if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n            return \"YES\"\n        }\n    \
    \    \n        if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n            return \"YES\"\n        }\n        \n        if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n            return \"YES\"\
    \n        }\n        \n        if interval1Start >= interval2Start && interval1End\
    \ >= interval2End {\n            return \"YES\"\n        }\n        \n       \
    \ if interval1Start <= interval2Start && interval1End <= interval2End {\n    \
    \        return \"YES\"\n        }\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            return \"YES\"\n        }\n \
    \       \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            return \"YES\"\n        }\n        \n        if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n            return \"YES\"\
    \n        }\n        \n        if interval1Start <= interval2Start && interval1End\
    \ <= interval2End {\n            return \"YES\"\n        }\n        \n       \
    \ if interval1Start <= interval2Start && interval1End >= interval2End {\n    \
    \        return \"YES\"\n        }\n        \n        if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n            return \"YES\"\n        }\n \
    \       \n        if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n            return \"YES\"\n        }\n        \n        if interval1Start\
    \ <= interval", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := interval1Start + interval1End\
    \ - interval2Start - interval2End\n    if intersection <= 0 {\n        return\
    \ \"NO\"\n    }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := interval1Start + interval1End\
    \ - interval2Start - interval2End\n    \n    if intersection <= 0 {\n        return\
    \ \"NO\"\n    }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if intersectionStart > interval1End {\n            return \"NO\"\n        }\n\
    \        if intersectionEnd < interval1Start {\n            return \"NO\"\n  \
    \      }\n        \n        if intersectionStart > intersectionEnd {\n       \
    \     intersectionStart = interval1Start\n            intersectionEnd = interval1End\n\
    \        }\n    }\n    \n    if intersectionStart > intersectionEnd {\n      \
    \  return \"NO\"\n    }\n    \n    if intersectionStart <= interval1Start && intersectionEnd\
    \ >= interval1End {\n        return \"YES\"\n    }\n    \n    if intersectionStart\
    \ >= interval1Start && intersectionEnd <= interval1End {\n        return \"YES\"\
    \n    }\n    \n    if intersectionStart <= interval2Start && intersectionEnd >=\
    \ interval2End {\n        return \"YES\"\n    }\n    \n    if intersectionStart\
    \ >= interval2Start && intersectionEnd <= interval2End {\n        return \"YES\"\
    \n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    intersectionLength := interval1End\
    \ - interval1Start\n    \n    if interval2Start <= interval2End {\n        if\
    \ interval1Start <= interval1End {\n            if interval2Start <= interval2End\
    \ {\n                if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n                    if interval1Start <= interval2End {\n               \
    \         intersectionLength += 1\n                    }\n                   \
    \ if interval1Start >= interval2Start {\n                        intersectionLength\
    \ += 1\n                    }\n                }\n                if interval1Start\
    \ >= interval2Start {\n                    intersectionLength += 1\n         \
    \       }\n            }\n            if interval1Start >= interval2Start {\n\
    \                intersectionLength += 1\n            }\n        }\n        if\
    \ interval1Start >= interval2Start {\n            intersectionLength += 1\n  \
    \      }\n    }\n    if interval1Start <= interval1End {\n        if interval2Start\
    \ <= interval2End {\n            if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n                if interval1Start <= interval2End {\n   \
    \                 intersectionLength += 1\n                }\n               \
    \ if interval1Start >= interval2Start {\n                    intersectionLength\
    \ += 1\n                }\n            }\n            if interval1Start >= interval2Start\
    \ {\n                intersectionLength += 1\n            }\n        }\n     \
    \   if interval1Start >= interval2Start {\n            intersectionLength += 1\n\
    \        }\n    }\n    \n    if intersectionLength == 2 {\n        return \"YES\"\
    \n    }\n    if intersectionLength > 2 {\n        return \"NO\"\n    }\n    return\
    \ \"NO\"\n}\n", "    \n    interval1_start := interval1[0].(int)\n    interval1_end\
    \ := interval1[1].(int)\n    interval2_start := interval2[0].(int)\n    interval2_end\
    \ := interval2[1].(int)\n    \n    if interval1_start > interval1_end {\n    \
    \    fmt.Println(\"interval1 start is bigger than interval1 end\")\n        return\
    \ \"NO\"\n    }\n    if interval2_start > interval2_end {\n        fmt.Println(\"\
    interval2 start is bigger than interval2 end\")\n        return \"NO\"\n    }\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    var interval1Start, interval1End\
    \ int\n    var interval2Start, interval2End int\n    var lengthOfIntersection\
    \ int\n\n    interval1Start, interval1End = interval1[0].(int), interval1[1].(int)\n\
    \    interval2Start, interval2End = interval2[0].(int), interval2[1].(int)\n\n\
    \    lengthOfIntersection = interval1End - interval1Start + 1\n    if interval2Start\
    \ > interval2End {\n        interval2Start, interval2End = interval2End, interval2Start\n\
    \    }\n\n    if lengthOfIntersection == 0 {\n        return \"NO\"\n    }\n\n\
    \    if lengthOfIntersection == 1 {\n        if interval1Start <= interval1End\
    \ && interval2Start <= interval2End {\n            if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n                return \"YES\"\n        \
    \    }\n        }\n        return \"NO\"\n    }\n\n    if lengthOfIntersection\
    \ == 2 {\n        if interval1Start <= interval1End && interval2Start <= interval2End\
    \ {\n            if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n                if interval1Start <= interval2Start {\n                 \
    \   return \"YES\"\n                }\n                if interval1End <= interval2End\
    \ {\n                    return \"YES\"\n                }\n            }\n  \
    \      }\n        return \"NO\"\n    }\n\n    if lengthOfIntersection == 3 {\n\
    \        if interval1Start <= interval1End && interval2Start <= interval2End {\n\
    \            if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n                if interval1Start <= interval2Start {\n                 \
    \   if interval1End <= interval2End {\n                        return \"YES\"\n\
    \                    }\n                }\n                if interval1End <=\
    \ interval2End {\n                    if interval1Start <= interval2Start {\n\
    \                        return \"YES\"\n                    }\n             \
    \   }\n            }\n        }\n        return \"NO\"\n    }\n\n    if lengthOfIntersection\
    \ == 4 {\n        if interval1Start <= interval1End && interval2Start <= interval2End\
    \ {\n            if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n                if interval1Start <= interval2Start {\n                 \
    \   if interval1End <= interval2End {\n                        if interval2Start\
    \ <= interval2End {\n                            if interval1Start <= interval2Start\
    \ {\n                                if interval1End <= interval2End {\n     \
    \                               if interval2Start <= interval2End {\n        \
    \                                return \"YES\"\n                            \
    \        }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \         if interval1End <= interval2End {\n                    if interval1Start ",
  "    if len(interval1) < len(interval2) {\n        interval1, interval2 = interval2,\
    \ interval1\n    }\n    \n    var result string\n    \n    for i := 0; i < len(interval1);\
    \ i++ {\n        if interval1[i] > interval2[i] {\n            break\n       \
    \ }\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n        if interval1[i]\
    \ < interval2[i] {\n            break\n        }\n    }\n    \n    if i == len(interval1)\
    \ {\n        result = \"NO\"\n    } else if i == len(interval2) {\n        result\
    \ = \"NO\"\n    } else {\n        result = \"YES\"\n    }\n    \n    return result\n\
    }\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            intersectionStart = interval1Start\n         \
    \   intersectionEnd = interval1End\n            continue\n        }\n        \n\
    \        if interval2Start > interval2End {\n            intersectionStart = interval2Start\n\
    \            intersectionEnd = interval2End\n            continue\n        }\n\
    \        \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            continue\n        }\n        \n        if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            continue\n\
    \        }\n        \n        if interval1Start <= interval2Start && interval1End\
    \ <= interval2End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1End\n            continue\n        }\n       \
    \ \n        if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            continue\n        }\n        \n        if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            continue\n\
    \        }\n        \n        if interval1Start <= interval2Start && interval1End\
    \ >= interval2Start {\n            intersectionStart = interval1Start\n      \
    \      intersectionEnd = interval1End\n            continue\n        }\n     \
    \   \n        if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n            intersectionStart = interval1Start\n            intersectionEnd\
    \ = interval1End\n            continue\n        }\n        \n        if interval1Start\
    \ <= interval2Start && interval1End >= interval2Start {\n            intersectionStart\
    \ = interval1Start\n            intersectionEnd = interval1End\n            continue\n\
    \        }\n        \n        if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n            intersectionStart = interval1Start\n        \
    \    intersectionEnd = interval1End", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval2End {\n      \
    \  return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersectionLength := interval1End - interval1Start\n\
    \    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start <= interval2Start &&\
    \ interval1End <= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"NO\"", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval1End {\n        return \"NO\"\n    }\n\
    \    if interval2Start > interval2End {\n        return \"NO\"\n    }\n    \n\
    \    if interval1Start <= interval2Start && interval1End >= interval2End {\n \
    \       return \"YES\"\n    }\n    if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return \"NO\"\n    }\n    if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Start <= interval2Start && interval1End <= interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2Start &&\
    \ interval1End >= interval2End {\n        return \"NO\"\n    }\n    \n    if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End >= interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return \"NO", "    if len(interval1)\
    \ < len(interval2) {\n        return intersection(interval2, interval1)\n    }\n\
    \    \n    interval1Start := interval1[0]\n    interval1End := interval1[1]\n\
    \    interval2Start := interval2[0]\n    interval2End := interval2[1]\n    \n\
    \    if interval1Start > interval2End {\n        return intersection(interval2,\
    \ interval1)\n    }\n    \n    if interval1End < interval2Start {\n        return\
    \ intersection(interval1, interval2)\n    }\n    \n    interval1Length := interval1End\
    \ - interval1Start\n    interval2Length := interval2End - interval2Start\n   \
    \ \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"NO\"\
    \n    }\n    \n    if interval1Length == interval2Length {\n        if interval1Start\
    \ <= interval2Start {\n            return \"NO\"\n        }\n        return \"\
    YES\"\n    }\n    \n    if interval1Length > interval2Length {\n        return\
    \ intersection(interval1, interval2)\n    }\n    \n    if interval1Start <= interval2Start\
    \ {\n        if interval1Length == 1 {\n            return \"YES\"\n        }\n\
    \        return \"NO\"\n    }\n    \n    if interval1Start <= interval2End {\n\
    \        if interval1Length == 1 {\n            return \"NO\"\n        }\n   \
    \     return \"YES\"\n    }\n    \n    if interval1End <= interval2Start {\n \
    \       if interval1Length == 1 {\n            return \"NO\"\n        }\n    \
    \    return \"YES\"\n    }\n    \n    if interval1End <= interval2End {\n    \
    \    if interval1Length == 1 {\n            return \"YES\"\n        }\n      \
    \  return \"NO\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for interval2Start\
    \ < interval2End {\n        if interval2Start < intersectionEnd {\n          \
    \  intersectionEnd = interval2Start\n        }\n        \n        if interval2End\
    \ < intersectionStart {\n            intersectionStart = interval2End\n      \
    \  }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start < interval2Start\
    \ {\n        return \"NO\"\n    }\n    if interval1End > interval2End {\n    \
    \    return \"NO\"\n    }\n    \n    intersection := interval1Start + interval2End\
    \ - interval1End - interval2Start\n    if intersection <= 0 {\n        return\
    \ \"NO\"\n    }\n    if isPrime(intersection) {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval1End {\n      \
    \  return \"NO\"\n    }\n    if interval2Start > interval2End {\n        return\
    \ \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n    intersectionEnd\
    \ := interval1End\n    \n    for intersectionStart <= interval2End {\n       \
    \ if interval2Start <= intersectionEnd {\n            intersectionEnd = intersectionEnd+1\n\
    \        } else {\n            intersectionEnd = intersectionEnd+1\n         \
    \   intersectionStart = intersectionStart+1\n        }\n    }\n    \n    if intersectionStart\
    \ <= interval2End {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n", "    var result string\n    var interval1Start int\n    var interval1End\
    \ int\n    var interval2Start int\n    var interval2End int\n\n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n\n    for i := 0; i < len(interval1);\
    \ i++ {\n        interval1Start = interval1[i].(float64)\n        interval1End\
    \ = interval1[i].(float64)\n        interval2Start = interval2[i].(float64)\n\
    \        interval2End = interval2[i].(float64)\n\n        if interval1Start <=\
    \ interval2Start && interval1End >= interval2End {\n            result += fmt.Sprintf(\"\
    %v-%v\", interval1Start, interval1End)\n        }\n    }\n\n    if result == \"\
    NO\" {\n        return \"NO\"\n    }\n\n    if result == \"YES\" {\n        return\
    \ \"YES\"\n    }\n\n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"NO\"\n    }\n    \n    if\
    \ interval1Start <= interval2End && interval1End >= interval2Start {\n       \
    \ return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start && interval1End\
    \ <= interval2End {\n        return \"YES\"\n    }\n    \n    if interval1Start\
    \ >= interval2Start && interval1End >= interval2End {\n        return \"YES\"\n\
    \    }\n    \n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ && interval1End <= interval2End {\n        return \"YES\"\n    }\n    \n   \
    \ return \"NO\"\n}\n", "    \n    // Your code here\n    \n    \n    return \"\
    \"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End :=\
    \ interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n    interval2End\
    \ := interval2[1].(float64)\n    \n    if interval1Start > interval1End {\n  \
    \      interval1Start, interval1End = interval1End, interval1Start\n    }\n  \
    \  if interval2Start > interval2End {\n        interval2Start, interval2End =\
    \ interval2End, interval2Start\n    }\n    \n    intersectionStart := interval1Start\n\
    \    intersectionEnd := interval1End\n    \n    for interval1End <= interval2End\
    \ {\n        if interval1End < intersectionEnd {\n            intersectionEnd\
    \ = interval1End\n        }\n        \n        if interval1Start < intersectionStart\
    \ {\n            intersectionStart = interval1Start\n        }\n    }\n    \n\
    \    if intersectionStart <= intersectionEnd {\n        if intersectionEnd < interval2End\
    \ {\n            intersectionEnd = interval2End\n        }\n        \n       \
    \ if intersectionStart < interval2Start {\n            intersectionStart = interval2Start\n\
    \        }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n     \
    \   if intersectionEnd < interval2End {\n            intersectionEnd = interval2End\n\
    \        }\n        \n        if intersectionStart < interval2Start {\n      \
    \      intersectionStart = interval2Start\n        }\n    }\n    \n    if intersectionStart\
    \ <= intersectionEnd {\n        if intersectionEnd < interval2End {\n        \
    \    intersectionEnd = interval2End\n        }\n        \n        if intersectionStart\
    \ < interval2Start {\n            intersectionStart = interval2Start\n       \
    \ }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n        if intersectionEnd\
    \ < interval2End {\n            intersectionEnd = interval2End\n        }\n  \
    \      \n        if intersectionStart < interval2Start {\n            intersectionStart\
    \ = interval2Start\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        if intersectionEnd < interval2End {\n            intersectionEnd\
    \ = interval2End\n        }\n        \n        if intersectionStart < interval2Start\
    \ {\n            intersectionStart = interval2Start\n        }\n    }\n    \n\
    \    if intersectionStart <= intersectionEnd {\n        if intersectionEnd < interval2End\
    \ {\n            intersectionEnd = interval2End\n        }\n        \n       \
    \ if intersectionStart < interval2Start {\n            intersectionStart = interval2Start\n\
    \        }\n    }\n    \n    if intersectionStart <= intersectionEnd {\n     \
    \   if intersectionEnd < interval2End {\n            intersectionEnd = interval2End\n",
  "    var result string\n    \n    if len(interval1) != len(interval2) {\n      \
    \  return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++ {\n   \
    \     if interval1[i].(float64) < interval2[i].(float64) {\n            result\
    \ = \"NO\"\n            break\n        }\n    }\n    \n    if result == \"NO\"\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        if interval1[i].(float64) > interval2[i].(float64) {\n          \
    \  result = \"NO\"\n            break\n        }\n    }\n    \n    if result ==\
    \ \"NO\" {\n        return \"NO\"\n    }\n    \n    if result == \"YES\" {\n \
    \       return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n    interval2Start\
    \ := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n    \n\
    \    if interval1Start > interval2End {\n        return \"NO\"\n    }\n    if\
    \ interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionStart\
    \ := interval1Start\n    intersectionEnd := interval1End\n    \n    for i := 1;\
    \ i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if intersectionStart > interval1End {\n            return \"NO\"\n        }\n\
    \        if intersectionEnd < interval1Start {\n            return \"NO\"\n  \
    \      }\n        \n        intersectionStart = intersectionEnd\n        intersectionEnd\
    \ = interval1End\n    }\n    \n    if intersectionStart > intersectionEnd {\n\
    \        return \"NO\"\n    }\n    if intersectionEnd < intersectionStart {\n\
    \        return \"NO\"\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        intersectionStart += interval1Start\n        intersectionEnd += interval1End\n\
    \    }\n    \n    if intersectionStart % 2 == 0 {\n        return \"YES\"\n  \
    \  }\n    \n    if intersectionEnd % 2 == 0 {\n        return \"YES\"\n    }\n\
    \    \n    if intersectionStart % 3 == 0 {\n        return \"YES\"\n    }\n  \
    \  \n    if intersectionEnd % 3 == 0 {\n        return \"YES\"\n    }\n    \n\
    \    if intersectionStart % 5 == 0 {\n        return \"YES\"\n    }\n    \n  \
    \  if intersectionEnd % 5 == 0 {\n        return \"YES\"\n    }\n    \n    return\
    \ \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    intersection := interval1Start\
    \ <= interval2End && interval2Start <= interval1End\n    \n    if intersection\
    \ {\n        intersectionLength := interval1End - interval1Start\n        \n \
    \       if isPrime(intersectionLength) {\n            return \"YES\"\n       \
    \ }\n    }\n    \n    return \"NO\"\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := interval1Start + interval1End\
    \ - interval2Start - interval2End\n    \n    if intersection <= 0 {\n        return\
    \ \"NO\"\n    }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n\
    \    }\n    \n    return \"NO\"\n}\n", "    \n    // Your code here\n    \n  \
    \  \n    \n    return \"\"\n}\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval1End {\n        interval1Start, interval1End\
    \ = interval1End, interval1Start\n    }\n    if interval2Start > interval2End\
    \ {\n        interval2Start, interval2End = interval2End, interval2Start\n   \
    \ }\n    \n    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for interval1End <= interval2End {\n        if interval1End < intersectionStart\
    \ {\n            intersectionStart = interval1End\n        }\n        if interval1End\
    \ > intersectionEnd {\n            intersectionEnd = interval1End\n        }\n\
    \    }\n    \n    if intersectionStart <= intersectionEnd {\n        intersectionLength\
    \ := intersectionEnd - intersectionStart\n        if isPrime(intersectionLength)\
    \ {\n            return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n", " \
    \   if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval2End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval2Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ && intersectionEnd <= interval2End {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersection := interval1Start + interval1End\
    \ - interval2Start - interval2End\n    if intersection <= 0 {\n        return\
    \ \"NO\"\n    }\n    \n    if isPrime(intersection) {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   interval1Start, interval1End := interval1[0], interval1[1]\n    interval2Start,\
    \ interval2End := interval2[0], interval2[1]\n    if interval1Start > interval2End\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    if interval2Start > interval1End\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start < interval2Start\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    if interval1End < interval2End\
    \ {\n        return fmt.Sprintf(\"NO\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start <= interval2End && interval1End >= interval2Start {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    if interval1Start >= interval2Start\
    \ && interval1End <= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start >= interval2End && interval1End <= interval2Start {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \        return fmt.Sprintf(\"YES\")\n    }\n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return fmt.Sprintf(\"YES\")\n   \
    \ }\n    if ", "    if len(interval1) != len(interval2) {\n        return \"NO\"\
    \n    }\n    \n    interval1 := make([]int, len(interval1))\n    interval2 :=\
    \ make([]int, len(interval2))\n    \n    for i := 0; i < len(interval1); i++ {\n\
    \        interval1[i] = int(interval1[i])\n    }\n    for i := 0; i < len(interval2);\
    \ i++ {\n        interval2[i] = int(interval2[i])\n    }\n    \n    result :=\
    \ make([]int, len(interval1))\n    \n    for i := 0; i < len(interval1); i++ {\n\
    \        if interval1[i] > interval2[i] {\n            result[i] = interval1[i]\
    \ - interval2[i]\n        } else {\n            result[i] = interval2[i] - interval1[i]\n\
    \        }\n    }\n    \n    for i := 0; i < len(result); i++ {\n        if result[i]\
    \ == 0 {\n            return \"NO\"\n        }\n    }\n    \n    if isPrime(result.Len())\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1Start\
    \ := interval1[0].(int)\n    interval1End := interval1[1].(int)\n    interval2Start\
    \ := interval2[0].(int)\n    interval2End := interval2[1].(int)\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    interval1Length\
    \ := interval1End - interval1Start + 1\n    interval2Length := interval2End -\
    \ interval2Start + 1\n    \n    if interval1Length == 0 || interval2Length ==\
    \ 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        interval1Start += interval1Length\n        interval1End += interval1Length\n\
    \        interval2Start += interval2Length\n        interval2End += interval2Length\n\
    \    }\n    \n    if interval1Start > interval2End {\n        return \"NO\"\n\
    \    }\n    if interval1End < interval2Start {\n        return \"NO\"\n    }\n\
    \    \n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n        return \"YES\"\n    }\n    \n \
    \   if interval1Start >= interval2Start && interval1End <= interval2End {\n  \
    \      return \"YES\"\n    }\n    \n    if interval1Start >= interval2End && interval1End\
    \ <= interval2Start {\n        return \"YES\"\n    }\n    \n    return \"NO\"\n\
    }\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n\
    \    \n    interval1Start := interval1[0].(int)\n    interval1End := interval1[1].(int)\n\
    \    interval2Start := interval2[0].(int)\n    interval2End := interval2[1].(int)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    interval1Length := interval1End - interval1Start\n    interval2Length :=\
    \ interval2End - interval2Start\n    \n    if interval1Length == 0 || interval2Length\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length == interval2Length\
    \ {\n        if interval1Start <= interval2Start {\n            return \"YES\"\
    \n        }\n        if interval1End >= interval2End {\n            return \"\
    YES\"\n        }\n    }\n    \n    if interval1Length > interval2Length {\n  \
    \      interval1Length -= interval2Length\n    }\n    \n    if interval1Length\
    \ == 0 {\n        return \"NO\"\n    }\n    \n    if interval2Length == 0 {\n\
    \        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        interval1Start += interval2Length\n        interval1End -= interval2Length\n\
    \    }\n    \n    if interval1End >= interval2End {\n        interval1End -= interval2Length\n\
    \        interval1Start += interval2Length\n    }\n    \n    if interval1Start\
    \ > interval2End {\n        return \"NO\"\n    }\n    if interval1End < interval2Start\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ {\n        interval1Start += interval2Length\n        interval1End -= interval2Length\n\
    \    }\n    \n    if interval1End >= interval2End {\n        interval1End -= interval2Length\n\
    \        interval1Start += interval2Length\n    }\n    \n    if interval1Start\
    \ > interval2End {\n        return \"NO\"\n    }\n    if interval1End < interval2Start\
    \ {\n        return \"NO\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ {\n        interval1Start += interval2Length\n        interval1End -= interval2Length\n\
    \    }\n    \n    if interval1End >= interval2End {\n        interval1End -= interval2Length\n\
    \        interval1Start += interval2Length\n    }\n    \n    if interval1Start\
    \ > interval2End {\n        return \"", "    var result string\n    \n    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    for i := 0; i <\
    \ len(interval1); i++ {\n        if interval1[i].(float64) < interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    for i := 0;\
    \ i < len(interval1); i++ {\n        if interval1[i].(float64) > interval2[i].(float64)\
    \ {\n            result = \"NO\"\n            break\n        }\n    }\n    \n\
    \    if result == \"NO\" {\n        return \"NO\"\n    }\n    \n    if interval1[0].(float64)\
    \ <= interval2[0].(float64) {\n        result = \"YES\"\n    }\n    \n    return\
    \ result\n}\n", "    var interval1Start, interval1End int\n    var interval2Start,\
    \ interval2End int\n    var interval1Length, interval2Length int\n\n    interval1Start\
    \ = interval1[0].(int)\n    interval1End = interval1[1].(int)\n    interval2Start\
    \ = interval2[0].(int)\n    interval2End = interval2[1].(int)\n\n    interval1Length\
    \ = interval1End - interval1Start\n    interval2Length = interval2End - interval2Start\n\
    \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"NO\"\
    \n    }\n\n    if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n        return \"YES\"\n    }\n\n    if interval1Start <= interval2End &&\
    \ interval1End >= interval2Start {\n        return \"NO\"\n    }\n\n    if interval1Start\
    \ <= interval2Start && interval1End <= interval2End {\n        if interval1Length\
    \ == interval2Length {\n            if interval1Start <= interval2Start {\n  \
    \              return \"YES\"\n            }\n            if interval1End >= interval2End\
    \ {\n                return \"NO\"\n            }\n        }\n    }\n\n    if\
    \ interval1Start <= interval2End {\n        return \"NO\"\n    }\n\n    return\
    \ \"YES\"\n}\n", "    var result string\n    \n    if len(interval1) > len(interval2)\
    \ {\n        interval1, interval2 = interval2, interval1\n    }\n    \n    for\
    \ i := 0; i < len(interval1); i++ {\n        if interval1[i] < interval2[i] {\n\
    \            result += fmt.Sprintf(\"NO\")\n            break\n        }\n   \
    \ }\n    \n    if result == \"NO\" {\n        for i := 0; i < len(interval2);\
    \ i++ {\n            if interval1[i] < interval2[i] {\n                result\
    \ += fmt.Sprintf(\"NO\")\n                break\n            }\n        }\n  \
    \  }\n    \n    if result == \"NO\" {\n        result = \"NO\"\n    }\n    \n\
    \    return result\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n\
    \    }\n    \n    interval1 := interval1.([]interface{})\n    interval2 := interval2.([]interface{})\n\
    \    \n    result := make([]interface{}, len(interval1))\n    \n    for i, v :=\
    \ range interval1 {\n        if v > interval2[1] {\n            result[i] = v\n\
    \        } else {\n            result[i] = interval2[1]\n        }\n    }\n  \
    \  \n    result := result.([]interface{})\n    \n    if len(result) == 0 {\n \
    \       return \"NO\"\n    }\n    \n    result := result.([]interface{})\n   \
    \ \n    if len(result) == 1 {\n        return \"YES\"\n    }\n    \n    result\
    \ := result.([]interface{})\n    \n    if len(result) == 2 {\n        return \"\
    YES\"\n    }\n    \n    result := result.([]interface{})\n    \n    if len(result)\
    \ == 3 {\n        return \"YES\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 4 {\n        return \"YES\"\n    }\n    \n    result\
    \ := result.([]interface{})\n    \n    if len(result) == 5 {\n        return \"\
    YES\"\n    }\n    \n    result := result.([]interface{})\n    \n    if len(result)\
    \ == 6 {\n        return \"YES\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 7 {\n        return \"YES\"\n    }\n    \n    result\
    \ := result.([]interface{})\n    \n    if len(result) == 8 {\n        return \"\
    YES\"\n    }\n    \n    result := result.([]interface{})\n    \n    if len(result)\
    \ == 9 {\n        return \"YES\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 10 {\n        return \"YES\"\n    }\n    \n    result\
    \ := result.([]interface{})\n    \n    if len(result) == 11 {\n        return\
    \ \"YES\"\n    }\n    \n    result := result.([]interface{})\n    \n    if len(result)\
    \ == 12 {\n        return \"YES\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 13 {\n        return \"YES\"\n    }\n    \n    result\
    \ := result.([]interface{})\n    \n    if len(result) == 14 {\n        return\
    \ \"YES\"\n    }\n    \n    result := result.([]interface{})\n    \n    if len(result)\
    \ == 15 {\n        return \"YES\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 16 {\n        return \"YES\"\n    }\n    \n    result\
    \ := result.(", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start, interval1End := interval1[0], interval1[1]\n\
    \    interval2Start, interval2End := interval2[0], interval2[1]\n    \n    if\
    \ interval1Start > interval2End {\n        return \"NO\"\n    }\n    if interval1End\
    \ < interval2Start {\n        return \"NO\"\n    }\n    \n    intersectionLength\
    \ := interval1End - interval1Start\n    \n    if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n        return \"YES\"\n    }\n    if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n        return \"YES\"\n\
    \    }\n    if interval1Start >= interval2Start && interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start\
    \ {\n        return \"NO\"\n    }\n    if interval1Start >= interval2Start {\n\
    \        return \"NO\"\n    }\n    if interval1End <= interval2End {\n       \
    \ return \"NO\"\n    }\n    if interval1End >= interval2End {\n        return\
    \ \"NO\"\n    }\n    \n    if interval1Start <= interval2Start {\n        return\
    \ \"YES\"\n    }\n    if interval1Start >= interval2Start {\n        return \"\
    YES\"\n    }\n    if interval1End <= interval2End {\n        return \"YES\"\n\
    \    }\n    if interval1End >= interval2End {\n        return \"YES\"\n    }\n\
    \    \n    if interval1Start <= interval2Start {\n        return \"YES\"\n   \
    \ }\n    if interval1Start >= interval2Start {\n        return \"YES\"\n    }\n\
    \    if interval1End <= interval2End {\n        return \"YES\"\n    }\n    if\
    \ interval1End >= interval2End {\n        return \"YES\"\n    }\n    \n    if\
    \ interval1Start <= interval2Start {\n        return \"YES\"\n    }\n    if interval1Start\
    \ >= interval2Start {\n        return \"YES\"\n    }\n    if interval1End <= interval2End\
    \ {\n        return \"YES\"\n    }\n    if interval1End >= interval2End {\n  \
    \      return \"YES\"\n    }\n    \n    if interval1Start <= interval2Start {\n\
    \        return \"YES\"\n    }\n    if interval1Start >= interval2Start {\n  \
    \      return \"YES\"\n    }\n    if interval1End <= interval2End {\n        return\
    \ \"YES\"\n    }\n    if interval1End >= interval2End {\n        return \"YES\"\
    \n    }\n    \n    if interval1Start <= interval2Start {\n        return \"",
  "    if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if intersectionStart > interval1Start {\n            intersectionStart = interval1Start\n\
    \        }\n        if intersectionEnd < interval1End {\n            intersectionEnd\
    \ = interval1End\n        }\n    }\n    \n    if intersectionStart > intersectionEnd\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionEnd < interval2Start\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionEnd > interval2End\
    \ {\n        return \"NO\"\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ {\n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            return \"YES\"\n        }\n        if interval1Start <= interval2End\
    \ && interval1End >= interval2Start {\n            return \"YES\"\n        }\n\
    \        if interval1Start >= interval2Start && interval1End <= interval2End {\n\
    \            return \"YES\"\n        }\n        if interval1Start >= interval2End\
    \ && interval1End <= interval2Start {\n            return \"YES\"\n        }\n\
    \    }\n    \n    return \"NO\"\n}\n", "    var result string\n    if len(interval1)\
    \ > len(interval2) {\n        interval1, interval2 = interval2, interval1\n  \
    \  }\n    for _, interval1Element := range interval1 {\n        for _, interval2Element\
    \ := range interval2 {\n            if interval1Element > interval2Element {\n\
    \                break\n            }\n        }\n        if interval1Element\
    \ == interval2Element {\n            result = \"YES\"\n            break\n   \
    \     }\n    }\n    return result\n}\n", "    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n\
    \    interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    intersectionStart := interval1Start\n \
    \   intersectionEnd := interval1End\n    \n    for i := 1; i < len(interval1);\
    \ i++ {\n        interval1Start := interval1[i].(float64)\n        interval1End\
    \ := interval1[i+1].(float64)\n        \n        if interval1Start > interval1End\
    \ {\n            return \"NO\"\n        }\n        if interval1End < interval1Start\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ > intersectionEnd {\n            intersectionEnd = interval1End\n        }\n\
    \        if interval1End < intersectionStart {\n            intersectionStart\
    \ = interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ && intersectionStart < interval2End {\n        return \"YES\"\n    }\n    if\
    \ intersectionStart <= intersectionEnd && intersectionEnd < interval2Start {\n\
    \        return \"YES\"\n    }\n    if intersectionStart > intersectionEnd {\n\
    \        return \"NO\"\n    }\n    if intersectionEnd > interval2Start {\n   \
    \     return \"NO\"\n    }\n    if intersectionEnd > interval2End {\n        return\
    \ \"NO\"\n    }\n    return \"NO\"\n}\n", "    var interval1Start, interval1End\
    \ int\n    var interval2Start, interval2End int\n    var intersectionLength int\n\
    \    var isPrime bool\n\n    if len(interval1) != len(interval2) {\n        return\
    \ \"NO\"\n    }\n\n    for i := 0; i < len(interval1); i++ {\n        interval1Start\
    \ = interval1[i].(int)\n        interval1End = interval1Start + interval1[i].(int)\n\
    \        interval2Start = interval2[i].(int)\n        interval2End = interval2Start\
    \ + interval2[i].(int)\n\n        if interval1Start <= interval2Start && interval1End\
    \ >= interval2End {\n            intersectionLength = interval1End - interval1Start\n\
    \            if isPrime = checkIfPrime(intersectionLength) {\n               \
    \ return \"YES\"\n            }\n        }\n    }\n\n    return \"NO\"\n}\n",
  "    var interval1Start, interval1End int\n    var interval2Start, interval2End\
    \ int\n\n    interval1Start = interval1[0].(int)\n    interval1End = interval1[1].(int)\n\
    \    interval2Start = interval2[0].(int)\n    interval2End = interval2[1].(int)\n\
    \n    if interval1Start <= interval2Start && interval1End >= interval2End {\n\
    \        if interval1Start <= interval2End {\n            if interval1End <= interval2Start\
    \ {\n                return \"YES\"\n            } else {\n                return\
    \ \"NO\"\n            }\n        } else {\n            return \"NO\"\n       \
    \ }\n    } else {\n        return \"NO\"\n    }\n}\n", "    \n    // Write your\
    \ code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    var interval1Start, interval1End int\n\
    \    var interval2Start, interval2End int\n    \n    if len(interval1) != len(interval2)\
    \ {\n        return \"NO\"\n    }\n    \n    for i := 0; i < len(interval1); i++\
    \ {\n        interval1Start = interval1[i].(int)\n        interval1End = interval1Start\
    \ + interval1[i].(int)\n        \n        for j := 0; j < len(interval2); j++\
    \ {\n            interval2Start = interval2[j].(int)\n            interval2End\
    \ = interval2Start + interval2[j].(int)\n            \n            if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n                return\
    \ \"YES\"\n            }\n        }\n    }\n    return \"NO\"\n}\n", "    if len(interval1)\
    \ != len(interval2) {\n        return \"NO\"\n    }\n    \n    interval1 := interval1.([]interface{})\n\
    \    interval2 := interval2.([]interface{})\n    \n    result := make([]interface{},\
    \ len(interval1))\n    \n    for i := 0; i < len(interval1); i++ {\n        if\
    \ interval1[i] > interval2[i] {\n            result[i] = interval1[i]\n      \
    \  } else {\n            result[i] = interval2[i]\n        }\n    }\n    \n  \
    \  result := result.([]interface{})\n    \n    if len(result) == 0 {\n       \
    \ return \"NO\"\n    }\n    \n    result := result.([]interface{})\n    \n   \
    \ if len(result) == 1 {\n        if result[0] == result[1] {\n            return\
    \ \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 2 {\n        if result[0] == result[1] {\n      \
    \      return \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    result\
    \ := result.([]interface{})\n    \n    if len(result) == 3 {\n        if result[0]\
    \ == result[1] && result[1] == result[2] {\n            return \"YES\"\n     \
    \   }\n        return \"NO\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 4 {\n        if result[0] == result[1] && result[1]\
    \ == result[2] && result[2] == result[3] {\n            return \"YES\"\n     \
    \   }\n        return \"NO\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 5 {\n        if result[0] == result[1] && result[1]\
    \ == result[2] && result[2] == result[3] && result[3] == result[4] {\n       \
    \     return \"YES\"\n        }\n        return \"NO\"\n    }\n    \n    result\
    \ := result.([]interface{})\n    \n    if len(result) == 6 {\n        if result[0]\
    \ == result[1] && result[1] == result[2] && result[2] == result[3] && result[3]\
    \ == result[4] && result[4] == result[5] {\n            return \"YES\"\n     \
    \   }\n        return \"NO\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 7 {\n        if result[0] == result[1] && result[1]\
    \ == result[2] && result[2] == result[3] && result[3] == result[4] && result[4]\
    \ == result[5] && result[5] == result[6] {\n            return \"YES\"\n     \
    \   }\n        return \"NO\"\n    }\n    \n    result := result.([]interface{})\n\
    \    \n    if len(result) == 8 {\n        if result[0] == result[1] && result[1]\
    \ == result[2] && result[2] == result[3] && result[3] == result[4] && result[4]\
    \ == result[5", "    if len(interval1) == 0 || len(interval2) == 0 {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n \
    \   interval1End := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n\
    \    interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    interval1Length := interval1End\
    \ - interval1Start\n    interval2Length := interval2End - interval2Start\n   \
    \ \n    if interval1Length == 0 || interval2Length == 0 {\n        return \"NO\"\
    \n    }\n    \n    intersectionLength := interval1Length * interval2Length\n \
    \   \n    if intersectionLength == 0 {\n        return \"NO\"\n    }\n    \n \
    \   if interval1Length == interval2Length {\n        \n        if interval1Start\
    \ <= interval2Start && interval1End >= interval2End {\n            return \"YES\"\
    \n        }\n        \n        if interval1Start <= interval2End && interval1End\
    \ >= interval2Start {\n            return \"YES\"\n        }\n        \n     \
    \   if interval1Start >= interval2Start && interval1End <= interval2End {\n  \
    \          return \"YES\"\n        }\n        \n        if interval1Start >= interval2End\
    \ && interval1End <= interval2Start {\n            return \"YES\"\n        }\n\
    \        \n        return \"NO\"\n    }\n    \n    if interval1Length == 1 {\n\
    \        \n        if interval1Start <= interval2Start && interval1End >= interval2End\
    \ {\n            return \"YES\"\n        }\n        \n        if interval1Start\
    \ <= interval2End && interval1End >= interval2Start {\n            return \"YES\"\
    \n        }\n        \n        if interval1Start >= interval2Start && interval1End\
    \ <= interval2End {\n            return \"YES\"\n        }\n        \n       \
    \ if interval1Start >= interval2End && interval1End <= interval2Start {\n    \
    \        return \"YES\"\n        }\n        \n        return \"NO\"\n    }\n \
    \   \n    if interval2Length == 1 {\n        \n        if interval1Start <= interval2Start\
    \ && interval1End >= interval2End {\n            return \"YES\"\n        }\n \
    \       \n        if interval1Start <= interval2End && interval1End >= interval2Start\
    \ {\n            return \"YES\"\n        }\n        \n        if interval1Start\
    \ >= interval2", "    if len(interval1) != len(interval2) {\n        return \"\
    NO\"\n    }\n    \n    interval1Start := interval1[0].(float64)\n    interval1End\
    \ := interval1[1].(float64)\n    interval2Start := interval2[0].(float64)\n  \
    \  interval2End := interval2[1].(float64)\n    \n    if interval1Start > interval1End\
    \ {\n        interval1Start, interval1End = interval1End, interval1Start\n   \
    \ }\n    if interval2Start > interval2End {\n        interval2Start, interval2End\
    \ = interval2End, interval2Start\n    }\n    \n    if interval1Start > interval2End\
    \ {\n        return \"NO\"\n    }\n    if interval1End < interval2Start {\n  \
    \      return \"NO\"\n    }\n    \n    interval1Length := interval1End - interval1Start\n\
    \    interval2Length := interval2End - interval2Start\n    \n    if interval1Length\
    \ == 0 || interval2Length == 0 {\n        return \"NO\"\n    }\n    \n    if interval1Length\
    \ == interval2Length {\n        \n        if interval1Start <= interval2Start\
    \ {\n            return \"NO\"\n        }\n        if interval1End >= interval2End\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            return \"NO\"\n        }\n        if interval1End\
    \ >= interval2End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start <= interval2Start {\n            return \"NO\"\n        }\n \
    \       if interval1End >= interval2End {\n            return \"NO\"\n       \
    \ }\n        \n        if interval1Start <= interval2Start {\n            return\
    \ \"NO\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"NO\"\n        }\n        \n        if interval1Start <= interval2Start {\n\
    \            return \"NO\"\n        }\n        if interval1End >= interval2End\
    \ {\n            return \"NO\"\n        }\n        \n        if interval1Start\
    \ <= interval2Start {\n            return \"NO\"\n        }\n        if interval1End\
    \ >= interval2End {\n            return \"NO\"\n        }\n        \n        if\
    \ interval1Start <= interval2Start {\n            return \"NO\"\n        }\n \
    \       if interval1End >= interval2End {\n            return \"NO\"\n       \
    \ }\n        \n        if interval1Start <= interval2Start {\n            return\
    \ \"NO\"\n        }\n        if interval1End >= interval2End {\n            return\
    \ \"NO\"\n        }\n        \n        if interval1Start <= interval2Start {\n\
    \            return \"NO\"\n        }\n        if interval1End >= interval2End\
    \ {\n", "    if len(interval1) != len(interval2) {\n        return \"NO\"\n  \
    \  }\n    \n    interval1Start, interval1End := interval1[0], interval1[1]\n \
    \   interval2Start, interval2End := interval2[0], interval2[1]\n    \n    if interval1Start\
    \ > interval2End {\n        return \"NO\"\n    }\n    if interval1End < interval2Start\
    \ {\n        return \"NO\"\n    }\n    \n    interval1Length := interval1End -\
    \ interval1Start\n    interval2Length := interval2End - interval2Start\n    \n\
    \    if interval1Length == 0 || interval2Length == 0 {\n        return \"NO\"\n\
    \    }\n    \n    if interval1Length == interval2Length {\n        return fmt.Sprintf(\"\
    YES\")\n    }\n    \n    if interval1Length < interval2Length {\n        interval1Length\
    \ += 1\n    }\n    \n    primeLength := interval1Length\n    \n    for i := 2;\
    \ i <= primeLength; i++ {\n        if interval1Start % i == 0 && interval2Start\
    \ % i == 0 {\n            primeLength += 1\n        }\n    }\n    \n    if primeLength\
    \ == interval1Length {\n        return fmt.Sprintf(\"YES\")\n    }\n    \n   \
    \ if primeLength > interval1Length {\n        primeLength -= 1\n    }\n    \n\
    \    if interval1Start % primeLength == 0 && interval2Start % primeLength == 0\
    \ {\n        return fmt.Sprintf(\"YES\")\n    }\n    \n    if interval1Start %\
    \ primeLength == 0 && interval2Start % primeLength != 0 {\n        return fmt.Sprintf(\"\
    NO\")\n    }\n    \n    if interval1Start % primeLength != 0 && interval2Start\
    \ % primeLength == 0 {\n        return fmt.Sprintf(\"NO\")\n    }\n    \n    if\
    \ interval1Start % primeLength != 0 && interval2Start % primeLength != 0 {\n \
    \       return fmt.Sprintf(\"NO\")\n    }\n    \n    return \"NO\"\n}\n", "  \
    \  if len(interval1) != len(interval2) {\n        return \"NO\"\n    }\n    \n\
    \    interval1Start := interval1[0].(float64)\n    interval1End := interval1[1].(float64)\n\
    \    interval2Start := interval2[0].(float64)\n    interval2End := interval2[1].(float64)\n\
    \    \n    if interval1Start > interval2End {\n        return \"NO\"\n    }\n\
    \    if interval1End < interval2Start {\n        return \"NO\"\n    }\n    \n\
    \    intersectionStart := interval1Start\n    intersectionEnd := interval1End\n\
    \    \n    for i := 1; i < len(interval1); i++ {\n        interval1Start := interval1[i].(float64)\n\
    \        interval1End := interval1[i+1].(float64)\n        \n        if interval1Start\
    \ > interval1End {\n            return \"NO\"\n        }\n        if interval1End\
    \ < interval1Start {\n            return \"NO\"\n        }\n        \n       \
    \ if interval1Start <= intersectionEnd && interval1End >= intersectionStart {\n\
    \            intersectionStart = interval1Start\n            intersectionEnd =\
    \ interval1End\n        }\n    }\n    \n    if intersectionStart <= intersectionEnd\
    \ && intersectionEnd <= interval2End {\n        return \"YES\"\n    }\n    \n\
    \    return \"NO\"\n}\n", "    if len(interval1) != len(interval2) {\n       \
    \ return \"NO\"\n    }\n    \n    interval1Start := interval1[0].(int)\n    interval1End\
    \ := interval1[1].(int)\n    interval2Start := interval2[0].(int)\n    interval2End\
    \ := interval2[1].(int)\n    \n    if interval1Start > interval2End {\n      \
    \  return \"NO\"\n    }\n    if interval1End < interval2Start {\n        return\
    \ \"NO\"\n    }\n    \n    intersection := interval1Start <= interval2Start &&\
    \ interval1End >= interval2End\n    if intersection {\n        return \"YES\"\n\
    \    }\n    \n    return \"NO\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
