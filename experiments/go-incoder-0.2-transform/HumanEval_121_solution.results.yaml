language: go_test.go
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7uocpo0b_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpkgnnzk0e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpkgnnzk0e_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpkgnnzk0e_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpkgnnzk0e_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go,algorithm |>\n<| c |>\nThe question\
    \ was about golang, not python\n<|/ c |>\n<| c |>\nI added a golang solution\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n  \
    \  \"math\"\n)\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfk4mcfmq_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp0t6eozxl_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0t6eozxl_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: null
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < len(lst) {\n        if lst[i] % 2 == 0 {\n            sum +=\
    \ lst[i]\n            i++\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074411
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int = 0\n \
    \   for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum +=\
    \ lst[i]\n        }\n    }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual:\
    \ candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30,\
    \ 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected:\
    \ 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual:\
    \ candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3,\
    \ 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphbbg716k_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsh26as8d_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo2lq3rzw_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo2lq3rzw_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go,arrays,algorithm |>\n<| a tags=go,arrays,algorithm\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm3w3dxtp_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThanks for your\
    \ answer. I tried your solution and it works. But I still don't understand why\
    \ my code doesn't work. Can you explain to me why my code doesn't work?\n<|/ c\
    \ |>\n<| c |>\nYour code doesn't work because you didn't use the `for` loop to\
    \ iterate over the list. Your code doesn't work because you didn't use the `for`\
    \ loop to iterate over the list. Your code doesn't work because you didn't use\
    \ the `for` loop to iterate over the list. Your code doesn't work because you\
    \ didn't use the `for` loop to iterate over the list. Your code doesn't work because\
    \ you didn't use the `for` loop to iterate over the list. Your code doesn't work\
    \ because you didn't use the `for` loop to iterate over the list. Your code doesn't\
    \ work because you didn't use the `for` loop to iterate over the list. Your code\
    \ doesn't work because you didn't use the `for` loop to iterate over the list.\
    \ Your code doesn't work because you didn't use the `for` loop to iterate over\
    \ the list. Your code doesn't work because you didn't use the `for` loop to iterate\
    \ over the list. Your code doesn't work because you didn't use the `for` loop\
    \ to iterate over the list. Your code doesn't work because you didn't use the\
    \ `for` loop to iterate over the list. Your code doesn't work because you didn't\
    \ use the `for` loop to iterate over the list. Your code doesn't work because\
    \ you didn't use the `for` loop to iterate over the list. Your code doesn't work\
    \ because you didn't use the `for` loop to iterate over the list. Your code doesn't\
    \ work because you didn't use the `for` loop to iterate over the list. Your code\
    \ doesn't work because you didn't use the `for` loop to iterate over the list.\
    \ Your code doesn't work because you didn't use the `for` loop to iterate over\
    \ the list. Your code doesn't work because you didn't use the `for` loop to iterate\
    \ over the list. Your code doesn't work because you didn't use the `for` loop\
    \ to iterate over the list. Your code doesn't work because you didn't use the\
    \ `for` loop to iterate over the list. Your code doesn't work because you didn't\
    \ use the `for` loop to iterate over the list. Your code doesn't work because\
    \ you didn't use the `for` loop to iterate over the list. Your code doesn't work\
    \ because you didn't use the `for` loop to iterate over the list. Your code doesn't\
    \ work because you didn't use the `for` \nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpatzkheru_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question, which is about how to solve this problem in general. Your solution\
    \ only works for this particular case.\n<|/ c |>\n<| c |>\nI agree with you, my\
    \ answer was more of a \"how would you do it\" rather than a direct solution to\
    \ the problem. I'll update my answer to reflect that.\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution that works for all cases.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a solution that works for all cases.\n<|/ c |>\n\
    <| a tags=algorithm,go |>\nThe solution is very simple:\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5vzjckp7_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=go,algorithm |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl1usx1c0_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nI like the idea\
    \ of using map to solve this problem. Thanks!\n<|/ c |>\n<| c |>\nI like your\
    \ solution. Very elegant. Thanks!\n<|/ c |>\n<| a tags=go |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj2yw5z8h_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsh26as8d_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_szeigt8_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=1 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfytkl2js_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int = 0\n \
    \   for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n   \
    \     }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpcuzyp3hf_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpcuzyp3hf_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer\
    \ the question. OP wants to know why his code doesn't work, not how to solve the\
    \ problem.\n<|/ c |>\n<| c |>\nThe question was \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote. OP asked \"why doesn't my code work?\"\
    \ I answered that with the code I wrote.\n<|/ c |>\n<| c |>\nOP asked \"why doesn't\
    \ my code work?\" I answered that with the code I wrote. OP asked \"why doesn't\
    \ my code work?\" I answered that with the code I wrote. OP asked \"why doesn't\
    \ my code work?\" I answered that with the code I wrote. OP asked \"why doesn't\
    \ my code work?\" I answered that with the code I wrote. OP asked \"why doesn't\
    \ my code work?\" I answered that with the code I wrote. OP asked \"why doesn't\
    \ my code work?\" I answered that with the code I wrote. OP asked \"why doesn't\
    \ my code work?\" I answe\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12\
    \ },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfduua7_u_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdussvpue_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo2lq3rzw_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    evenPos\
    \ := 0\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum +=\
    \ v\n            evenPos++\n        }\n    }\n    if evenPos == 0 {\n        return\
    \ sum\n    }\n    return sum + solution(lst[evenPos:])\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThanks for your answer. Can you please explain how this works?\n<|/ c\
    \ |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n<| a tags=algorithm,recursion,go\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy8sks18k_test.go:30:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nI like this solution,\
    \ however it only works for positive integers. I modified the code so that it\
    \ works for negative integers as well. Thanks!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpszlg5by7_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3_41mugw_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: null
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    i :=\
    \ 0\n    for i < len(lst) {\n        if lst[i] % 2 == 0 {\n            sum +=\
    \ lst[i]\n            i++\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074411
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpbiwb16hx_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpbiwb16hx_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| a dscore=0 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptit2hw99_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThanks for your\
    \ answer. Your solution works perfectly fine. But the problem is that I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot use any built-in functions. I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot use any built-in functions. I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot use any built-in functions. I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot use any built-in functions. I cannot\
    \ use any built-in functions. I cannot use any built-in functions. I cannot use\
    \ any built-in functions. I cannot use any built-in functions. I cannot use any\
    \ built-in functions. I cannot use any built-in functions. I cannot use any built-in\
    \ functions. I cannot use any built-in functions. I cannot use any built-in functions.\
    \ I cannot use any built-in functions. I cannot use any built-in functions. I\
    \ cannot use any built-in functions. I cannot \nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9l58ycr7_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpmq1ufn3e_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmpmq1ufn3e_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis solution does\
    \ not work if you have a negative number. `solution([]int{-1, -2, -3, -4, -5})`\
    \ returns `-5` instead of `0`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpajbjm34p_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThanks for your\
    \ answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\nThe `for`\
    \ loop iterates over the `lst` slice, assigning each element to the `v` variable.\
    \ `v%2` checks if the element is even, and if it is, it adds it to the sum. `v/2`\
    \ does the same thing, but divides the number by two. `v/2` will always round\
    \ down, so the sum is always rounded down.\n<|/ c |>\n<| c |>\nThanks. I understand\
    \ it now. One more question, what is the purpose of \"v/2\"? Why not just \"v\"\
    ?\n<|/ c |>\n<| c |>\n`v/2` will always round down, so the sum is always rounded\
    \ down.\n<|/ c |>\n<| c |>\nThanks. I understand it now. One more question, what\
    \ is the purpose of \"v/2\"? Why not just \"v\"?\n<|/ c |>\n<| a |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcmkxdesh_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go |>\n<| c |>\nThanks so much for\
    \ taking the time to write this up. I'm going to try this out and see how it goes.\
    \ I appreciate your help!\n<|/ c |>\n<| c |>\nI ran the code and it works perfectly.\
    \ Thank you so much!\n<|/ c |>\n<| c |>\nGlad I could help. Good luck!\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    sort\"\n)\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n \
    \    { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual:\
    \ candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5,\
    \ 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n\
    \     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual:\
    \ candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfixcqpjb_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp82flvre7_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmp82flvre7_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i\
    \ := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmp1pmbrr8d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pmbrr8d_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a tags=go,arrays |>\n<| a tags=go,arrays\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t\
    \ *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1lbrb2e0_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum = 0\n    for\
    \ i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate\
    \ := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5\
    \ (0.00s)\n        tmpe86azsv9_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n\
    \    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpe86azsv9_test.go:45:\
    \ expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npackage\
    \ main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestSolution(t *testing.T)\
    \ {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzcu53n2p_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074397
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate :=\
    \ solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected:\
    \ 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n    \
    \ { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual:\
    \ candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4,\
    \ 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected:\
    \ 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n\
    \    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n\
    \    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n\
    \    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphp12d378_test.go:45:\
    \ expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6\
    \ (0.00s)\n        tmphp12d378_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a non-empty list of integers, return the sum of all of the odd elements\
    \ that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n\
    // 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30,\
    \ 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for _,\
    \ v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n \
    \   }\n    return sum\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n)\n\nfunc TestSolution(t *testing.T) {\n\
    \  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}),\
    \ expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected:\
    \ 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual:\
    \ candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30,\
    \ 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbkmt3sec_test.go:25:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074398
