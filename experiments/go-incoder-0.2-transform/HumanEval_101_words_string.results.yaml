language: go_test.go
name: HumanEval_101_words_string
results:
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \    words := strings.Split(s, \",\")\n    result := make([]string, len(words))\n\
    \    for i, _ := range words {\n        result[i] = strings.TrimSpace(words[i])\n\
    \    }\n    return result\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuofc8yhj_test.go:17:14: undefined: strings

    /tmp/tmpuofc8yhj_test.go:20:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcqlff3hd_test.go:16:14: undefined: strings

    /tmp/tmpcqlff3hd_test.go:17:11: no new variables on left side of :=

    /tmp/tmpcqlff3hd_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9q7xmfa_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \    words := strings.Split(s, \",\")\n    for _, word := range words {\n    \
    \    word = strings.TrimSpace(word)\n        if word != \"\" {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfin_fxxt_test.go:17:14: undefined: strings

    /tmp/tmpfin_fxxt_test.go:19:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpleikadtj_test.go:16:14: undefined: strings

    /tmp/tmpleikadtj_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, _ := range words\
    \ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglaxtu_c_test.go:16:14: undefined: strings

    /tmp/tmpglaxtu_c_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9q7xmfa_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_c9bz7l_test.go:17:11: no new variables on left side of :=

    /tmp/tmp7_c9bz7l_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_c9bz7l_test.go:17:11: no new variables on left side of :=

    /tmp/tmp7_c9bz7l_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your function\
    \ here\n    words := strings.Split(s, \",\")\n    words := strings.Split(s, \"\
    \ \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl3brb2yt_test.go:17:14: undefined: strings

    /tmp/tmpl3brb2yt_test.go:18:11: no new variables on left side of :=

    /tmp/tmpl3brb2yt_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Split the string into\
    \ words by splitting on spaces.\n    words := strings.Split(s, \" \")\n    //\
    \ Return an array of words.\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodtlb713_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := range words {\n\
    \        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26v2q2ot_test.go:16:14: undefined: strings

    /tmp/tmp26v2q2ot_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: Write the code\
    \ here\n    return []string{}\n}\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpv_5l2wbh_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpv_5l2wbh_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpv_5l2wbh_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpv_5l2wbh_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpv_5l2wbh_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := range words {\n\
    \        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26v2q2ot_test.go:16:14: undefined: strings

    /tmp/tmp26v2q2ot_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_c9bz7l_test.go:17:11: no new variables on left side of :=

    /tmp/tmp7_c9bz7l_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Split the string into\
    \ words\n    words := strings.Split(s, \",\")\n    // Return an array of words\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7nryahd0_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := range words {\n\
    \        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26v2q2ot_test.go:16:14: undefined: strings

    /tmp/tmp26v2q2ot_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, _ := range words\
    \ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglaxtu_c_test.go:16:14: undefined: strings

    /tmp/tmpglaxtu_c_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_c9bz7l_test.go:17:11: no new variables on left side of :=

    /tmp/tmp7_c9bz7l_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \", \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpspl4jefo_test.go:17:11: no new variables on left side of :=

    /tmp/tmpspl4jefo_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7_c9bz7l_test.go:17:11: no new variables on left side of :=

    /tmp/tmp7_c9bz7l_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0, 5)\n    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0560r2t0_test.go:17:11: no new variables on left side of :=

    /tmp/tmp0560r2t0_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9q7xmfa_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikx1ygrm_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := range words {\n\
    \        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26v2q2ot_test.go:16:14: undefined: strings

    /tmp/tmp26v2q2ot_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: Write a function\
    \ that takes a string and returns a slice of strings.\n    // The slice should\
    \ be the return value of your function.\n    return []string{}\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpm7lora6d_test.go:39: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpm7lora6d_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpm7lora6d_test.go:39: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpm7lora6d_test.go:39:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpm7lora6d_test.go:39: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    words := strings.Split(s, \" \"\
    )\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph_yxo67s_test.go:17:11: no new variables on left side of :=

    /tmp/tmph_yxo67s_test.go:17:14: undefined: strings

    /tmp/tmph_yxo67s_test.go:18:11: no new variables on left side of :=

    /tmp/tmph_yxo67s_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \    words := strings.Split(s, \",\")\n    words := strings.Split(s, \" \")\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ry_ym7x_test.go:17:14: undefined: strings

    /tmp/tmp9ry_ym7x_test.go:18:11: no new variables on left side of :=

    /tmp/tmp9ry_ym7x_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, _ := range words\
    \ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglaxtu_c_test.go:16:14: undefined: strings

    /tmp/tmpglaxtu_c_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9q7xmfa_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := range words {\n\
    \        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26v2q2ot_test.go:16:14: undefined: strings

    /tmp/tmp26v2q2ot_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = w\n    }\n    return result\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq1xtxojo_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your solution\
    \ here\n    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxs8506cs_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \",\")\n    words = strings.Split(s, \" \"\
    )\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeady0kp4_test.go:17:11: no new variables on left side of :=

    /tmp/tmpeady0kp4_test.go:17:14: undefined: strings

    /tmp/tmpeady0kp4_test.go:18:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpleikadtj_test.go:16:14: undefined: strings

    /tmp/tmpleikadtj_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, _ := range words\
    \ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglaxtu_c_test.go:16:14: undefined: strings

    /tmp/tmpglaxtu_c_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \    words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikx1ygrm_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, _ := range words\
    \ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglaxtu_c_test.go:16:14: undefined: strings

    /tmp/tmpglaxtu_c_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := range words {\n\
    \        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26v2q2ot_test.go:16:14: undefined: strings

    /tmp/tmp26v2q2ot_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9q7xmfa_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := 0; i < len(words);\
    \ i++ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuv3abs49_test.go:16:14: undefined: strings

    /tmp/tmpuv3abs49_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Write your code here\n\
    \    words := strings.Split(s, \",\")\n    for _, word := range words {\n    \
    \    word = strings.TrimSpace(word)\n        if word != \"\" {\n            words\
    \ = append(words, word)\n        }\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfin_fxxt_test.go:17:14: undefined: strings

    /tmp/tmpfin_fxxt_test.go:19:16: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: Write the code\
    \ here\n    return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpyg5268yg_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpyg5268yg_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpyg5268yg_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpyg5268yg_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpyg5268yg_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = w\n    }\n    return result\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq1xtxojo_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := 0; i < len(words);\
    \ i++ {\n        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n\
    }\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuv3abs49_test.go:16:14: undefined: strings

    /tmp/tmpuv3abs49_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i := range words {\n\
    \        result[i] = strings.TrimSpace(words[i])\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp26v2q2ot_test.go:16:14: undefined: strings

    /tmp/tmp26v2q2ot_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = w\n    }\n    return result\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq1xtxojo_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9q7xmfa_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    words := strings.Split(s, \", \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpspl4jefo_test.go:17:11: no new variables on left side of :=

    /tmp/tmpspl4jefo_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Split the string into\
    \ words by splitting on commas\n    // or spaces.\n    words := strings.Split(s,\
    \ \",\")\n    \n    // Return an array of words.\n    return words\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3hi0htm_test.go:18:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv9q7xmfa_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpleikadtj_test.go:16:14: undefined: strings

    /tmp/tmpleikadtj_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \" \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8m227nw5_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \", \")\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4s23r9yp_test.go:16:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // Your code here\n  \
    \  words := strings.Split(s, \",\")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoaedjdnv_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074065
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, word := range words\
    \ {\n        result[i] = strings.TrimSpace(word)\n    }\n    return result\n}\n\
    \nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpomfqhgtd_test.go:16:14: undefined: strings

    /tmp/tmpomfqhgtd_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    words := strings.Split(s, \" \")\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp2c5y54_test.go:16:14: undefined: strings

    /tmp/tmpkp2c5y54_test.go:17:11: no new variables on left side of :=

    /tmp/tmpkp2c5y54_test.go:17:14: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
- exit_code: 2
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := strings.Split(s,\
    \ \",\")\n    result := make([]string, len(words))\n    for i, w := range words\
    \ {\n        result[i] = strings.TrimSpace(w)\n    }\n    return result\n}\n\n\
    func TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One,\
    \ two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4bokd9nz_test.go:16:14: undefined: strings

    /tmp/tmp4bokd9nz_test.go:19:21: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074064
