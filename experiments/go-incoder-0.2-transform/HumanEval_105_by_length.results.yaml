language: go_test.go
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn84yez88_test.go:67:27: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[len(arr)-2] = arr[len(arr)-2],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := []string{}\n    for _,\
    \ v := range arr {\n        arr = append(arr, fmt.Sprintf(\"%s\", map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[v]))\n    }\n    return arr\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2so8ruja_test.go:43:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := arr[:0]\n    for _, v := range arr {\n       \
    \ if v >= 1 && v <= 9 {\n            arr = append(arr, fmt.Sprintf(\"%v\", v))\n\
    \        }\n    }\n    arr = append(arr, \"One\")\n    arr = append(arr, \"Two\"\
    )\n    arr = append(arr, \"Three\")\n    arr = append(arr, \"Four\")\n    arr\
    \ = append(arr, \"Five\")\n    arr = append(arr, \"Six\")\n    arr = append(arr,\
    \ \"Seven\")\n    arr = append(arr, \"Eight\")\n    arr = append(arr, \"Nine\"\
    )\n    arr = append(arr, \"Ten\")\n    arr = append(arr, \"Eleven\")\n    arr\
    \ = append(arr, \"Twelve\")\n    arr = append(arr, \"Thirteen\")\n    arr = append(arr,\
    \ \"Fourteen\")\n    arr = append(arr, \"Fifteen\")\n    arr = append(arr, \"\
    Sixteen\")\n    arr = append(arr, \"Seventeen\")\n    arr = append(arr, \"Eighteen\"\
    )\n    arr = append(arr, \"Nineteen\")\n    arr = append(arr, \"Twenty\")\n  \
    \  arr = append(arr, \"Twenty-one\")\n    arr = append(arr, \"Twenty-two\")\n\
    \    arr = append(arr, \"Twenty-three\")\n    arr = append(arr, \"Twenty-four\"\
    )\n    arr = append(arr, \"Twenty-five\")\n    arr = append(arr, \"Twenty-six\"\
    )\n    arr = append(arr, \"Twenty-seven\")\n    arr = append(arr, \"Twenty-eight\"\
    )\n    arr = append(arr, \"Twenty-nine\")\n    arr = append(arr, \"Thirty\")\n\
    \    arr = append(arr, \"Thirty-one\")\n    arr = append(arr, \"Thirty-two\")\n\
    \    arr = append(arr, \"Thirty-three\")\n    arr = append(arr, \"Thirty-four\"\
    )\n    arr = append(arr, \"Thirty-five\")\n    arr = append(arr, \"Thirty-six\"\
    )\n    arr = append(arr, \"Thirty-seven\")\n    arr = append(arr, \"Thirty-eight\"\
    )\n    arr = append(arr, \"Thirty-nine\")\n    arr = append(arr, \"Fourty\")\n\
    \    arr = append(arr, \"Fourty-one\")\n    arr = append(arr, \"Fourty-two\")\n\
    \    arr = append(arr, \"Fourty-three\")\n    arr = append(arr, \"Fourty-four\"\
    )\n    arr = append(arr, \"Fourty-five\")\n    arr = append(arr, \"Fourty-six\"\
    )\n    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpunl2izzt_test.go:74:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n\n    arr3\
    \ := make([]string, len(arr))\n    for i := range arr3 {\n        arr3[i] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[arr2[i]]\n    }\n\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyvjfryox_test.go:30:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(arr2)\n    arr3 = reverse(arr2)\n    arr4 = make([]string,\
    \ len(arr))\n    for i := range arr4 {\n        arr4[i] = name[arr3[i]]\n    }\n\
    \    return arr4\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprvyuu5kg_test.go:28:5: undefined: sort

    /tmp/tmprvyuu5kg_test.go:29:5: undefined: arr3

    /tmp/tmprvyuu5kg_test.go:29:12: undefined: reverse

    /tmp/tmprvyuu5kg_test.go:30:5: undefined: arr4

    /tmp/tmprvyuu5kg_test.go:31:20: undefined: arr4

    /tmp/tmprvyuu5kg_test.go:32:9: undefined: arr4

    /tmp/tmprvyuu5kg_test.go:32:19: undefined: name

    /tmp/tmprvyuu5kg_test.go:32:24: undefined: arr3

    /tmp/tmprvyuu5kg_test.go:34:12: undefined: arr4

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    reverse(arr)\n    arr :=\
    \ arr[:len(arr)/2]\n    for i := range arr {\n        arr[i] = \"One\"\n    }\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0q8mb6nn_test.go:24:5: undefined: sort

    /tmp/tmp0q8mb6nn_test.go:25:9: no new variables on left side of :=

    /tmp/tmp0q8mb6nn_test.go:26:5: undefined: reverse

    /tmp/tmp0q8mb6nn_test.go:27:9: no new variables on left side of :=

    /tmp/tmp0q8mb6nn_test.go:29:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp0q8mb6nn_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i := range arr\
    \ {\n        arr[i] = arr[i] + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n\
    \    arr := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp46672v14_test.go:21:9: no new variables on left side of :=

    /tmp/tmp46672v14_test.go:25:5: undefined: sort

    /tmp/tmp46672v14_test.go:26:9: no new variables on left side of :=

    /tmp/tmp46672v14_test.go:26:12: undefined: reverse

    /tmp/tmp46672v14_test.go:27:9: no new variables on left side of :=

    /tmp/tmp46672v14_test.go:27:12: undefined: replaceDigits

    /tmp/tmp46672v14_test.go:28:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    sort.Ints(arr)\n\
    \    for i := range arr {\n        if arr[i] > 9 {\n            arr[i] = arr[i]\
    \ - 10\n        }\n        result[i] = names[arr[i]]\n    }\n    for i := range\
    \ result {\n        result[i] = reverse(result[i])\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcgjj5gt2_test.go:22:5: undefined: sort

    /tmp/tmpcgjj5gt2_test.go:27:21: undefined: names

    /tmp/tmpcgjj5gt2_test.go:30:21: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result[i] = fmt.Sprintf(\"\
    %v\", arr[i])\n        } else {\n            result[i] = \"\"\n        }\n   \
    \ }\n    for i := range result {\n        if result[i] == \"\" {\n           \
    \ result[i] = \"One\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpdrdk_j1b_test.go:54: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpdrdk_j1b_test.go:54: expected '[One]', got '[1 One One]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpdrdk_j1b_test.go:54:\
    \ expected '[Three Two One]', got '[1 One 3 2]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpdrdk_j1b_test.go:54: expected '[Nine Eight Four]', got '[9\
    \ 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append(arr, 9)\n    arr := append(arr,\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \  arr := append(arr, \"Zero\")\n    arr := append(arr, \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"Zero\")\n   \
    \ arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"Zero\")\n    arr :=\
    \ append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \  arr := append(arr, \"Zero\")\n    arr := append(arr, \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr,\
    \ \"\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5zt17awl_test.go:50:24: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn84yez88_test.go:67:27: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append(arr, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9pwuv1z6_test.go:74:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltahvmhf_test.go:28:5: undefined: sort

    /tmp/tmpltahvmhf_test.go:29:12: undefined: reverse

    /tmp/tmpltahvmhf_test.go:30:12: undefined: replaceDigits

    /tmp/tmpltahvmhf_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr := make([]int, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ arr[i] + 1\n    }\n\n    sort.Sort(sort.Reverse(arr))\n\n    result := make([]string,\
    \ len(arr))\n    for i := range arr {\n        result[i] = names[arr[i]]\n   \
    \ }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpfppxav_test.go:25:9: no new variables on left side of :=

    /tmp/tmpbpfppxav_test.go:30:5: undefined: sort

    /tmp/tmpbpfppxav_test.go:34:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcuuo3fx_test.go:24:5:\
    \ undefined: sort\n/tmp/tmprcuuo3fx_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmprcuuo3fx_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmprcuuo3fx_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmprcuuo3fx_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmprcuuo3fx_test.go:27:9: no new variables on left side of :=\n/tmp/tmprcuuo3fx_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpn4vqkx_test.go:24:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:28:5: undefined: sort

    /tmp/tmpzpn4vqkx_test.go:29:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:29:12: undefined: reverse

    /tmp/tmpzpn4vqkx_test.go:30:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:30:12: undefined: replaceDigits

    /tmp/tmpzpn4vqkx_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvds2u6mq_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpvds2u6mq_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpvds2u6mq_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmpvds2u6mq_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpvds2u6mq_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpvds2u6mq_test.go:27:9: no new variables on left side of :=\n/tmp/tmpvds2u6mq_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpvds2u6mq_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpvds2u6mq_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpvds2u6mq_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpvds2u6mq_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, \nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl5xraeb__test.go:68:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2m94qal8_test.go:24:5: undefined: sort

    /tmp/tmp2m94qal8_test.go:25:9: no new variables on left side of :=

    /tmp/tmp2m94qal8_test.go:25:12: undefined: reverse

    /tmp/tmp2m94qal8_test.go:26:9: no new variables on left side of :=

    /tmp/tmp2m94qal8_test.go:26:12: undefined: replaceDigits

    /tmp/tmp2m94qal8_test.go:27:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]string, len(arr))\n    arr2 := append(arr2, fmt.Sprintf(\"One\"),\
    \ fmt.Sprintf(\"Two\"), fmt.Sprintf(\"Three\"), fmt.Sprintf(\"Four\"), fmt.Sprintf(\"\
    Five\"), fmt.Sprintf(\"Six\"), fmt.Sprintf(\"Seven\"), fmt.Sprintf(\"Eight\"),\
    \ fmt.Sprintf(\"Nine\"))\n    arr2 := append(arr2, fmt.Sprintf(\"Ten\"), fmt.Sprintf(\"\
    Eleven\"), fmt.Sprintf(\"Twelve\"), fmt.Sprintf(\"Thirteen\"), fmt.Sprintf(\"\
    Fourteen\"), fmt.Sprintf(\"Fifteen\"), fmt.Sprintf(\"Sixteen\"), fmt.Sprintf(\"\
    Seventeen\"), fmt.Sprintf(\"Eighteen\"), fmt.Sprintf(\"Nineteen\"))\n    arr2\
    \ := append(arr2, fmt.Sprintf(\"Twenty\"), fmt.Sprintf(\"Thirty\"), fmt.Sprintf(\"\
    Forty\"), fmt.Sprintf(\"Fifty\"), fmt.Sprintf(\"Sixty\"), fmt.Sprintf(\"Seventy\"\
    ), fmt.Sprintf(\"Eighty\"), fmt.Sprintf(\"Ninety\"))\n    arr2 := append(arr2,\
    \ fmt.Sprintf(\"Hundred\"), fmt.Sprintf(\"Thousand\"), fmt.Sprintf(\"Million\"\
    ), fmt.Sprintf(\"Billion\"), fmt.Sprintf(\"Trillion\"), fmt.Sprintf(\"Quadrillion\"\
    ), fmt.Sprintf(\"Quintillion\"), fmt.Sprintf(\"Sextillion\"), fmt.Sprintf(\"Septillion\"\
    ), fmt.Sprintf(\"Octillion\"), fmt.Sprintf(\"Nonillion\"))\n    arr2 := append(arr2,\
    \ fmt.Sprintf(\"Milli\"), fmt.Sprintf(\"Billi\"), fmt.Sprintf(\"Trilli\"), fmt.Sprintf(\"\
    Quadrilli\"), fmt.Sprintf(\"Quintilli\"), fmt.Sprintf(\"Sextilli\"), fmt.Sprintf(\"\
    Septilli\"), fmt.Sprintf(\"Octilli\"), fmt.Sprintf(\"Nonilli\"))\n    arr2 :=\
    \ append(arr2, fmt.Sprintf(\"Billion\"), fmt.Sprintf(\"Trillion\"), fmt.Sprintf(\"\
    Quadrillion\"), fmt.Sprintf(\"Quintillion\"), fmt.Sprintf(\"Sextillion\"), fmt.Sprintf(\"\
    Septillion\"), fmt.Sprintf(\"Octillion\"), fmt.Sprintf(\"Nonillion\"))\n    arr2\
    \ := append(arr2, fmt.Sprintf(\"Million\"), fmt.Sprintf(\"Billion\"), fmt.Sprintf(\"\
    Trillion\"), fmt.Sprintf(\"Quadrillion\"), fmt.Sprintf(\"Quintillion\"), fmt.Sprintf(\"\
    Sextillion\"), fmt.Sprintf(\"Septillion\"), fmt.Sprintf(\"Octilli\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpackkgn_0_test.go:31:221: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    by_length_helper(arr,\
    \ result)\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphvky0ukz_test.go:22:5: undefined: by_length_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    arr2 := make([]string, len(arr2))\n    for i := range arr2 {\n        arr2[i]\
    \ = name[arr2[i]]\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5s_xk213_test.go:28:5: undefined: sort

    /tmp/tmp5s_xk213_test.go:29:12: undefined: reverse

    /tmp/tmp5s_xk213_test.go:30:12: undefined: replaceDigits

    /tmp/tmp5s_xk213_test.go:31:10: no new variables on left side of :=

    /tmp/tmp5s_xk213_test.go:31:13: cannot use make([]string, len(arr2)) (value of
    type []string) as type []int in assignment

    /tmp/tmp5s_xk213_test.go:33:19: undefined: name

    /tmp/tmp5s_xk213_test.go:35:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := reverse(arr)\n  \
    \  arr := []string{}\n    for _, v := range arr {\n        arr = append(arr, name[v])\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsh1r03e9_test.go:24:9: no new variables on left side of :=

    /tmp/tmpsh1r03e9_test.go:25:5: undefined: sort

    /tmp/tmpsh1r03e9_test.go:26:9: no new variables on left side of :=

    /tmp/tmpsh1r03e9_test.go:26:12: undefined: reverse

    /tmp/tmpsh1r03e9_test.go:27:9: no new variables on left side of :=

    /tmp/tmpsh1r03e9_test.go:27:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmpsh1r03e9_test.go:29:27: undefined: name

    /tmp/tmpsh1r03e9_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, arr[len(arr)-1])\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphp5s_v4r_test.go:49:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i] = \"One\"\
    \n        } else if arr[i] >= 10 && arr[i] <= 99 {\n            arr2[i] = \"Two\"\
    \n        } else if arr[i] >= 100 && arr[i] <= 999 {\n            arr2[i] = \"\
    Three\"\n        } else if arr[i] >= 1000 && arr[i] <= 9999 {\n            arr2[i]\
    \ = \"Four\"\n        } else if arr[i] >= 10000 && arr[i] <= 99999 {\n       \
    \     arr2[i] = \"Five\"\n        } else if arr[i] >= 100000 && arr[i] <= 999999\
    \ {\n            arr2[i] = \"Six\"\n        } else if arr[i] >= 1000000 && arr[i]\
    \ <= 9999999 {\n            arr2[i] = \"Seven\"\n        } else if arr[i] >= 10000000\
    \ && arr[i] <= 99999999 {\n            arr2[i] = \"Eight\"\n        } else if\
    \ arr[i] >= 100000000 && arr[i] <= 999999999 {\n            arr2[i] = \"Nine\"\
    \n        } else {\n            arr2[i] = \"?\"\n        }\n    }\n    return\
    \ arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpw7_hz63b_test.go:65: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpw7_hz63b_test.go:65: expected '[One]', got '[One ? Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpw7_hz63b_test.go:65:\
    \ expected '[Three Two One]', got '[One ? One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpw7_hz63b_test.go:65: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    arr2 := make([]int, len(arr))\n    for i := range arr2\
    \ {\n        arr2[i] = arr[len(arr)-1-i]\n    }\n    arr2 = reverse(arr2)\n  \
    \  arr2 = reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n\
    \    arr2 := reverseDigits(arr2)\n    arr2 := reverseDigits(arr2)\n    arr2 :=\
    \ \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw3o9izes_test.go:76:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := reverse(arr)\n    for _, v := range arr {\n        arr[v] = name[v]\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3unomuyg_test.go:24:5:\
    \ undefined: sort\n/tmp/tmp3unomuyg_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmp3unomuyg_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmp3unomuyg_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmp3unomuyg_test.go:26:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp3unomuyg_test.go:27:9: no new variables on left side of :=\n/tmp/tmp3unomuyg_test.go:27:12:\
    \ undefined: reverse\n/tmp/tmp3unomuyg_test.go:29:18: undefined: name\n/tmp/tmp3unomuyg_test.go:31:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    arr := append(arr, reverse(arr))\n    arr := append(arr,\
    \ map[int]string{1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\"\
    , 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}[arr[len(arr)/2]])\n   \
    \ return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd88w1oer_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmpd88w1oer_test.go:25:9: no new variables\
    \ on left side of :=\n/tmp/tmpd88w1oer_test.go:25:24: undefined: reverse\n/tmp/tmpd88w1oer_test.go:26:9:\
    \ no new variables on left side of :=\n/tmp/tmpd88w1oer_test.go:26:24: cannot\
    \ use map[int]string{\u2026}[arr[len(arr) / 2]] (map index expression of type\
    \ string) as type int in argument to append\n/tmp/tmpd88w1oer_test.go:27:12: cannot\
    \ use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    reverse(arr)\n  \
    \  arr := make([]string, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ \"One\"\n        if arr[i] < 10 {\n            arr[i] = fmt.Sprintf(\"%v\",\
    \ arr[i])\n        }\n    }\n    return arr\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n\
    )\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9eh1k63_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    for i := range arr2\
    \ {\n        arr2[i] = arr[i]\n    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n\
    \    arr2 = replaceDigits(arr2)\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppq1ed3xc_test.go:25:5: undefined: sort

    /tmp/tmppq1ed3xc_test.go:26:12: undefined: reverse

    /tmp/tmppq1ed3xc_test.go:27:12: undefined: replaceDigits

    /tmp/tmppq1ed3xc_test.go:28:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    arr.reverse()\n    arr := append([]string{\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    }, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1xolfih7_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmp1xolfih7_test.go:25:9: arr.reverse\
    \ undefined (type []int has no field or method reverse)\n/tmp/tmp1xolfih7_test.go:26:9:\
    \ no new variables on left side of :=\n/tmp/tmp1xolfih7_test.go:26:12: cannot\
    \ use append([]string{\u2026}, arr...) (value of type []string) as type []int\
    \ in assignment\n/tmp/tmp1xolfih7_test.go:26:101: cannot use arr (variable of\
    \ type []int) as type []string in argument to append\n/tmp/tmp1xolfih7_test.go:27:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i := range arr {\n        arr3[i] = arr[i]\n    }\n    sort.Ints(arr3)\n\
    \    for i := range arr3 {\n        if arr3[i] > 9 {\n            arr3[i] = arr3[i]/10\n\
    \            arr3[i] = arr3[i]*10 + arr3[i]%10\n        }\n        if arr3[i]\
    \ > 0 && arr3[i] < 10 {\n            arr2[i] = fmt.Sprintf(\"%s\", arr3[i])\n\
    \        }\n    }\n    for i := range arr2 {\n        arr2[i] = arr2[i][:1] +\
    \ map[int]string{\n            1: \"One\",\n            2: \"Two\",\n        \
    \    3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n     \
    \       6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n  \
    \          9: \"Nine\",\n        }[arr2[i]]\n    }\n    return arr2\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfqbk4ikj_test.go:26:5: undefined: sort

    /tmp/tmpfqbk4ikj_test.go:47:11: cannot use arr2[i] (variable of type string) as
    type int in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        if v < 1 || v > 9 {\n      \
    \      continue\n        }\n        arr2[i] = \"One\"\n        arr3[i] = v\n \
    \   }\n    sort.Ints(arr3)\n    sort.Ints(arr2)\n    for i, v := range arr2 {\n\
    \        arr2[i] = fmt.Sprintf(\"%v\", v)\n    }\n    for i, v := range arr3 {\n\
    \        arr3[i] = v\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2haigf9o_test.go:30:5: undefined: sort

    /tmp/tmp2haigf9o_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr.reverse()\n    arr := []string{}\n    for\
    \ _, v := range arr {\n        arr = append(arr, fmt.Sprintf(\"%s\", map[int]string{1:\
    \ \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7:\
    \ \"Seven\", 8: \"Eight\", 9: \"Nine\"}[v]))\n    }\n    return arr\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis solution does not work for negative numbers. I added a\
    \ solution that works for negative numbers as well.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbgy_iui2_test.go:32:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdxjog8h9_test.go:28:5: undefined: sort

    /tmp/tmpdxjog8h9_test.go:29:12: undefined: reverse

    /tmp/tmpdxjog8h9_test.go:30:12: undefined: replaceDigits

    /tmp/tmpdxjog8h9_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := reverse(arr)\n    for i := range arr {\n        arr[i] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[arr[i]]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3kcsjy6t_test.go:24:5:\
    \ undefined: sort\n/tmp/tmp3kcsjy6t_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmp3kcsjy6t_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmp3kcsjy6t_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmp3kcsjy6t_test.go:26:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp3kcsjy6t_test.go:27:9: no new variables on left side of :=\n/tmp/tmp3kcsjy6t_test.go:27:12:\
    \ undefined: reverse\n/tmp/tmp3kcsjy6t_test.go:29:18: cannot use map[int]string{\u2026\
    }[arr[i]] (map index expression of type string) as type int in assignment\n/tmp/tmp3kcsjy6t_test.go:41:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    arr := reverse(arr)\n\
    \    arr := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpni9dqy1e_test.go:24:9: no new variables on left side of :=

    /tmp/tmpni9dqy1e_test.go:28:5: undefined: sort

    /tmp/tmpni9dqy1e_test.go:30:9: no new variables on left side of :=

    /tmp/tmpni9dqy1e_test.go:30:12: undefined: reverse

    /tmp/tmpni9dqy1e_test.go:31:9: no new variables on left side of :=

    /tmp/tmpni9dqy1e_test.go:31:12: undefined: replaceDigits

    /tmp/tmpni9dqy1e_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    reverse(arr)\n    arr := arr[:len(arr)-1]\n\
    \    arr := append([]string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu89ykrsx_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpu89ykrsx_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpu89ykrsx_test.go:26:5: undefined: reverse\n/tmp/tmpu89ykrsx_test.go:27:9:\
    \ no new variables on left side of :=\n/tmp/tmpu89ykrsx_test.go:28:9: no new variables\
    \ on left side of :=\n/tmp/tmpu89ykrsx_test.go:28:12: cannot use append([]string{\u2026\
    }, arr...) (value of type []string) as type []int in assignment\n/tmp/tmpu89ykrsx_test.go:28:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpu89ykrsx_test.go:29:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n       \
    \ }\n        switch arr[i] {\n        case 1:\n            result[i] = \"One\"\
    \n        case 2:\n            result[i] = \"Two\"\n        case 3:\n        \
    \    result[i] = \"Three\"\n        case 4:\n            result[i] = \"Four\"\n\
    \        case 5:\n            result[i] = \"Five\"\n        case 6:\n        \
    \    result[i] = \"Six\"\n        case 7:\n            result[i] = \"Seven\"\n\
    \        case 8:\n            result[i] = \"Eight\"\n        case 9:\n       \
    \     result[i] = \"Nine\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpwaof3w21_test.go:67: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpwaof3w21_test.go:67: expected\
    \ '[One]', got '[One  ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n  \
    \      tmpwaof3w21_test.go:67: expected '[Three Two One]', got '[One  Three Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpwaof3w21_test.go:67:\
    \ expected '[Nine Eight Four]', got '[Nine Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n    arr\
    \ := append([]string{}, arr...)\n    arr := append([]string{}, \nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl5xraeb__test.go:68:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(ByLength(arr2))\n    arr3 = make([]string, len(arr2))\n\
    \    for i := range arr3 {\n        arr3[i] = by_length_map[arr2[i]]\n    }\n\
    \    return arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpna0wnemi_test.go:28:5: undefined: sort

    /tmp/tmpna0wnemi_test.go:28:15: undefined: ByLength

    /tmp/tmpna0wnemi_test.go:29:5: undefined: arr3

    /tmp/tmpna0wnemi_test.go:30:20: undefined: arr3

    /tmp/tmpna0wnemi_test.go:31:9: undefined: arr3

    /tmp/tmpna0wnemi_test.go:31:19: undefined: by_length_map

    /tmp/tmpna0wnemi_test.go:33:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            j := int(arr[i])\
    \ - 1\n            result[i] = names[j]\n        }\n    }\n    for i := range\
    \ result {\n        result[i] = reverse(result[i])\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo4ymt3ib_test.go:25:25: undefined: names

    /tmp/tmpo4ymt3ib_test.go:29:21: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        if v < 1 || v > 9 {\n      \
    \      continue\n        }\n        arr3[i] = v\n    }\n    sort.Ints(arr3)\n\
    \    for i := 0; i < len(arr); i++ {\n        arr2[i] = names[arr3[i]]\n    }\n\
    \    for i := 0; i < len(arr); i++ {\n        arr2[i] = arr2[i][len(arr2[i])-1]\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_q018_qa_test.go:29:5: undefined: sort

    /tmp/tmp_q018_qa_test.go:31:19: undefined: names

    /tmp/tmp_q018_qa_test.go:34:19: cannot use arr2[i][len(arr2[i]) - 1] (value of
    type byte) as type string in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr.reverse()\n\n    result\
    \ := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyjfjc6vn_test.go:25:5: undefined: sort

    /tmp/tmpyjfjc6vn_test.go:26:9: no new variables on left side of :=

    /tmp/tmpyjfjc6vn_test.go:27:9: arr.reverse undefined (type []int has no field
    or method reverse)

    /tmp/tmpyjfjc6vn_test.go:31:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\n    return arr\n}\n\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphmcccvoq_test.go:25:9:\
    \ no new variables on left side of :=\n/tmp/tmphmcccvoq_test.go:26:9: no new variables\
    \ on left side of :=\n/tmp/tmphmcccvoq_test.go:26:12: cannot use append([]string{\u2026\
    }, arr...) (value of type []string) as type []int in assignment\n/tmp/tmphmcccvoq_test.go:26:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmphmcccvoq_test.go:28:9: no new variables on left side of :=\n/tmp/tmphmcccvoq_test.go:28:12:\
    \ undefined: reverse\n/tmp/tmphmcccvoq_test.go:29:9: no new variables on left\
    \ side of :=\n/tmp/tmphmcccvoq_test.go:29:12: undefined: replaceDigits\n/tmp/tmphmcccvoq_test.go:31:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]string, len(arr))\n    arr2[0] = fmt.Sprintf(\"One\")\n    arr2[1]\
    \ = fmt.Sprintf(\"Two\")\n    arr2[2] = fmt.Sprintf(\"Three\")\n    arr2[3] =\
    \ fmt.Sprintf(\"Four\")\n    arr2[4] = fmt.Sprintf(\"Five\")\n    arr2[5] = fmt.Sprintf(\"\
    Six\")\n    arr2[6] = fmt.Sprintf(\"Seven\")\n    arr2[7] = fmt.Sprintf(\"Eight\"\
    )\n    arr2[8] = fmt.Sprintf(\"Nine\")\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i] = fmt.Sprintf(\"\
    %s\", arr2[i])\n        } else {\n            arr2[i] = fmt.Sprintf(\"%s\", arr2[i+1])\n\
    \        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\npanic: runtime error: index out of range\
    \ [8] with length 8 [recovered]\n\tpanic: runtime error: index out of range [8]\
    \ with length 8\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513700,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513700, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.by_length({0xc0000f5e30, 0x8, 0x0?})\n\t\
    /tmp/tmpqa6tht1l_test.go:33 +0x46f\ncommand-line-arguments_test.TestBy_Length(0x0?)\n\
    \t/tmp/tmpqa6tht1l_test.go:51 +0xd5\ntesting.tRunner(0xc0001924e0, 0x529040)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn84yez88_test.go:67:27: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append(arr, 9-len(arr))\n\
    \n    result := make([]string, len(arr))\n    for i, v := range arr {\n      \
    \  result[i] = names[v]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpoodw730j_test.go:25:5: undefined: sort

    /tmp/tmpoodw730j_test.go:26:9: no new variables on left side of :=

    /tmp/tmpoodw730j_test.go:27:9: no new variables on left side of :=

    /tmp/tmpoodw730j_test.go:31:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr3[i] = arr[i]\n \
    \   }\n    sort.Ints(arr3)\n    for i := 0; i < len(arr); i++ {\n        if arr3[i]\
    \ >= 1 && arr3[i] <= 9 {\n            arr2[i] = fmt.Sprintf(\"%s\", arr3[i])\n\
    \        } else {\n            arr2[i] = \"\"\n        }\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr2[i] == \"\" {\n            arr2[i] =\
    \ \"\"\n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2x9sy0v9_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr := arr[:len(arr)-1]\n    arr := append(arr, arr[len(arr)-1])\n\n   \
    \ arr := append([]string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\n    for i := 0; i < len(arr); i++\
    \ {\n        arr[i] = fmt.Sprintf(\"%v\", arr[i])\n    }\n\n    return arr\n}\n\
    </code>\n<|/ a tags=arrays,sorting,go |>\n<| a tags=arrays,sorting,go |>\n<code>\n\
    package main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppbyx19g0_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltahvmhf_test.go:28:5: undefined: sort

    /tmp/tmpltahvmhf_test.go:29:12: undefined: reverse

    /tmp/tmpltahvmhf_test.go:30:12: undefined: replaceDigits

    /tmp/tmpltahvmhf_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn84yez88_test.go:67:27: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i := range arr\
    \ {\n        arr[i] = arr[i]\n    }\n    sort.Sort(sort.Reverse(arr))\n    arr\
    \ := reverse(arr)\n    arr := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ljf14zf_test.go:21:9: no new variables on left side of :=

    /tmp/tmp1ljf14zf_test.go:25:5: undefined: sort

    /tmp/tmp1ljf14zf_test.go:26:9: no new variables on left side of :=

    /tmp/tmp1ljf14zf_test.go:26:12: undefined: reverse

    /tmp/tmp1ljf14zf_test.go:27:9: no new variables on left side of :=

    /tmp/tmp1ljf14zf_test.go:27:12: undefined: replaceDigits

    /tmp/tmp1ljf14zf_test.go:28:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075326
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append(arr, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n    arr := append(arr, \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\"\
    , \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\")\n    arr\
    \ := append(arr, \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\")\n\n    arr := reverse(arr)\n    arr := arr[:len(arr)-1]\n\
    \    arr := append(arr, \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\")\n    arr := append(arr, \"Twenty\", \"\
    Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\
    )\n    arr := append(arr, \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\")\n    arr := append(arr, \"Twenty\", \"\
    Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\
    )\n    arr := append(arr, \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\")\n    arr := append(arr, \"Twenty\", \"\
    Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\
    )\n    arr := append(arr, \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\")\n    arr := append(arr, \"Twenty\", \"\
    Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\
    )\n    arr := append(arr, \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\")\n    arr := append(arr, \"Twenty\", \"\
    Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\
    )\n    arr := append(arr, \"Twenty\", \"Thirty\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuw6bsjf5_test.go:43:34: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075326
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append(arr, 9) // add 9 to end of array\n\
    \    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")\n    arr := reverse(arr)\n    arr := arr[:len(arr)-1]\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn078d8o2_test.go:24:5: undefined: sort

    /tmp/tmpn078d8o2_test.go:25:9: no new variables on left side of :=

    /tmp/tmpn078d8o2_test.go:26:9: no new variables on left side of :=

    /tmp/tmpn078d8o2_test.go:27:24: cannot use "One" (untyped string constant) as
    int value in argument to append

    /tmp/tmpn078d8o2_test.go:27:31: cannot use "Two" (untyped string constant) as
    int value in argument to append

    /tmp/tmpn078d8o2_test.go:27:38: cannot use "Three" (untyped string constant) as
    int value in argument to append

    /tmp/tmpn078d8o2_test.go:27:47: cannot use "Four" (untyped string constant) as
    int value in argument to append

    /tmp/tmpn078d8o2_test.go:27:55: cannot use "Five" (untyped string constant) as
    int value in argument to append

    /tmp/tmpn078d8o2_test.go:27:63: cannot use "Six" (untyped string constant) as
    int value in argument to append

    /tmp/tmpn078d8o2_test.go:27:70: cannot use "Seven" (untyped string constant) as
    int value in argument to append

    /tmp/tmpn078d8o2_test.go:27:70: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdxjog8h9_test.go:28:5: undefined: sort

    /tmp/tmpdxjog8h9_test.go:29:12: undefined: reverse

    /tmp/tmpdxjog8h9_test.go:30:12: undefined: replaceDigits

    /tmp/tmpdxjog8h9_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075325
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    reverse(arr)\n\n    result\
    \ := make([]string, len(arr))\n    for i, v := range arr {\n        result[i]\
    \ = names[v]\n    }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0efwm99n_test.go:25:5: undefined: sort

    /tmp/tmp0efwm99n_test.go:26:9: no new variables on left side of :=

    /tmp/tmp0efwm99n_test.go:27:5: undefined: reverse

    /tmp/tmp0efwm99n_test.go:31:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    for i := range arr2\
    \ {\n        arr2[i] = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n\
    \    arr3 = make([]string, len(arr))\n    for i := range arr3 {\n        arr3[i]\
    \ = map[int]string{\n            1: \"One\",\n            2: \"Two\",\n      \
    \      3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n   \
    \         6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n\
    \            9: \"Nine\",\n        }[arr2[i]]\n    }\n    return arr3\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr773f5ky_test.go:25:5: undefined: sort

    /tmp/tmpr773f5ky_test.go:26:5: undefined: arr3

    /tmp/tmpr773f5ky_test.go:27:20: undefined: arr3

    /tmp/tmpr773f5ky_test.go:28:9: undefined: arr3

    /tmp/tmpr773f5ky_test.go:40:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigit(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5h17z8w0_test.go:28:5: undefined: sort

    /tmp/tmp5h17z8w0_test.go:29:12: undefined: reverse

    /tmp/tmp5h17z8w0_test.go:30:12: undefined: replaceDigit

    /tmp/tmp5h17z8w0_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr3[i] = arr[i]\n \
    \   }\n    sort.Ints(arr3)\n    for i := 0; i < len(arr); i++ {\n        if arr3[i]\
    \ >= 1 && arr3[i] <= 9 {\n            arr2[i] = fmt.Sprintf(\"%s\", arr3[i])\n\
    \        } else {\n            arr2[i] = \"\"\n        }\n    }\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr2[i] != \"\" {\n            arr2[i] =\
    \ arr2[i][:1] + arr2[i][1:]\n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4r8k9je_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    arr.reverse()\n    arr := arr[:len(arr)/2]\n    arr\
    \ := append([]string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3w_rvoe3_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmp3w_rvoe3_test.go:25:9: arr.reverse\
    \ undefined (type []int has no field or method reverse)\n/tmp/tmp3w_rvoe3_test.go:26:9:\
    \ no new variables on left side of :=\n/tmp/tmp3w_rvoe3_test.go:27:9: no new variables\
    \ on left side of :=\n/tmp/tmp3w_rvoe3_test.go:27:12: cannot use append([]string{\u2026\
    }, arr...) (value of type []string) as type []int in assignment\n/tmp/tmp3w_rvoe3_test.go:27:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp3w_rvoe3_test.go:28:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcuuo3fx_test.go:24:5:\
    \ undefined: sort\n/tmp/tmprcuuo3fx_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmprcuuo3fx_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmprcuuo3fx_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmprcuuo3fx_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmprcuuo3fx_test.go:27:9: no new variables on left side of :=\n/tmp/tmprcuuo3fx_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n    arr3\
    \ = make([]string, len(arr2))\n    for i := range arr3 {\n        arr3[i] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[arr2[i]]\n    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplab087oa_test.go:28:5: undefined: sort

    /tmp/tmplab087oa_test.go:29:5: undefined: arr3

    /tmp/tmplab087oa_test.go:30:20: undefined: arr3

    /tmp/tmplab087oa_test.go:31:9: undefined: arr3

    /tmp/tmplab087oa_test.go:43:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n    arr3\
    \ = make([]string, len(arr))\n    for i := range arr3 {\n        arr3[i] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[arr2[i]]\n    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetcvapst_test.go:28:5: undefined: sort

    /tmp/tmpetcvapst_test.go:29:5: undefined: arr3

    /tmp/tmpetcvapst_test.go:30:20: undefined: arr3

    /tmp/tmpetcvapst_test.go:31:9: undefined: arr3

    /tmp/tmpetcvapst_test.go:43:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    i := 0\n    for\
    \ _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n   \
    \     }\n        result[i] = fmt.Sprintf(\"%v\", v)\n        i++\n    }\n    for\
    \ _, v := range result {\n        result[i] = reverse[v]\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpstqi362i_test.go:31:21: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{}, One, Two, Three, Four,\
    \ Five, Six, Seven, Eight, Nine...)\n    arr := append(arr, arr...)\n    arr :=\
    \ reverse(arr)\n    for _, v := range arr {\n        arr[v] = One[v]\n    }\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpai199jla_test.go:21:9: no new variables on left side of :=

    /tmp/tmpai199jla_test.go:22:5: undefined: sort

    /tmp/tmpai199jla_test.go:23:9: no new variables on left side of :=

    /tmp/tmpai199jla_test.go:24:31: undefined: One

    /tmp/tmpai199jla_test.go:24:36: undefined: Two

    /tmp/tmpai199jla_test.go:24:41: undefined: Three

    /tmp/tmpai199jla_test.go:24:48: undefined: Four

    /tmp/tmpai199jla_test.go:24:54: undefined: Five

    /tmp/tmpai199jla_test.go:24:60: undefined: Six

    /tmp/tmpai199jla_test.go:24:65: undefined: Seven

    /tmp/tmpai199jla_test.go:24:65: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] =\
    \ arr[i]\n    }\n\n    sort.Ints(arr2)\n\n    arr3 := make([]string, len(arr))\n\
    \    for i := range arr3 {\n        arr3[i] = names[arr2[i]]\n    }\n\n    arr4\
    \ = make([]string, len(arr))\n    for i := range arr4 {\n        arr4[i] = names[arr2[i]]\n\
    \    }\n\n    arr5 = make([]string, len(arr))\n    for i := range arr5 {\n   \
    \     arr5[i] = names[arr2[i]]\n    }\n\n    arr6 = make([]string, len(arr))\n\
    \    for i := range arr6 {\n        arr6[i] = names[arr2[i]]\n    }\n\n    arr7\
    \ = make([]string, len(arr))\n    for i := range arr7 {\n        arr7[i] = names[arr2[i]]\n\
    \    }\n\n    arr8 = make([]string, len(arr))\n    for i := range arr8 {\n   \
    \     arr8[i] = names[arr2[i]]\n    }\n\n    arr9 = make([]string, len(arr))\n\
    \    for i := range arr9 {\n        arr9[i] = names[arr2[i]]\n    }\n\n    return\
    \ arr9\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ouiuw1l_test.go:30:5: undefined: sort

    /tmp/tmp3ouiuw1l_test.go:34:19: undefined: names

    /tmp/tmp3ouiuw1l_test.go:37:5: undefined: arr4

    /tmp/tmp3ouiuw1l_test.go:38:20: undefined: arr4

    /tmp/tmp3ouiuw1l_test.go:39:9: undefined: arr4

    /tmp/tmp3ouiuw1l_test.go:39:19: undefined: names

    /tmp/tmp3ouiuw1l_test.go:42:5: undefined: arr5

    /tmp/tmp3ouiuw1l_test.go:43:20: undefined: arr5

    /tmp/tmp3ouiuw1l_test.go:44:9: undefined: arr5

    /tmp/tmp3ouiuw1l_test.go:44:19: undefined: names

    /tmp/tmp3ouiuw1l_test.go:44:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n\n    arr2 = append(arr2, 9)\n    arr2 = append(arr2, 1)\n\n\
    \    sort.Sort(arr2)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2,\
    \ 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2 := append(arr2, 0)\n\n    arr2\
    \ := append(arr2, 0)\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsw4k5fak_test.go:134:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr\
    \ := append([]string{\"One\"}, arr...)\n    arr := append([]string{\"Two\"}, arr...)\n\
    \    arr := append([]string{\"Three\"}, arr...)\n    arr := append([]string{\"\
    Four\"}, arr...)\n    arr := append([]string{\"Five\"}, arr...)\n    arr := append([]string{\"\
    Six\"}, arr...)\n    arr := append([]string{\"Seven\"}, arr...)\n    arr := append([]string{\"\
    Eight\"}, arr...)\n    arr := append([]string{\"Nine\"}, arr...)\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkksje718_test.go:21:5:\
    \ undefined: sort\n/tmp/tmpkksje718_test.go:22:9: no new variables on left side\
    \ of :=\n/tmp/tmpkksje718_test.go:23:9: no new variables on left side of :=\n\
    /tmp/tmpkksje718_test.go:23:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpkksje718_test.go:23:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpkksje718_test.go:24:9: no new variables on left side of :=\n/tmp/tmpkksje718_test.go:24:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpkksje718_test.go:24:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpkksje718_test.go:25:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpkksje718_test.go:25:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpkksje718_test.go:25:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i] = \"One\"\
    \n        } else if arr[i] >= 10 && arr[i] <= 99 {\n            arr2[i] = \"Two\"\
    \n        } else if arr[i] >= 100 && arr[i] <= 999 {\n            arr2[i] = \"\
    Three\"\n        } else if arr[i] >= 1000 && arr[i] <= 9999 {\n            arr2[i]\
    \ = \"Four\"\n        } else if arr[i] >= 10000 && arr[i] <= 99999 {\n       \
    \     arr2[i] = \"Five\"\n        } else if arr[i] >= 100000 && arr[i] <= 999999\
    \ {\n            arr2[i] = \"Six\"\n        } else if arr[i] >= 1000000 && arr[i]\
    \ <= 9999999 {\n            arr2[i] = \"Seven\"\n        } else if arr[i] >= 10000000\
    \ && arr[i] <= 99999999 {\n            arr2[i] = \"Eight\"\n        } else if\
    \ arr[i] >= 100000000 && arr[i] <= 999999999 {\n            arr2[i] = \"Nine\"\
    \n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp977qg3m9_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp977qg3m9_test.go:63: expected '[One]', got '[One  Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp977qg3m9_test.go:63:\
    \ expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp977qg3m9_test.go:63: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := reverse(arr)\n    arr := map[int]string{1: \"One\", 2: \"Two\", 3:\
    \ \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\"\
    , 9: \"Nine\"}\n    arr := []string{}\n    for _, v := range arr {\n        arr\
    \ = append(arr, arr[v])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq8e3qgc4_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpq8e3qgc4_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpq8e3qgc4_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmpq8e3qgc4_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpq8e3qgc4_test.go:26:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpq8e3qgc4_test.go:27:9: no new variables on left side of :=\n/tmp/tmpq8e3qgc4_test.go:27:12:\
    \ undefined: reverse\n/tmp/tmpq8e3qgc4_test.go:28:9: no new variables on left\
    \ side of :=\n/tmp/tmpq8e3qgc4_test.go:28:12: cannot use map[int]string{\u2026\
    } (value of type map[int]string) as type []int in assignment\n/tmp/tmpq8e3qgc4_test.go:29:12:\
    \ cannot use []string{} (value of type []string) as type []int in assignment\n\
    /tmp/tmpq8e3qgc4_test.go:29:12: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n    arr3\
    \ = make([]string, len(arr))\n    for i := range arr3 {\n        arr3[i] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[arr2[i]]\n    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpetcvapst_test.go:28:5: undefined: sort

    /tmp/tmpetcvapst_test.go:29:5: undefined: arr3

    /tmp/tmpetcvapst_test.go:30:20: undefined: arr3

    /tmp/tmpetcvapst_test.go:31:9: undefined: arr3

    /tmp/tmpetcvapst_test.go:43:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    One\"}, arr...)\n    arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"\
    Three\"}, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fv9ovk4_test.go:24:5:\
    \ undefined: sort\n/tmp/tmp0fv9ovk4_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmp0fv9ovk4_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmp0fv9ovk4_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmp0fv9ovk4_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp0fv9ovk4_test.go:27:9: no new variables on left side of :=\n/tmp/tmp0fv9ovk4_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmp0fv9ovk4_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmp0fv9ovk4_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmp0fv9ovk4_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmp0fv9ovk4_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result[i] = \"One\"\
    \n        } else if arr[i] >= 10 && arr[i] <= 99 {\n            result[i] = \"\
    Two\"\n        } else if arr[i] >= 100 && arr[i] <= 999 {\n            result[i]\
    \ = \"Three\"\n        } else if arr[i] >= 1000 && arr[i] <= 9999 {\n        \
    \    result[i] = \"Four\"\n        } else if arr[i] >= 10000 && arr[i] <= 99999\
    \ {\n            result[i] = \"Five\"\n        } else if arr[i] >= 100000 && arr[i]\
    \ <= 999999 {\n            result[i] = \"Six\"\n        } else if arr[i] >= 1000000\
    \ && arr[i] <= 9999999 {\n            result[i] = \"Seven\"\n        } else if\
    \ arr[i] >= 10000000 && arr[i] <= 99999999 {\n            result[i] = \"Eight\"\
    \n        } else if arr[i] >= 100000000 && arr[i] <= 999999999 {\n           \
    \ result[i] = \"Nine\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp_m2482bm_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp_m2482bm_test.go:63: expected '[One]', got '[One  Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp_m2482bm_test.go:63:\
    \ expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp_m2482bm_test.go:63: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    arr3 := make([]string,\
    \ len(arr))\n    arr4 := make([]string, len(arr))\n    arr5 := make([]string,\
    \ len(arr))\n    arr6 := make([]string, len(arr))\n    arr7 := make([]string,\
    \ len(arr))\n    arr8 := make([]string, len(arr))\n    arr9 := make([]string,\
    \ len(arr))\n    arr10 := make([]string, len(arr))\n    arr11 := make([]string,\
    \ len(arr))\n    arr12 := make([]string, len(arr))\n    arr13 := make([]string,\
    \ len(arr))\n    arr14 := make([]string, len(arr))\n    arr15 := make([]string,\
    \ len(arr))\n    arr16 := make([]string, len(arr))\n    arr17 := make([]string,\
    \ len(arr))\n    arr18 := make([]string, len(arr))\n    arr19 := make([]string,\
    \ len(arr))\n    arr20 := make([]string, len(arr))\n    arr21 := make([]string,\
    \ len(arr))\n    arr22 := make([]string, len(arr))\n    arr23 := make([]string,\
    \ len(arr))\n    arr24 := make([]string, len(arr))\n    arr25 := make([]string,\
    \ len(arr))\n    arr26 := make([]string, len(arr))\n    arr27 := make([]string,\
    \ len(arr))\n    arr28 := make([]string, len(arr))\n    arr29 := make([]string,\
    \ len(arr))\n    arr30 := make([]string, len(arr))\n    arr31 := make([]string,\
    \ len(arr))\n    arr32 := make([]string, len(arr))\n    arr33 := make([]string,\
    \ len(arr))\n    arr34 := make([]string, len(arr))\n    arr35 := make([]string,\
    \ len(arr))\n    arr36 := make([]string, len(arr))\n    arr37 := make([]string,\
    \ len(arr))\n    arr38 := make([]string, len(arr))\n    arr39 := make([]string,\
    \ len(arr))\n    arr40 := make([]string, len(arr))\n    arr41 := make([]string,\
    \ len(arr))\n    arr42 := make([]string, len(arr))\n    arr43 := make([]string,\
    \ len(arr))\n    arr\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpywn2v1n8_test.go:64:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    arr2 := make([]int, len(arr))\n    for i, v := range\
    \ arr {\n        arr2[i] = v\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n\
    \    arr2 := make([]string, len(arr))\n    for i, v := range arr2 {\n        arr2[i]\
    \ = name[v]\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprl916i8t_test.go:24:9: no new variables on left side of :=

    /tmp/tmprl916i8t_test.go:29:5: undefined: sort

    /tmp/tmprl916i8t_test.go:30:10: no new variables on left side of :=

    /tmp/tmprl916i8t_test.go:30:13: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmprl916i8t_test.go:32:19: undefined: name

    /tmp/tmprl916i8t_test.go:34:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append(arr, \"One\")\n    arr := append(arr,\
    \ \"Two\")\n    arr := append(arr, \"Three\")\n    arr := append(arr, \"Four\"\
    )\n    arr := append(arr, \"Five\")\n    arr := append(arr, \"Six\")\n    arr\
    \ := append(arr, \"Seven\")\n    arr := append(arr, \"Eight\")\n    arr := append(arr,\
    \ \"Nine\")\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6o_fmgln_test.go:24:5: undefined: sort

    /tmp/tmp6o_fmgln_test.go:25:9: no new variables on left side of :=

    /tmp/tmp6o_fmgln_test.go:26:9: no new variables on left side of :=

    /tmp/tmp6o_fmgln_test.go:26:24: cannot use "One" (untyped string constant) as
    int value in argument to append

    /tmp/tmp6o_fmgln_test.go:27:9: no new variables on left side of :=

    /tmp/tmp6o_fmgln_test.go:27:24: cannot use "Two" (untyped string constant) as
    int value in argument to append

    /tmp/tmp6o_fmgln_test.go:28:9: no new variables on left side of :=

    /tmp/tmp6o_fmgln_test.go:28:24: cannot use "Three" (untyped string constant) as
    int value in argument to append

    /tmp/tmp6o_fmgln_test.go:29:9: no new variables on left side of :=

    /tmp/tmp6o_fmgln_test.go:29:24: cannot use "Four" (untyped string constant) as
    int value in argument to append

    /tmp/tmp6o_fmgln_test.go:29:9: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := arr[:0]\n    for _, v := range arr {\n       \
    \ if v >= 1 && v <= 9 {\n            arr = append(arr, fmt.Sprintf(\"%d\", v))\n\
    \        }\n    }\n    arr = append(arr, \"One\")\n    arr = append(arr, \"Two\"\
    )\n    arr = append(arr, \"Three\")\n    arr = append(arr, \"Four\")\n    arr\
    \ = append(arr, \"Five\")\n    arr = append(arr, \"Six\")\n    arr = append(arr,\
    \ \"Seven\")\n    arr = append(arr, \"Eight\")\n    arr = append(arr, \"Nine\"\
    )\n    arr = append(arr, \"Zero\")\n    arr = append(arr, \"One\")\n    arr =\
    \ append(arr, \"Two\")\n    arr = append(arr, \"Three\")\n    arr = append(arr,\
    \ \"Four\")\n    arr = append(arr, \"Five\")\n    arr = append(arr, \"Six\")\n\
    \    arr = append(arr, \"Seven\")\n    arr = append(arr, \"Eight\")\n    arr =\
    \ append(arr, \"Nine\")\n    arr = append(arr, \"Zero\")\n    arr = append(arr,\
    \ \"One\")\n    arr = append(arr, \"Two\")\n    arr = append(arr, \"Three\")\n\
    \    arr = append(arr, \"Four\")\n    arr = append(arr, \"Five\")\n    arr = append(arr,\
    \ \"Six\")\n    arr = append(arr, \"Seven\")\n    arr = append(arr, \"Eight\"\
    )\n    arr = append(arr, \"Nine\")\n    arr = append(arr, \"Zero\")\n    arr =\
    \ append(arr, \"One\")\n    arr = append(arr, \"Two\")\n    arr = append(arr,\
    \ \"Three\")\n    arr = append(arr, \"Four\")\n    arr = append(arr, \"Five\"\
    )\n    arr = append(arr, \"Six\")\n    arr = append(arr, \"Seven\")\n    arr =\
    \ append(arr, \"Eight\")\n    arr = append(arr, \"Nine\")\n    arr = append(arr,\
    \ \"Zero\")\n    arr = append(arr, \"One\")\n    arr = append(arr, \"Two\")\n\
    \    arr = append(arr, \"Three\")\n    arr = append(arr, \"Four\")\n    arr =\
    \ append(arr, \"Five\")\n    arr = append(arr, \"Six\")\n    arr = append(arr,\
    \ \"Seven\")\n    arr = append(arr, \"Eight\")\n    arr = append(arr, \"Nine\"\
    )\n    arr = append(arr, \"Zero\")\n    arr = append(arr, \"One\")\n    arr =\
    \ append(arr, \"Two\")\n    arr = append(arr, \"Three\")\n    arr = append(arr,\
    \ \"Four\")\n    arr = append(arr, \"Five\")\n    arr = append(arr, \"Six\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7kvf66ls_test.go:82:23: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    i := 0\n    for\
    \ _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result[i] =\
    \ fmt.Sprintf(\"%s\", v)\n        } else {\n            result[i] = \"One\"\n\
    \        }\n        i++\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpb7ymy5rs_test.go:25:25: fmt.Sprintf format %s has arg v of wrong type
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := append([]int{},\
    \ arr...)\n    sort.Ints(arr)\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqmfktdox_test.go:81:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := replaceDigits(arr)\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt79sen95_test.go:21:9: no new variables on left side of :=

    /tmp/tmpt79sen95_test.go:22:5: undefined: sort

    /tmp/tmpt79sen95_test.go:23:9: no new variables on left side of :=

    /tmp/tmpt79sen95_test.go:23:12: undefined: reverse

    /tmp/tmpt79sen95_test.go:24:9: no new variables on left side of :=

    /tmp/tmpt79sen95_test.go:24:12: undefined: replaceDigits

    /tmp/tmpt79sen95_test.go:25:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n      \
    \  }\n        arr2[i] = \"One\"\n        if arr[i] >= 2 {\n            arr2[i]\
    \ = \"Two\"\n            if arr[i] >= 3 {\n                arr2[i] = \"Three\"\
    \n                if arr[i] >= 4 {\n                    arr2[i] = \"Four\"\n \
    \                   if arr[i] >= 5 {\n                        arr2[i] = \"Five\"\
    \n                        if arr[i] >= 6 {\n                            arr2[i]\
    \ = \"Six\"\n                            if arr[i] >= 7 {\n                  \
    \              arr2[i] = \"Seven\"\n                                if arr[i]\
    \ >= 8 {\n                                    arr2[i] = \"Eight\"\n          \
    \                          if arr[i] >= 9 {\n                                \
    \        arr2[i] = \"Nine\"\n                                    }\n         \
    \                       }\n                            }\n                   \
    \     }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpg4561qny_test.go:72: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[Two One One Four Five Eight Two Three]'\n    --- FAIL:\
    \ TestBy_Length/test_num__2 (0.00s)\n        tmpg4561qny_test.go:72: expected\
    \ '[One]', got '[One  ]'\n    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n  \
    \      tmpg4561qny_test.go:72: expected '[Three Two One]', got '[One  Three Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpg4561qny_test.go:72:\
    \ expected '[Nine Eight Four]', got '[Nine Four Eight]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(ByLength(arr2))\n    arr3 = make([]string, len(arr))\n \
    \   for i := range arr3 {\n        arr3[i] = map[int]string{\n            1: \"\
    One\",\n            2: \"Two\",\n            3: \"Three\",\n            4: \"\
    Four\",\n            5: \"Five\",\n            6: \"Six\",\n            7: \"\
    Seven\",\n            8: \"Eight\",\n            9: \"Nine\",\n        }[arr2[i]]\n\
    \    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp19z450n1_test.go:28:5: undefined: sort

    /tmp/tmp19z450n1_test.go:28:15: undefined: ByLength

    /tmp/tmp19z450n1_test.go:29:5: undefined: arr3

    /tmp/tmp19z450n1_test.go:30:20: undefined: arr3

    /tmp/tmp19z450n1_test.go:31:9: undefined: arr3

    /tmp/tmp19z450n1_test.go:43:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n\n    sort.Sort(arr)\n    arr := reverse(arr)\n\n    result := make([]string,\
    \ len(arr))\n    for i := range arr {\n        result[i] = names[arr[i]-1]\n \
    \   }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfxs6g78i_test.go:25:9: no new variables on left side of :=

    /tmp/tmpfxs6g78i_test.go:30:5: undefined: sort

    /tmp/tmpfxs6g78i_test.go:31:9: no new variables on left side of :=

    /tmp/tmpfxs6g78i_test.go:31:12: undefined: reverse

    /tmp/tmpfxs6g78i_test.go:35:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n\
    \    arr := append([]string{}, names[:len(arr)]...)\n    for _, v := range arr\
    \ {\n        if v < 1 || v > 9 {\n            continue\n        }\n        arr[len(arr)-1]\
    \ = names[v-1]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7a8zc3i_test.go:24:9: no new variables on left side of :=

    /tmp/tmpq7a8zc3i_test.go:25:5: undefined: sort

    /tmp/tmpq7a8zc3i_test.go:26:9: no new variables on left side of :=

    /tmp/tmpq7a8zc3i_test.go:27:9: no new variables on left side of :=

    /tmp/tmpq7a8zc3i_test.go:27:12: cannot use append([]string{}, names[:len(arr)]...)
    (value of type []string) as type []int in assignment

    /tmp/tmpq7a8zc3i_test.go:27:31: undefined: names

    /tmp/tmpq7a8zc3i_test.go:32:27: undefined: names

    /tmp/tmpq7a8zc3i_test.go:34:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ result := make([]string, len(arr))\n    min := 1\n    max := 9\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] < min || arr[i] > max {\n        \
    \    continue\n        }\n        result[i] = names[arr[i]]\n    }\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < min || arr[i] > max {\n     \
    \       continue\n        }\n        result[i] = names[arr[i]]\n    }\n    return\
    \ result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxh9kfmqw_test.go:32:21: undefined: names

    /tmp/tmpxh9kfmqw_test.go:38:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    One\"}, arr...)\n    arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"\
    Three\"}, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjnhr3nds_test.go:25:5:\
    \ undefined: sort\n/tmp/tmpjnhr3nds_test.go:26:9: no new variables on left side\
    \ of :=\n/tmp/tmpjnhr3nds_test.go:27:9: no new variables on left side of :=\n\
    /tmp/tmpjnhr3nds_test.go:27:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpjnhr3nds_test.go:27:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpjnhr3nds_test.go:28:9: no new variables on left side of :=\n/tmp/tmpjnhr3nds_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpjnhr3nds_test.go:28:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpjnhr3nds_test.go:29:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpjnhr3nds_test.go:29:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpjnhr3nds_test.go:29:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    i := 0\n    for\
    \ _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n   \
    \     }\n        result[i] = fmt.Sprintf(\"%v\", v)\n        i++\n    }\n    for\
    \ i := 0; i < len(result); i++ {\n        result[i] = result[i][1:]\n    }\n \
    \   return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513700, 0xc0001d2000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513700,\
    \ 0xc0001d2000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.by_length({0xc000189de0, 0x3, 0x0?})\n\t\
    /tmp/tmp0da62h16_test.go:31 +0x17f\ncommand-line-arguments_test.TestBy_Length(0x0?)\n\
    \t/tmp/tmp0da62h16_test.go:45 +0x16a\ntesting.tRunner(0xc00019b040, 0x529038)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjw9cvlrv_test.go:25:5: undefined: sort

    /tmp/tmpjw9cvlrv_test.go:26:9: no new variables on left side of :=

    /tmp/tmpjw9cvlrv_test.go:26:12: undefined: reverse

    /tmp/tmpjw9cvlrv_test.go:27:9: no new variables on left side of :=

    /tmp/tmpjw9cvlrv_test.go:27:12: undefined: replaceDigits

    /tmp/tmpjw9cvlrv_test.go:29:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    reverse(arr)\n  \
    \  arr := make([]string, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ \"One\"\n        if arr[i] > 9 {\n            arr[i] = fmt.Sprintf(\"%v\", arr[i]-10)\n\
    \        }\n    }\n    return arr\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfo83ousm_test.go:40:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    copy(arr, arr)\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    arr := make([]string, len(arr))\n    for i, v := range arr {\n        if\
    \ v < 1 || v > 9 {\n            continue\n        }\n        arr[i] = \"One\"\n\
    \        arr[v-1] = \"Two\"\n        arr[v-2] = \"Three\"\n        arr[v-3] =\
    \ \"Four\"\n        arr[v-4] = \"Five\"\n        arr[v-5] = \"Six\"\n        arr[v-6]\
    \ = \"Seven\"\n        arr[v-7] = \"Eight\"\n        arr[v-8] = \"Nine\"\n   \
    \ }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplkabb74i_test.go:24:9: no new variables on left side of :=

    /tmp/tmplkabb74i_test.go:26:5: undefined: sort

    /tmp/tmplkabb74i_test.go:27:9: no new variables on left side of :=

    /tmp/tmplkabb74i_test.go:27:12: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmplkabb74i_test.go:32:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmplkabb74i_test.go:33:20: cannot use "Two" (untyped string constant) as
    int value in assignment

    /tmp/tmplkabb74i_test.go:34:20: cannot use "Three" (untyped string constant) as
    int value in assignment

    /tmp/tmplkabb74i_test.go:35:20: cannot use "Four" (untyped string constant) as
    int value in assignment

    /tmp/tmplkabb74i_test.go:36:20: cannot use "Five" (untyped string constant) as
    int value in assignment

    /tmp/tmplkabb74i_test.go:37:20: cannot use "Six" (untyped string constant) as
    int value in assignment

    /tmp/tmplkabb74i_test.go:37:20: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    reverse(arr)\n    arr :=\
    \ arr[:len(arr)/2]\n    arr := append([]string{\"One\"}, arr...)\n    arr := append([]string{\"\
    Two\"}, arr...)\n    arr := append([]string{\"Three\"}, arr...)\n    arr := append([]string{\"\
    Four\"}, arr...)\n    arr := append([]string{\"Five\"}, arr...)\n    arr := append([]string{\"\
    Six\"}, arr...)\n    arr := append([]string{\"Seven\"}, arr...)\n    arr := append([]string{\"\
    Eight\"}, arr...)\n    arr := append([]string{\"Nine\"}, arr...)\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu16rjzim_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpu16rjzim_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpu16rjzim_test.go:26:5: undefined: reverse\n/tmp/tmpu16rjzim_test.go:27:9:\
    \ no new variables on left side of :=\n/tmp/tmpu16rjzim_test.go:28:9: no new variables\
    \ on left side of :=\n/tmp/tmpu16rjzim_test.go:28:12: cannot use append([]string{\u2026\
    }, arr...) (value of type []string) as type []int in assignment\n/tmp/tmpu16rjzim_test.go:28:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpu16rjzim_test.go:29:9: no new variables on left side of :=\n/tmp/tmpu16rjzim_test.go:29:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpu16rjzim_test.go:29:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpu16rjzim_test.go:29:9:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075330
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    One\"}, arr...)\n    arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"\
    Three\"}, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbe5obr7v_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpbe5obr7v_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpbe5obr7v_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmpbe5obr7v_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpbe5obr7v_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpbe5obr7v_test.go:27:9: no new variables on left side of :=\n/tmp/tmpbe5obr7v_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpbe5obr7v_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpbe5obr7v_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpbe5obr7v_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpbe5obr7v_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075330
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := replaceDigits(arr)\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt79sen95_test.go:21:9: no new variables on left side of :=

    /tmp/tmpt79sen95_test.go:22:5: undefined: sort

    /tmp/tmpt79sen95_test.go:23:9: no new variables on left side of :=

    /tmp/tmpt79sen95_test.go:23:12: undefined: reverse

    /tmp/tmpt79sen95_test.go:24:9: no new variables on left side of :=

    /tmp/tmpt79sen95_test.go:24:12: undefined: replaceDigits

    /tmp/tmpt79sen95_test.go:25:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}, arr...)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3cvj9dm3_test.go:25:5:\
    \ undefined: sort\n/tmp/tmp3cvj9dm3_test.go:26:9: no new variables on left side\
    \ of :=\n/tmp/tmp3cvj9dm3_test.go:27:9: no new variables on left side of :=\n\
    /tmp/tmp3cvj9dm3_test.go:27:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmp3cvj9dm3_test.go:27:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp3cvj9dm3_test.go:28:9: no new variables on left side of :=\n/tmp/tmp3cvj9dm3_test.go:28:12:\
    \ undefined: reverse\n/tmp/tmp3cvj9dm3_test.go:29:9: no new variables on left\
    \ side of :=\n/tmp/tmp3cvj9dm3_test.go:29:12: undefined: replaceDigits\n/tmp/tmp3cvj9dm3_test.go:31:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n\
    /tmp/tmp3cvj9dm3_test.go:31:12: too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075330
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := reverse(arr)\n  \
    \  arr := []string{}\n    for _, v := range arr {\n        arr = append(arr, name_by_length(v))\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz950fys7_test.go:24:9: no new variables on left side of :=

    /tmp/tmpz950fys7_test.go:25:5: undefined: sort

    /tmp/tmpz950fys7_test.go:26:9: no new variables on left side of :=

    /tmp/tmpz950fys7_test.go:26:12: undefined: reverse

    /tmp/tmpz950fys7_test.go:27:9: no new variables on left side of :=

    /tmp/tmpz950fys7_test.go:27:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmpz950fys7_test.go:29:27: undefined: name_by_length

    /tmp/tmpz950fys7_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr2 := make([]string, len(arr))\n    arr2[0] = fmt.Sprintf(\"One\")\n    arr2[1]\
    \ = fmt.Sprintf(\"Two\")\n    arr2[2] = fmt.Sprintf(\"Three\")\n    arr2[3] =\
    \ fmt.Sprintf(\"Four\")\n    arr2[4] = fmt.Sprintf(\"Five\")\n    arr2[5] = fmt.Sprintf(\"\
    Six\")\n    arr2[6] = fmt.Sprintf(\"Seven\")\n    arr2[7] = fmt.Sprintf(\"Eight\"\
    )\n    arr2[8] = fmt.Sprintf(\"Nine\")\n\n    arr3 := make([]int, len(arr))\n\
    \    for i := 0; i < len(arr); i++ {\n        arr3[i] = arr[i]\n    }\n\n    arr3\
    \ := append(arr3, 9)\n    arr3 := append(arr3, 1)\n\n    arr3 := append(arr3,\
    \ arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\
    \n    arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n \
    \   arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n   \
    \ arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3\
    \ := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3 :=\
    \ append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3,\
    \ arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\
    \n    arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n \
    \   arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n   \
    \ arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3\
    \ := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3 :=\
    \ append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3,\
    \ arr2...)\n\n    arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\n\
    \n    arr3 := append(arr3, arr2...)\n\n    arr3 := append(arr3, arr2...)\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo72wdf0x_test.go:105:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpn4vqkx_test.go:24:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:28:5: undefined: sort

    /tmp/tmpzpn4vqkx_test.go:29:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:29:12: undefined: reverse

    /tmp/tmpzpn4vqkx_test.go:30:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:30:12: undefined: replaceDigits

    /tmp/tmpzpn4vqkx_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(ByLength(arr2))\n    arr3 = make([]string, len(arr))\n \
    \   for i := range arr3 {\n        arr3[i] = names[arr2[i]]\n    }\n    return\
    \ arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqkikwni7_test.go:28:5: undefined: sort

    /tmp/tmpqkikwni7_test.go:28:15: undefined: ByLength

    /tmp/tmpqkikwni7_test.go:29:5: undefined: arr3

    /tmp/tmpqkikwni7_test.go:30:20: undefined: arr3

    /tmp/tmpqkikwni7_test.go:31:9: undefined: arr3

    /tmp/tmpqkikwni7_test.go:31:19: undefined: names

    /tmp/tmpqkikwni7_test.go:33:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    i := 0\n    for\
    \ _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result[i] =\
    \ fmt.Sprintf(\"%v\", v)\n        } else {\n            result[i] = \"One\"\n\
    \        }\n        i++\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpcp2mun1a_test.go:51: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpcp2mun1a_test.go:51: expected '[One]', got '[1 One One]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpcp2mun1a_test.go:51:\
    \ expected '[Three Two One]', got '[1 One 3 2]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpcp2mun1a_test.go:51: expected '[Nine Eight Four]', got '[9\
    \ 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    arr4 := make([]int, len(arr))\n    arr5 := make([]int, len(arr))\n\
    \    arr6 := make([]int, len(arr))\n    arr7 := make([]int, len(arr))\n    arr8\
    \ := make([]int, len(arr))\n    arr9 := make([]int, len(arr))\n    arr10 := make([]int,\
    \ len(arr))\n    arr11 := make([]int, len(arr))\n    arr12 := make([]int, len(arr))\n\
    \    arr13 := make([]int, len(arr))\n    arr14 := make([]int, len(arr))\n    arr15\
    \ := make([]int, len(arr))\n    arr16 := make([]int, len(arr))\n    arr17 := make([]int,\
    \ len(arr))\n    arr18 := make([]int, len(arr))\n    arr19 := make([]int, len(arr))\n\
    \    arr20 := make([]int, len(arr))\n    arr21 := make([]int, len(arr))\n    arr22\
    \ := make([]int, len(arr))\n    arr23 := make([]int, len(arr))\n    arr24 := make([]int,\
    \ len(arr))\n    arr25 := make([]int, len(arr))\n    arr26 := make([]int, len(arr))\n\
    \    arr27 := make([]int, len(arr))\n    arr28 := make([]int, len(arr))\n    arr29\
    \ := make([]int, len(arr))\n    arr30 := make([]int, len(arr))\n    arr31 := make([]int,\
    \ len(arr))\n    arr32 := make([]int, len(arr))\n    arr33 := make([]int, len(arr))\n\
    \    arr34 := make([]int, len(arr))\n    arr35 := make([]int, len(arr))\n    arr36\
    \ := make([]int, len(arr))\n    arr37 := make([]int, len(arr))\n    arr38 := make([]int,\
    \ len(arr))\n    arr39 := make([]int, len(arr))\n    arr40 := make([]int, len(arr))\n\
    \    arr41 := make([]int, len(arr))\n    arr42 := make([]int, len(arr))\n    arr43\
    \ := make([]int, len(arr))\n    arr\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3mr1ekhn_test.go:64:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzfxc0whb_test.go:72:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075329
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n    arr3\
    \ = make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n        arr3[i]\
    \ = map[int]string{\n            1: \"One\",\n            2: \"Two\",\n      \
    \      3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n   \
    \         6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n\
    \            9: \"Nine\",\n        }[arr2[i]]\n    }\n    return arr3\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2jldjyxm_test.go:28:5: undefined: sort

    /tmp/tmp2jldjyxm_test.go:29:5: undefined: arr3

    /tmp/tmp2jldjyxm_test.go:31:9: undefined: arr3

    /tmp/tmp2jldjyxm_test.go:43:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigit(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvxinb7r8_test.go:24:9: no new variables on left side of :=

    /tmp/tmpvxinb7r8_test.go:28:5: undefined: sort

    /tmp/tmpvxinb7r8_test.go:29:9: no new variables on left side of :=

    /tmp/tmpvxinb7r8_test.go:29:12: undefined: reverse

    /tmp/tmpvxinb7r8_test.go:30:9: no new variables on left side of :=

    /tmp/tmpvxinb7r8_test.go:30:12: undefined: replaceDigit

    /tmp/tmpvxinb7r8_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    for _, v := range arr {\n \
    \       if v < 1 || v > 9 {\n            continue\n        }\n        result :=\
    \ append(result, fmt.Sprintf(\"%v\", v))\n    }\n    for i := len(result) - 1;\
    \ i >= 0; i-- {\n        result[i], result[len(result)-i-1] = result[len(result)-i-1],\
    \ result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_dartyt0_test.go:26:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Sort(arr)\n    rev := make([]int, len(arr))\n    for i\
    \ := range arr {\n        rev[arr[i]-1] = i\n    }\n    result := make([]string,\
    \ len(rev))\n    for i := range rev {\n        result[rev[i]] = fmt.Sprintf(\"\
    %d\", i)\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7i8xoggo_test.go:24:9: no new variables on left side of :=

    /tmp/tmp7i8xoggo_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    res := make([]string,\
    \ len(arr))\n    for i := range arr {\n        res[i] = \"One\"\n        if arr[i]\
    \ > 9 {\n            res[i] = \"Nine\"\n            arr[i] -= 10\n        }\n\
    \        if arr[i] > 8 {\n            res[i] = \"Eight\"\n            arr[i] -=\
    \ 8\n        }\n        if arr[i] > 7 {\n            res[i] = \"Seven\"\n    \
    \        arr[i] -= 7\n        }\n        if arr[i] > 6 {\n            res[i] =\
    \ \"Six\"\n            arr[i] -= 6\n        }\n        if arr[i] > 5 {\n     \
    \       res[i] = \"Five\"\n            arr[i] -= 5\n        }\n        if arr[i]\
    \ > 4 {\n            res[i] = \"Four\"\n            arr[i] -= 4\n        }\n \
    \       if arr[i] > 3 {\n            res[i] = \"Three\"\n            arr[i] -=\
    \ 3\n        }\n        if arr[i] > 2 {\n            res[i] = \"Two\"\n      \
    \      arr[i] -= 2\n        }\n        if arr[i] > 1 {\n            res[i] = \"\
    One\"\n            arr[i] -= 1\n        }\n    }\n    return res\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6zdtionw_test.go:24:9: no new variables on left side of :=

    /tmp/tmp6zdtionw_test.go:28:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcuuo3fx_test.go:24:5:\
    \ undefined: sort\n/tmp/tmprcuuo3fx_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmprcuuo3fx_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmprcuuo3fx_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmprcuuo3fx_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmprcuuo3fx_test.go:27:9: no new variables on left side of :=\n/tmp/tmprcuuo3fx_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append(arr, 9)\n\
    \    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"Zero\")\n    arr :=\
    \ append(arr, \"\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphbduh_qx_test.go:72:24: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075330
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := make([]int, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ arr[i] + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzv59noa0_test.go:24:9: no new variables on left side of :=

    /tmp/tmpzv59noa0_test.go:28:5: undefined: sort

    /tmp/tmpzv59noa0_test.go:29:9: no new variables on left side of :=

    /tmp/tmpzv59noa0_test.go:29:12: undefined: reverse

    /tmp/tmpzv59noa0_test.go:30:9: no new variables on left side of :=

    /tmp/tmpzv59noa0_test.go:30:12: undefined: replaceDigits

    /tmp/tmpzv59noa0_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr2 := make([]int, len(arr))\n    arr2 := append(arr2, arr...)\n    sort.Ints(arr2)\n\
    \n    arr3 := make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] >= 1 && arr[i] <= 9 {\n            arr3[i] = \"One\"\n    \
    \    } else if arr[i] >= 10 && arr[i] <= 99 {\n            arr3[i] = \"Two\"\n\
    \        } else if arr[i] >= 100 && arr[i] <= 999 {\n            arr3[i] = \"\
    Three\"\n        } else if arr[i] >= 1000 && arr[i] <= 9999 {\n            arr3[i]\
    \ = \"Four\"\n        } else if arr[i] >= 10000 && arr[i] <= 99999 {\n       \
    \     arr3[i] = \"Five\"\n        } else if arr[i] >= 100000 && arr[i] <= 999999\
    \ {\n            arr3[i] = \"Six\"\n        } else if arr[i] >= 1000000 && arr[i]\
    \ <= 999999999 {\n            arr3[i] = \"Seven\"\n        } else if arr[i] >=\
    \ 10000000 && arr[i] <= 99999999 {\n            arr3[i] = \"Eight\"\n        }\
    \ else if arr[i] >= 100000000 && arr[i] <= 99999999999 {\n            arr3[i]\
    \ = \"Nine\"\n        }\n    }\n\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsekm7hmt_test.go:26:10: no new variables on left side of :=

    /tmp/tmpsekm7hmt_test.go:27:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i := range arr {\n        if arr[i] < 1 || arr[i] > 9 {\n\
    \            continue\n        }\n        arr2[len(arr2)-i-1] = name[arr[i]]\n\
    \    }\n    for i := range arr2 {\n        arr3[len(arr3)-i-1] = arr2[i]\n   \
    \ }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1te82pn_test.go:27:31: undefined: name

    /tmp/tmpo1te82pn_test.go:30:31: cannot use arr2[i] (variable of type string) as
    type int in assignment

    /tmp/tmpo1te82pn_test.go:32:12: cannot use arr3 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr2 := make([]int, len(arr))\n    for i :=\
    \ 0; i < len(arr); i++ {\n        arr2[i] = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n\
    \    arr3 := make([]string, len(arr))\n    for i := 0; i < len(arr); i++ {\n \
    \       arr3[i] = map[int]string{\n            1: \"One\",\n            2: \"\
    Two\",\n            3: \"Three\",\n            4: \"Four\",\n            5: \"\
    Five\",\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"\
    Eight\",\n            9: \"Nine\",\n        }[arr2[i]]\n    }\n    return arr3\n\
    }\n</code>\n<|/ a tags=go,sorting,arrays |>\n<| c |>\nThis doesn't work if the\
    \ array has negative numbers. Try `by_length([]int{1, -1, 55})`.\n<|/ c |>\n<|\
    \ c |>\nI added a version that works with negative numbers. I tested it and it\
    \ works.\n<|/ c |>\n<| c |>\nI added a version that works with negative numbers.\
    \ I tested it and it works.\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with negative numbers. I tested it and it works.\n<|/ c |>\n<| a\
    \ dscore=5 |>\nI wrote a package for sorting arrays of strings and ints in golang.\n\
    <code>\npackage main\n\nimport (\n    \"fmt\"\n    \"sort\"\n)\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7mhyc55d_test.go:46:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := reverse(arr)\n    arr := replaceDigits(arr)\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppj6uhxwn_test.go:24:9: no new variables on left side of :=

    /tmp/tmppj6uhxwn_test.go:24:12: undefined: reverse

    /tmp/tmppj6uhxwn_test.go:25:9: no new variables on left side of :=

    /tmp/tmppj6uhxwn_test.go:25:12: undefined: replaceDigits

    /tmp/tmppj6uhxwn_test.go:26:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr.reverse()\n    arr := []string{}\n    for\
    \ _, v := range arr {\n        arr = append(arr, name[v])\n    }\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpib4hd1oo_test.go:24:5: undefined: sort

    /tmp/tmpib4hd1oo_test.go:25:9: no new variables on left side of :=

    /tmp/tmpib4hd1oo_test.go:26:9: arr.reverse undefined (type []int has no field
    or method reverse)

    /tmp/tmpib4hd1oo_test.go:27:9: no new variables on left side of :=

    /tmp/tmpib4hd1oo_test.go:27:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmpib4hd1oo_test.go:29:27: undefined: name

    /tmp/tmpib4hd1oo_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1]--\n    arr := append([]string{\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"}, arr...)\n    for i := 0; i < len(arr); i++ {\n        arr[i] = fmt.Sprintf(\"\
    %v\", arr[i])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjgvk87za_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmpjgvk87za_test.go:26:9: no new variables\
    \ on left side of :=\n/tmp/tmpjgvk87za_test.go:26:12: cannot use append([]string{\u2026\
    }, arr...) (value of type []string) as type []int in assignment\n/tmp/tmpjgvk87za_test.go:26:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpjgvk87za_test.go:28:18: cannot use fmt.Sprintf(\"%v\", arr[i]) (value\
    \ of type string) as type int in assignment\n/tmp/tmpjgvk87za_test.go:30:12: cannot\
    \ use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i := range arr\
    \ {\n        arr[i] = arr[i]\n    }\n    sort.Ints(arr)\n    reverse(arr)\n  \
    \  arr := make([]string, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ map[int]string{\n            1: \"One\",\n            2: \"Two\",\n        \
    \    3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n     \
    \       6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n  \
    \          9: \"Nine\",\n        }[arr[i]]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpujp_uuq__test.go:21:9:\
    \ no new variables on left side of :=\n/tmp/tmpujp_uuq__test.go:25:5: undefined:\
    \ sort\n/tmp/tmpujp_uuq__test.go:26:5: undefined: reverse\n/tmp/tmpujp_uuq__test.go:27:9:\
    \ no new variables on left side of :=\n/tmp/tmpujp_uuq__test.go:27:12: cannot\
    \ use make([]string, len(arr)) (value of type []string) as type []int in assignment\n\
    /tmp/tmpujp_uuq__test.go:29:18: cannot use map[int]string{\u2026}[arr[i]] (map\
    \ index expression of type string) as type int in assignment\n/tmp/tmpujp_uuq__test.go:41:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n\n    sort.Sort(sort.Reverse(arr))\n\n    arr := make([]string,\
    \ len(arr))\n    for i := range arr {\n        arr[i] = \"One\"\n        if arr[i]\
    \ >= 1 && arr[i] <= 9 {\n            arr[i] = fmt.Sprintf(\"%v\", arr[i])\n  \
    \      }\n    }\n\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n \
    \ candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzdju45ic_test.go:25:9: no new variables on left side of :=

    /tmp/tmpzdju45ic_test.go:30:5: undefined: sort

    /tmp/tmpzdju45ic_test.go:32:9: no new variables on left side of :=

    /tmp/tmpzdju45ic_test.go:32:12: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmpzdju45ic_test.go:34:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmpzdju45ic_test.go:36:22: cannot use fmt.Sprintf("%v", arr[i]) (value of
    type string) as type int in assignment

    /tmp/tmpzdju45ic_test.go:40:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n    arr3\
    \ = make([]string, len(arr2))\n    for i := range arr3 {\n        arr3[i] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[arr2[i]]\n    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplab087oa_test.go:28:5: undefined: sort

    /tmp/tmplab087oa_test.go:29:5: undefined: arr3

    /tmp/tmplab087oa_test.go:30:20: undefined: arr3

    /tmp/tmplab087oa_test.go:31:9: undefined: arr3

    /tmp/tmplab087oa_test.go:43:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075327
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    arr3 := make([]string,\
    \ len(arr))\n    for i := range arr2 {\n        if arr[i] >= 1 && arr[i] <= 9\
    \ {\n            arr2[i] = arr[i]\n        } else {\n            arr2[i] = -1\n\
    \        }\n    }\n    for i := range arr2 {\n        if arr2[i] != -1 {\n   \
    \         arr3[i] = names[arr2[i]]\n        }\n    }\n    return arr3\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp30655gi_test.go:32:23: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltahvmhf_test.go:28:5: undefined: sort

    /tmp/tmpltahvmhf_test.go:29:12: undefined: reverse

    /tmp/tmpltahvmhf_test.go:30:12: undefined: replaceDigits

    /tmp/tmpltahvmhf_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]int, len(arr))\n    arr3 := make([]string,\
    \ len(arr))\n    for i := range arr2 {\n        if arr[i] >= 1 && arr[i] <= 9\
    \ {\n            arr2[i] = arr[i]\n        } else {\n            arr2[i] = -1\n\
    \        }\n    }\n    sort.Sort(arr2)\n    for i := range arr2 {\n        if\
    \ arr2[i] != -1 {\n            arr3[i] = names[arr2[i]]\n        }\n    }\n  \
    \  return arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi2x8m5tp_test.go:30:5: undefined: sort

    /tmp/tmpi2x8m5tp_test.go:33:23: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[len(arr)-2] = arr[len(arr)-2],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := map[int]string{1: \"One\"\
    , 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\"}\n    arr := []string{}\n    for _, v := range arr\
    \ {\n        arr = append(arr, arr[v])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4_xblzoy_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmp4_xblzoy_test.go:26:9: no new variables\
    \ on left side of :=\n/tmp/tmp4_xblzoy_test.go:26:12: undefined: reverse\n/tmp/tmp4_xblzoy_test.go:27:9:\
    \ no new variables on left side of :=\n/tmp/tmp4_xblzoy_test.go:27:12: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in assignment\n\
    /tmp/tmp4_xblzoy_test.go:28:9: no new variables on left side of :=\n/tmp/tmp4_xblzoy_test.go:28:12:\
    \ cannot use []string{} (value of type []string) as type []int in assignment\n\
    /tmp/tmp4_xblzoy_test.go:32:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    if len(arr) == 0 {\n      \
    \  return result\n    }\n    max := 9\n    for _, v := range arr {\n        if\
    \ v < 1 || v > max {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%v\", v))\n        max -= 1\n    }\n    for i := len(result) -\
    \ 1; i >= 0; i-- {\n        result[i], result[len(result)-i-1] = result[len(result)-i-1],\
    \ result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6badmplb_test.go:30:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcuuo3fx_test.go:24:5:\
    \ undefined: sort\n/tmp/tmprcuuo3fx_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmprcuuo3fx_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmprcuuo3fx_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmprcuuo3fx_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmprcuuo3fx_test.go:27:9: no new variables on left side of :=\n/tmp/tmprcuuo3fx_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := reverse(arr)\n    for _, v := range arr {\n        arr[v] = name[v]\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3unomuyg_test.go:24:5:\
    \ undefined: sort\n/tmp/tmp3unomuyg_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmp3unomuyg_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmp3unomuyg_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmp3unomuyg_test.go:26:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp3unomuyg_test.go:27:9: no new variables on left side of :=\n/tmp/tmp3unomuyg_test.go:27:12:\
    \ undefined: reverse\n/tmp/tmp3unomuyg_test.go:29:18: undefined: name\n/tmp/tmp3unomuyg_test.go:31:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075324
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr := make([]int, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ arr[i] + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3bw0zjry_test.go:25:9: no new variables on left side of :=

    /tmp/tmp3bw0zjry_test.go:29:5: undefined: sort

    /tmp/tmp3bw0zjry_test.go:30:9: no new variables on left side of :=

    /tmp/tmp3bw0zjry_test.go:30:12: undefined: reverse

    /tmp/tmp3bw0zjry_test.go:31:9: no new variables on left side of :=

    /tmp/tmp3bw0zjry_test.go:31:12: undefined: replaceDigits

    /tmp/tmp3bw0zjry_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := arr[:0]\n    for _, v := range arr {\n       \
    \ if v >= 1 && v <= 9 {\n            arr = append(arr, fmt.Sprintf(\"%s\", v))\n\
    \        }\n    }\n    arr = append(arr, \"One\")\n    arr = append(arr, \"Two\"\
    )\n    arr = append(arr, \"Three\")\n    arr = append(arr, \"Four\")\n    arr\
    \ = append(arr, \"Five\")\n    arr = append(arr, \"Six\")\n    arr = append(arr,\
    \ \"Seven\")\n    arr = append(arr, \"Eight\")\n    arr = append(arr, \"Nine\"\
    )\n    arr = append(arr, \"Ten\")\n    arr = append(arr, \"Eleven\")\n    arr\
    \ = append(arr, \"Twelve\")\n    arr = append(arr, \"Thirteen\")\n    arr = append(arr,\
    \ \"Fourteen\")\n    arr = append(arr, \"Fifteen\")\n    arr = append(arr, \"\
    Sixteen\")\n    arr = append(arr, \"Seventeen\")\n    arr = append(arr, \"Eighteen\"\
    )\n    arr = append(arr, \"Nineteen\")\n    arr = append(arr, \"Twenty\")\n  \
    \  arr = append(arr, \"Twenty-one\")\n    arr = append(arr, \"Twenty-two\")\n\
    \    arr = append(arr, \"Twenty-three\")\n    arr = append(arr, \"Twenty-four\"\
    )\n    arr = append(arr, \"Twenty-five\")\n    arr = append(arr, \"Twenty-six\"\
    )\n    arr = append(arr, \"Twenty-seven\")\n    arr = append(arr, \"Twenty-eight\"\
    )\n    arr = append(arr, \"Twenty-nine\")\n    arr = append(arr, \"Thirty\")\n\
    \    arr = append(arr, \"Thirty-one\")\n    arr = append(arr, \"Thirty-two\")\n\
    \    arr = append(arr, \"Thirty-three\")\n    arr = append(arr, \"Thirty-four\"\
    )\n    arr = append(arr, \"Thirty-five\")\n    arr = append(arr, \"Thirty-six\"\
    )\n    arr = append(arr, \"Thirty-seven\")\n    arr = append(arr, \"Thirty-eight\"\
    )\n    arr = append(arr, \"Thirty-nine\")\n    arr = append(arr, \"Fourty\")\n\
    \    arr = append(arr, \"Fourty-one\")\n    arr = append(arr, \"Fourty-two\")\n\
    \    arr = append(arr, \"Fourty-three\")\n    arr = append(arr, \"Fourty-four\"\
    )\n    arr = append(arr, \"Fourty-five\")\n    arr = append(arr, \"Fourty-six\"\
    )\n    arr = append(\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpskbmmrzm_test.go:74:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr.reverse()\n    arr := []string{}\n    for\
    \ _, v := range arr {\n        arr = append(arr, fmt.Sprintf(\"%s\", map[int]string{1:\
    \ \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7:\
    \ \"Seven\", 8: \"Eight\", 9: \"Nine\"}[v]))\n    }\n    return arr\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=go |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\
    \n    \"sort\"\n)\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw5xxasn9_test.go:33:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, 0, len(arr))\n    for _, num\
    \ := range arr {\n        if num < 1 || num > 9 {\n            continue\n    \
    \    }\n        result := append(result, fmt.Sprintf(\"%v\", num))\n    }\n  \
    \  for i := len(result) - 1; i >= 0; i-- {\n        result[i] = map[int]string{\n\
    \            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n\
    \            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[result[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp8t4hn2l_test.go:26:9: result declared but not used

    /tmp/tmpp8t4hn2l_test.go:39:11: cannot use result[i] (variable of type string)
    as type int in map index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr := reverse(arr)\n\
    \    arr := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgq1j8cfn_test.go:24:9: no new variables on left side of :=

    /tmp/tmpgq1j8cfn_test.go:25:5: undefined: sort

    /tmp/tmpgq1j8cfn_test.go:26:9: no new variables on left side of :=

    /tmp/tmpgq1j8cfn_test.go:26:12: undefined: reverse

    /tmp/tmpgq1j8cfn_test.go:27:9: no new variables on left side of :=

    /tmp/tmpgq1j8cfn_test.go:27:12: undefined: replaceDigits

    /tmp/tmpgq1j8cfn_test.go:28:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i, v := range arr\
    \ {\n        if v > 9 {\n            arr[i] = v - 10\n        } else {\n     \
    \       arr[i] = v\n        }\n    }\n    sort.Ints(arr)\n    arr := reverse(arr)\n\
    \    arr := []string{}\n    for _, v := range arr {\n        if v > 9 {\n    \
    \        arr = append(arr, fmt.Sprintf(\"%v\", v-10))\n        } else {\n    \
    \        arr = append(arr, fmt.Sprintf(\"%v\", v))\n        }\n    }\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpofr87210_test.go:21:9: no new variables on left side of :=

    /tmp/tmpofr87210_test.go:29:5: undefined: sort

    /tmp/tmpofr87210_test.go:30:9: no new variables on left side of :=

    /tmp/tmpofr87210_test.go:30:12: undefined: reverse

    /tmp/tmpofr87210_test.go:31:9: no new variables on left side of :=

    /tmp/tmpofr87210_test.go:31:12: cannot use []string{} (value of type []string)
    as type []int in assignment

    /tmp/tmpofr87210_test.go:34:31: cannot use fmt.Sprintf("%v", v - 10) (value of
    type string) as type int in argument to append

    /tmp/tmpofr87210_test.go:36:31: cannot use fmt.Sprintf("%v", v) (value of type
    string) as type int in argument to append

    /tmp/tmpofr87210_test.go:39:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := append(arr, \"One\")\n    arr := append(arr, \"Two\")\n    arr :=\
    \ append(arr, \"Three\")\n    arr := append(arr, \"Four\")\n    arr := append(arr,\
    \ \"Five\")\n    arr := append(arr, \"Six\")\n    arr := append(arr, \"Seven\"\
    )\n    arr := append(arr, \"Eight\")\n    arr := append(arr, \"Nine\")\n    arr\
    \ := append(arr, \"One\")\n    arr := append(arr, \"Two\")\n    arr := append(arr,\
    \ \"Three\")\n    arr := append(arr, \"Four\")\n    arr := append(arr, \"Five\"\
    )\n    arr := append(arr, \"Six\")\n    arr := append(arr, \"Seven\")\n    arr\
    \ := append(arr, \"Eight\")\n    arr := append(arr, \"Nine\")\n    arr := append(arr,\
    \ \"One\")\n    arr := append(arr, \"Two\")\n    arr := append(arr, \"Three\"\
    )\n    arr := append(arr, \"Four\")\n    arr := append(arr, \"Five\")\n    arr\
    \ := append(arr, \"Six\")\n    arr := append(arr, \"Seven\")\n    arr := append(arr,\
    \ \"Eight\")\n    arr := append(arr, \"Nine\")\n    arr := append(arr, \"One\"\
    )\n    arr := append(arr, \"Two\")\n    arr := append(arr, \"Three\")\n    arr\
    \ := append(arr, \"Four\")\n    arr := append(arr, \"Five\")\n    arr := append(arr,\
    \ \"Six\")\n    arr := append(arr, \"Seven\")\n    arr := append(arr, \"Eight\"\
    )\n    arr := append(arr, \"Nine\")\n    arr := append(arr, \"One\")\n    arr\
    \ := append(arr, \"Two\")\n    arr := append(arr, \"Three\")\n    arr := append(arr,\
    \ \"Four\")\n    arr := append(arr, \"Five\")\n    arr := append(arr, \"Six\"\
    )\n    arr := append(arr, \"Seven\")\n    arr := append(\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqwrl0522_test.go:70:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltahvmhf_test.go:28:5: undefined: sort

    /tmp/tmpltahvmhf_test.go:29:12: undefined: reverse

    /tmp/tmpltahvmhf_test.go:30:12: undefined: replaceDigits

    /tmp/tmpltahvmhf_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result[i] = fmt.Sprintf(\"\
    %v\", arr[i])\n        } else {\n            result[i] = \"\"\n        }\n   \
    \ }\n    for i := range result {\n        if result[i] == \"\" {\n           \
    \ result[i] = \"One\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpdrdk_j1b_test.go:54: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpdrdk_j1b_test.go:54: expected '[One]', got '[1 One One]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpdrdk_j1b_test.go:54:\
    \ expected '[Three Two One]', got '[1 One 3 2]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpdrdk_j1b_test.go:54: expected '[Nine Eight Four]', got '[9\
    \ 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075323
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigit(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpew926wwc_test.go:28:5: undefined: sort

    /tmp/tmpew926wwc_test.go:29:12: undefined: reverse

    /tmp/tmpew926wwc_test.go:30:12: undefined: replaceDigit

    /tmp/tmpew926wwc_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i := range arr\
    \ {\n        arr[i] = arr[i] + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n\
    \    arr := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp46672v14_test.go:21:9: no new variables on left side of :=

    /tmp/tmp46672v14_test.go:25:5: undefined: sort

    /tmp/tmp46672v14_test.go:26:9: no new variables on left side of :=

    /tmp/tmp46672v14_test.go:26:12: undefined: reverse

    /tmp/tmp46672v14_test.go:27:9: no new variables on left side of :=

    /tmp/tmp46672v14_test.go:27:12: undefined: replaceDigits

    /tmp/tmp46672v14_test.go:28:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ sort.Ints(arr)\n    arr := arr[:len(arr)/2]\n    for i := 0; i < len(arr); i++\
    \ {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n        }\n\
    \        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    arr := append([]string{\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5ei10st_test.go:25:5:\
    \ undefined: sort\n/tmp/tmpv5ei10st_test.go:26:9: no new variables on left side\
    \ of :=\n/tmp/tmpv5ei10st_test.go:33:9: no new variables on left side of :=\n\
    /tmp/tmpv5ei10st_test.go:34:9: no new variables on left side of :=\n/tmp/tmpv5ei10st_test.go:34:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpv5ei10st_test.go:34:101: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpv5ei10st_test.go:35:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    arr2[0] = arr[0]\n    for i := 1; i < len(arr);\
    \ i++ {\n        if arr[i] > 9 {\n            arr2[i] = arr[i]\n        } else\
    \ {\n            arr2[i] = arr[i] + 10\n        }\n    }\n    arr2 = reverse(arr2)\n\
    \    arr2 = replaceDigit(arr2)\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8drfu_ff_test.go:33:12: undefined: reverse

    /tmp/tmp8drfu_ff_test.go:34:12: undefined: replaceDigit

    /tmp/tmp8drfu_ff_test.go:35:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltahvmhf_test.go:28:5: undefined: sort

    /tmp/tmpltahvmhf_test.go:29:12: undefined: reverse

    /tmp/tmpltahvmhf_test.go:30:12: undefined: replaceDigits

    /tmp/tmpltahvmhf_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)-1]\n    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n\
    \    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n    arr := append(arr,\
    \ 9...)\n    arr := append(arr, 1...)\n    arr := append(arr, 9...)\n    arr :=\
    \ append(arr, 1...)\n    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n\
    \    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n    arr := append(arr,\
    \ 9...)\n    arr := append(arr, 1...)\n    arr := append(arr, 9...)\n    arr :=\
    \ append(arr, 1...)\n    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n\
    \    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n    arr := append(arr,\
    \ 9...)\n    arr := append(arr, 1...)\n    arr := append(arr, 9...)\n    arr :=\
    \ append(arr, 1...)\n    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n\
    \    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n    arr := append(arr,\
    \ 9...)\n    arr := append(arr, 1...)\n    arr := append(arr, 9...)\n    arr :=\
    \ append(arr, 1...)\n    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n\
    \    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n    arr := append(arr,\
    \ 9...)\n    arr := append(arr, 1...)\n    arr := append(arr, 9...)\n    arr :=\
    \ append(arr, 1...)\n    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n\
    \    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n    arr := append(arr,\
    \ 9...)\n    arr := append(arr, 1...)\n    arr := append(arr, 9...)\n    arr :=\
    \ append(arr, 1...)\n    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n\
    \    arr := append(arr, 9...)\n    arr := append(arr, 1...)\n    arr := append(arr,\
    \ 9...)\n    arr := append(arr, 1...)\n    arr := append(arr, \nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1699cm4f_test.go:25:27: expected selector or type assertion, found ''.''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn84yez88_test.go:67:27: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    sort.Sort(sort.Reverse(sort.IntSlice(arr)))\n\
    \    for i := range arr {\n        if arr[i] > 9 {\n            arr[i] = arr[i]%10\n\
    \            result[i] = \"Nine\"\n        } else {\n            arr[i] = arr[i]%10\n\
    \            result[i] = \"One\"\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnjwom_9o_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i, v := range arr\
    \ {\n        if v < 1 || v > 9 {\n            continue\n        }\n        arr[i]\
    \ = v\n    }\n    sort.Ints(arr)\n    reverse(arr)\n    result := make([]string,\
    \ len(arr))\n    for i, v := range arr {\n        result[i] = names[v]\n    }\n\
    \    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpre07wqib_test.go:21:9: no new variables on left side of :=

    /tmp/tmpre07wqib_test.go:28:5: undefined: sort

    /tmp/tmpre07wqib_test.go:29:5: undefined: reverse

    /tmp/tmpre07wqib_test.go:32:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := []string{}\n    if len(arr) == 0 {\n      \
    \  return result\n    }\n    max := 9\n    for _, v := range arr {\n        if\
    \ v < 1 || v > max {\n            continue\n        }\n        result := append(result,\
    \ fmt.Sprintf(\"%v\", v))\n        max -= 1\n    }\n    for i := len(result) -\
    \ 1; i >= 0; i-- {\n        result[i], result[len(result)-i-1] = result[len(result)-i-1],\
    \ result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6badmplb_test.go:30:9: result declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075332
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzpn4vqkx_test.go:24:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:28:5: undefined: sort

    /tmp/tmpzpn4vqkx_test.go:29:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:29:12: undefined: reverse

    /tmp/tmpzpn4vqkx_test.go:30:9: no new variables on left side of :=

    /tmp/tmpzpn4vqkx_test.go:30:12: undefined: replaceDigits

    /tmp/tmpzpn4vqkx_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i := range arr\
    \ {\n        arr[i] = arr[i]\n    }\n    sort.Sort(sort.Reverse(arr))\n    arr\
    \ := arr[:len(arr)/10]\n    for i := range arr {\n        arr[i] = \"One\"\n \
    \   }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8z1701yl_test.go:21:9: no new variables on left side of :=

    /tmp/tmp8z1701yl_test.go:25:5: undefined: sort

    /tmp/tmp8z1701yl_test.go:26:9: no new variables on left side of :=

    /tmp/tmp8z1701yl_test.go:28:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp8z1701yl_test.go:30:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Sort(sort.Reverse(arr))\n    arr := reverse(arr)\n    arr\
    \ := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnhnz2poe_test.go:24:9: no new variables on left side of :=

    /tmp/tmpnhnz2poe_test.go:28:5: undefined: sort

    /tmp/tmpnhnz2poe_test.go:29:9: no new variables on left side of :=

    /tmp/tmpnhnz2poe_test.go:29:12: undefined: reverse

    /tmp/tmpnhnz2poe_test.go:30:9: no new variables on left side of :=

    /tmp/tmpnhnz2poe_test.go:30:12: undefined: replaceDigits

    /tmp/tmpnhnz2poe_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr\
    \ := append([]string{\"One\"}, arr...)\n    arr := append([]string{\"Two\"}, arr...)\n\
    \    arr := append([]string{\"Three\"}, arr...)\n    arr := append([]string{\"\
    Four\"}, arr...)\n    arr := append([]string{\"Five\"}, arr...)\n    arr := append([]string{\"\
    Six\"}, arr...)\n    arr := append([]string{\"Seven\"}, arr...)\n    arr := append([]string{\"\
    Eight\"}, arr...)\n    arr := append([]string{\"Nine\"}, arr...)\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkksje718_test.go:21:5:\
    \ undefined: sort\n/tmp/tmpkksje718_test.go:22:9: no new variables on left side\
    \ of :=\n/tmp/tmpkksje718_test.go:23:9: no new variables on left side of :=\n\
    /tmp/tmpkksje718_test.go:23:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpkksje718_test.go:23:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpkksje718_test.go:24:9: no new variables on left side of :=\n/tmp/tmpkksje718_test.go:24:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpkksje718_test.go:24:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpkksje718_test.go:25:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpkksje718_test.go:25:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpkksje718_test.go:25:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        if arr[i] < 1 || arr[i] > 9 {\n            continue\n      \
    \  }\n        arr2[i] = \"One\"\n        if arr[i] == 1 {\n            arr2[i]\
    \ = \"Two\"\n        }\n        if arr[i] == 2 {\n            arr2[i] = \"Three\"\
    \n        }\n        if arr[i] == 3 {\n            arr2[i] = \"Four\"\n      \
    \  }\n        if arr[i] == 4 {\n            arr2[i] = \"Five\"\n        }\n  \
    \      if arr[i] == 5 {\n            arr2[i] = \"Six\"\n        }\n        if\
    \ arr[i] == 6 {\n            arr2[i] = \"Seven\"\n        }\n        if arr[i]\
    \ == 7 {\n            arr2[i] = \"Eight\"\n        }\n        if arr[i] == 8 {\n\
    \            arr2[i] = \"Nine\"\n        }\n        if arr[i] == 9 {\n       \
    \     arr2[i] = \"Ten\"\n        }\n    }\n    arr2 = append(arr2, arr2...)\n\
    \    sort.Strings(arr2)\n    for i := range arr2 {\n        arr2[i] = arr2[i][1:]\n\
    \    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiqr23kt2_test.go:56:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Sort(sort.Reverse(arr))\n    arr := make([]string, len(arr))\n\
    \    for i := range arr {\n        arr[i] = \"One\"\n        if arr[i] >= 1 &&\
    \ arr[i] <= 9 {\n            arr[i] = fmt.Sprintf(\"%v\", arr[i])\n        }\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4alcmtvy_test.go:24:9: no new variables on left side of :=

    /tmp/tmp4alcmtvy_test.go:28:5: undefined: sort

    /tmp/tmp4alcmtvy_test.go:29:9: no new variables on left side of :=

    /tmp/tmp4alcmtvy_test.go:29:12: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmp4alcmtvy_test.go:31:18: cannot use "One" (untyped string constant) as
    int value in assignment

    /tmp/tmp4alcmtvy_test.go:33:22: cannot use fmt.Sprintf("%v", arr[i]) (value of
    type string) as type int in assignment

    /tmp/tmp4alcmtvy_test.go:36:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    reverse(arr)\n    arr :=\
    \ arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n    arr := append([]string{\"\
    Two\"}, arr...)\n    arr := append([]string{\"Three\"}, arr...)\n    arr := append([]string{\"\
    Four\"}, arr...)\n    arr := append([]string{\"Five\"}, arr...)\n    arr := append([]string{\"\
    Six\"}, arr...)\n    arr := append([]string{\"Seven\"}, arr...)\n    arr := append([]string{\"\
    Eight\"}, arr...)\n    arr := append([]string{\"Nine\"}, arr...)\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ed6sybc_test.go:24:5:\
    \ undefined: sort\n/tmp/tmp2ed6sybc_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmp2ed6sybc_test.go:26:5: undefined: reverse\n/tmp/tmp2ed6sybc_test.go:27:9:\
    \ no new variables on left side of :=\n/tmp/tmp2ed6sybc_test.go:28:9: no new variables\
    \ on left side of :=\n/tmp/tmp2ed6sybc_test.go:28:12: cannot use append([]string{\u2026\
    }, arr...) (value of type []string) as type []int in assignment\n/tmp/tmp2ed6sybc_test.go:28:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp2ed6sybc_test.go:29:9: no new variables on left side of :=\n/tmp/tmp2ed6sybc_test.go:29:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmp2ed6sybc_test.go:29:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmp2ed6sybc_test.go:29:9:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr.reverse()\n    arr := map[int]string{1:\
    \ \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7:\
    \ \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr2 := make([]string, len(arr))\n\
    \    for i, v := range arr {\n        arr2[i] = arr[v]\n    }\n    return arr2\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnq1y6u_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpcwnq1y6u_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpcwnq1y6u_test.go:26:9: arr.reverse undefined (type []int has\
    \ no field or method reverse)\n/tmp/tmpcwnq1y6u_test.go:27:9: no new variables\
    \ on left side of :=\n/tmp/tmpcwnq1y6u_test.go:27:12: cannot use map[int]string{\u2026\
    } (value of type map[int]string) as type []int in assignment\n/tmp/tmpcwnq1y6u_test.go:30:19:\
    \ cannot use arr[v] (variable of type int) as type string in assignment\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr2 := make([]string, len(arr))\n    arr2 := append(arr2, One)\n    arr2 :=\
    \ append(arr2, Two)\n    arr2 := append(arr2, Three)\n    arr2 := append(arr2,\
    \ Four)\n    arr2 := append(arr2, Five)\n    arr2 := append(arr2, Six)\n    arr2\
    \ := append(arr2, Seven)\n    arr2 := append(arr2, Eight)\n    arr2 := append(arr2,\
    \ Nine)\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] >= 1 && arr[i]\
    \ <= 9 {\n            arr[i] = arr2[i]\n        }\n    }\n\n    return arr2\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppowmhu01_test.go:26:10: no new variables on left side of :=

    /tmp/tmppowmhu01_test.go:26:26: undefined: One

    /tmp/tmppowmhu01_test.go:27:10: no new variables on left side of :=

    /tmp/tmppowmhu01_test.go:27:26: undefined: Two

    /tmp/tmppowmhu01_test.go:28:10: no new variables on left side of :=

    /tmp/tmppowmhu01_test.go:28:26: undefined: Three

    /tmp/tmppowmhu01_test.go:29:10: no new variables on left side of :=

    /tmp/tmppowmhu01_test.go:29:26: undefined: Four

    /tmp/tmppowmhu01_test.go:30:10: no new variables on left side of :=

    /tmp/tmppowmhu01_test.go:30:26: undefined: Five

    /tmp/tmppowmhu01_test.go:30:10: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    reverse(arr)\n    arr :=\
    \ arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n    return\
    \ arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw9utfuzb_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpw9utfuzb_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpw9utfuzb_test.go:26:5: undefined: reverse\n/tmp/tmpw9utfuzb_test.go:27:9:\
    \ no new variables on left side of :=\n/tmp/tmpw9utfuzb_test.go:28:9: no new variables\
    \ on left side of :=\n/tmp/tmpw9utfuzb_test.go:28:12: cannot use append([]string{\u2026\
    }, arr...) (value of type []string) as type []int in assignment\n/tmp/tmpw9utfuzb_test.go:28:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpw9utfuzb_test.go:29:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := arr[:len(arr)/2]\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ > 9 {\n            arr[i], arr[arr[i]-9] = arr[arr[i]-9], arr[i]\n        }\n\
    \    }\n    arr := reverse(arr)\n    for i := 0; i < len(arr); i++ {\n       \
    \ arr[i] = names[arr[i]]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdlogpvqx_test.go:24:9: no new variables on left side of :=

    /tmp/tmpdlogpvqx_test.go:30:9: no new variables on left side of :=

    /tmp/tmpdlogpvqx_test.go:30:12: undefined: reverse

    /tmp/tmpdlogpvqx_test.go:32:18: undefined: names

    /tmp/tmpdlogpvqx_test.go:34:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp55udbwut_test.go:28:5: undefined: sort

    /tmp/tmp55udbwut_test.go:29:12: undefined: reverse

    /tmp/tmp55udbwut_test.go:30:12: undefined: replaceDigits

    /tmp/tmp55udbwut_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Sort(sort.Reverse(arr))\n    arr := reverse(arr)\n    arr\
    \ := replaceDigits(arr)\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnhnz2poe_test.go:24:9: no new variables on left side of :=

    /tmp/tmpnhnz2poe_test.go:28:5: undefined: sort

    /tmp/tmpnhnz2poe_test.go:29:9: no new variables on left side of :=

    /tmp/tmpnhnz2poe_test.go:29:12: undefined: reverse

    /tmp/tmpnhnz2poe_test.go:30:9: no new variables on left side of :=

    /tmp/tmpnhnz2poe_test.go:30:12: undefined: replaceDigits

    /tmp/tmpnhnz2poe_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075333
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n    arr3 = make([]string,\
    \ len(arr))\n    for i := range arr3 {\n        arr3[i] = by_length_test.One[arr2[i]]\n\
    \    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsfuze7hr_test.go:28:5: undefined: sort

    /tmp/tmpsfuze7hr_test.go:29:5: undefined: arr3

    /tmp/tmpsfuze7hr_test.go:30:20: undefined: arr3

    /tmp/tmpsfuze7hr_test.go:31:9: undefined: arr3

    /tmp/tmpsfuze7hr_test.go:31:19: undefined: by_length_test

    /tmp/tmpsfuze7hr_test.go:33:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcuuo3fx_test.go:24:5:\
    \ undefined: sort\n/tmp/tmprcuuo3fx_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmprcuuo3fx_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmprcuuo3fx_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmprcuuo3fx_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmprcuuo3fx_test.go:27:9: no new variables on left side of :=\n/tmp/tmprcuuo3fx_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1], arr[arr[len(arr)-1]] = arr[arr[len(arr)-1]],\
    \ arr[len(arr)-1]\n    arr := reverse(arr)\n    arr := map[int]string{1: \"One\"\
    , 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\"\
    , 8: \"Eight\", 9: \"Nine\"}\n    arr := []string{}\n    for _, v := range arr\
    \ {\n        arr = append(arr, arr[v])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3uvcgkfj_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmp3uvcgkfj_test.go:26:9: no new variables\
    \ on left side of :=\n/tmp/tmp3uvcgkfj_test.go:26:12: undefined: reverse\n/tmp/tmp3uvcgkfj_test.go:27:9:\
    \ no new variables on left side of :=\n/tmp/tmp3uvcgkfj_test.go:27:12: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in assignment\n\
    /tmp/tmp3uvcgkfj_test.go:28:9: no new variables on left side of :=\n/tmp/tmp3uvcgkfj_test.go:28:12:\
    \ cannot use []string{} (value of type []string) as type []int in assignment\n\
    /tmp/tmp3uvcgkfj_test.go:32:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvds2u6mq_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpvds2u6mq_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpvds2u6mq_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmpvds2u6mq_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpvds2u6mq_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpvds2u6mq_test.go:27:9: no new variables on left side of :=\n/tmp/tmpvds2u6mq_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpvds2u6mq_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpvds2u6mq_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpvds2u6mq_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpvds2u6mq_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    i := 0\n    for\
    \ _, value := range arr {\n        if value < 1 || value > 9 {\n            continue\n\
    \        }\n        result[i] = fmt.Sprintf(\"%v\", value)\n        i++\n    }\n\
    \    for i := 0; i < len(result); i++ {\n        result[i], result[len(result)-i-1]\
    \ = result[len(result)-i-1], result[i]\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpiw5wjkzk_test.go:53: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpiw5wjkzk_test.go:53: expected '[One]', got '[1  ]'\n   \
    \ --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpiw5wjkzk_test.go:53:\
    \ expected '[Three Two One]', got '[1 3 2 ]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmpiw5wjkzk_test.go:53: expected '[Nine Eight Four]', got '[9\
    \ 4 8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n\
    \    for i := range arr {\n        arr[i] = by_length_test.One[arr[i]]\n    }\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_kpcf4hr_test.go:24:9: no new variables on left side of :=

    /tmp/tmp_kpcf4hr_test.go:25:5: undefined: sort

    /tmp/tmp_kpcf4hr_test.go:28:18: undefined: by_length_test

    /tmp/tmp_kpcf4hr_test.go:30:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpltahvmhf_test.go:28:5: undefined: sort

    /tmp/tmpltahvmhf_test.go:29:12: undefined: reverse

    /tmp/tmpltahvmhf_test.go:30:12: undefined: replaceDigits

    /tmp/tmpltahvmhf_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        if arr[i] > 9 {\n            arr2[i] = \"Nine\"\n        } else\
    \ if arr[i] < 1 {\n            arr2[i] = \"One\"\n        } else {\n         \
    \   arr2[i] = fmt.Sprintf(\"%v\", arr[i])\n        }\n    }\n    arr2 = append(arr2,\
    \ arr2...)\n    sort.Strings(arr2)\n    for i := range arr2 {\n        arr2[i]\
    \ = strings.Replace(arr2[i], \"One\", \"One\", 1)\n        arr2[i] = strings.Replace(arr2[i],\
    \ \"Two\", \"Two\", 1)\n        arr2[i] = strings.Replace(arr2[i], \"Three\",\
    \ \"Three\", 1)\n        arr2[i] = strings.Replace(arr2[i], \"Four\", \"Four\"\
    , 1)\n        arr2[i] = strings.Replace(arr2[i], \"Five\", \"Five\", 1)\n    \
    \    arr2[i] = strings.Replace(arr2[i], \"Six\", \"Six\", 1)\n        arr2[i]\
    \ = strings.Replace(arr2[i], \"Seven\", \"Seven\", 1)\n        arr2[i] = strings.Replace(arr2[i],\
    \ \"Eight\", \"Eight\", 1)\n        arr2[i] = strings.Replace(arr2[i], \"Nine\"\
    , \"Nine\", 1)\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnzr7gimc_test.go:32:5: undefined: sort

    /tmp/tmpnzr7gimc_test.go:34:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:35:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:36:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:37:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:38:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:39:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:40:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:41:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:42:19: undefined: strings

    /tmp/tmpnzr7gimc_test.go:42:19: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    One\"}, arr...)\n    arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"\
    Three\"}, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbe5obr7v_test.go:24:5:\
    \ undefined: sort\n/tmp/tmpbe5obr7v_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmpbe5obr7v_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmpbe5obr7v_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpbe5obr7v_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpbe5obr7v_test.go:27:9: no new variables on left side of :=\n/tmp/tmpbe5obr7v_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpbe5obr7v_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpbe5obr7v_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpbe5obr7v_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpbe5obr7v_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075330
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    arr2[0] = arr[0]\n    for i := 1; i <\
    \ len(arr); i++ {\n        if arr[i] > 9 {\n            arr2[i] = arr[i]\n   \
    \     } else {\n            arr2[i] = arr[i] + 10\n        }\n    }\n    arr2\
    \ = append(arr2[:len(arr)-1], arr[len(arr)-1])\n    arr2 = append(arr2, arr2...)\n\
    \    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n    arr2 = append(arr2,\
    \ arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n    arr2 =\
    \ append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n    arr2 = append(arr2[:len(arr)-1], arr[len(arr)-1])\n\
    \    arr2 = append(arr2, arr2...)\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp88ctv3_i_test.go:68:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075334
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    arr2 := make([]string, len(arr2))\n    for i := range arr2 {\n        arr2[i]\
    \ = nameOf(arr2[i])\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpczevi4fe_test.go:28:5: undefined: sort

    /tmp/tmpczevi4fe_test.go:29:12: undefined: reverse

    /tmp/tmpczevi4fe_test.go:30:12: undefined: replaceDigits

    /tmp/tmpczevi4fe_test.go:31:10: no new variables on left side of :=

    /tmp/tmpczevi4fe_test.go:31:13: cannot use make([]string, len(arr2)) (value of
    type []string) as type []int in assignment

    /tmp/tmpczevi4fe_test.go:33:19: undefined: nameOf

    /tmp/tmpczevi4fe_test.go:35:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := reverse(arr)\n    arr := replace(arr)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw_7i4a6p_test.go:24:9: no new variables on left side of :=

    /tmp/tmpw_7i4a6p_test.go:24:12: undefined: reverse

    /tmp/tmpw_7i4a6p_test.go:25:9: no new variables on left side of :=

    /tmp/tmpw_7i4a6p_test.go:25:12: undefined: replace

    /tmp/tmpw_7i4a6p_test.go:26:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            arr2[i] = \"One\"\
    \n        } else if arr[i] >= 10 && arr[i] <= 99 {\n            arr2[i] = \"Two\"\
    \n        } else if arr[i] >= 100 && arr[i] <= 999 {\n            arr2[i] = \"\
    Three\"\n        } else if arr[i] >= 1000 && arr[i] <= 9999 {\n            arr2[i]\
    \ = \"Four\"\n        } else if arr[i] >= 10000 && arr[i] <= 99999 {\n       \
    \     arr2[i] = \"Five\"\n        } else if arr[i] >= 100000 && arr[i] <= 999999\
    \ {\n            arr2[i] = \"Six\"\n        } else if arr[i] >= 1000000 && arr[i]\
    \ <= 9999999 {\n            arr2[i] = \"Seven\"\n        } else if arr[i] >= 10000000\
    \ && arr[i] <= 99999999 {\n            arr2[i] = \"Eight\"\n        } else if\
    \ arr[i] >= 100000000 && arr[i] <= 999999999 {\n            arr2[i] = \"Nine\"\
    \n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp977qg3m9_test.go:63: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[One One One One One One One One]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmp977qg3m9_test.go:63: expected '[One]', got '[One  Two]'\n\
    \    --- FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmp977qg3m9_test.go:63:\
    \ expected '[Three Two One]', got '[One  One One]'\n    --- FAIL: TestBy_Length/test_num__4\
    \ (0.00s)\n        tmp977qg3m9_test.go:63: expected '[Nine Eight Four]', got '[One\
    \ One One]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n    arr3 = make([]string,\
    \ len(arr))\n    for i := range arr3 {\n        arr3[i] = map[int]string{\n  \
    \          1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n \
    \           4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n\
    \            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\"\
    ,\n        }[arr2[i]]\n    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprmo_001i_test.go:28:5: undefined: sort

    /tmp/tmprmo_001i_test.go:29:5: undefined: arr3

    /tmp/tmprmo_001i_test.go:30:20: undefined: arr3

    /tmp/tmprmo_001i_test.go:31:9: undefined: arr3

    /tmp/tmprmo_001i_test.go:43:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcuuo3fx_test.go:24:5:\
    \ undefined: sort\n/tmp/tmprcuuo3fx_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmprcuuo3fx_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmprcuuo3fx_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmprcuuo3fx_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmprcuuo3fx_test.go:27:9: no new variables on left side of :=\n/tmp/tmprcuuo3fx_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    arr := make([]int, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ arr[i] + 1\n    }\n\n    sort.Sort(sort.Reverse(arr))\n\n    result := make([]string,\
    \ len(arr))\n    for i := range arr {\n        result[i] = names[arr[i]]\n   \
    \ }\n\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpfppxav_test.go:25:9: no new variables on left side of :=

    /tmp/tmpbpfppxav_test.go:30:5: undefined: sort

    /tmp/tmpbpfppxav_test.go:34:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := append([]int{}, arr...)\n    sort.Ints(arr)\n\
    \    arr := reverse(arr)\n    arr := map[int]string{1: \"One\", 2: \"Two\", 3:\
    \ \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\"\
    , 9: \"Nine\"}\n    arr := make([]string, 0, len(arr))\n    for _, v := range\
    \ arr {\n        arr = append(arr, arr[v])\n    }\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdnlb__85_test.go:21:9:\
    \ no new variables on left side of :=\n/tmp/tmpdnlb__85_test.go:22:5: undefined:\
    \ sort\n/tmp/tmpdnlb__85_test.go:23:9: no new variables on left side of :=\n/tmp/tmpdnlb__85_test.go:23:12:\
    \ undefined: reverse\n/tmp/tmpdnlb__85_test.go:24:9: no new variables on left\
    \ side of :=\n/tmp/tmpdnlb__85_test.go:24:12: cannot use map[int]string{\u2026\
    } (value of type map[int]string) as type []int in assignment\n/tmp/tmpdnlb__85_test.go:25:9:\
    \ no new variables on left side of :=\n/tmp/tmpdnlb__85_test.go:25:12: cannot\
    \ use make([]string, 0, len(arr)) (value of type []string) as type []int in assignment\n\
    /tmp/tmpdnlb__85_test.go:29:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\"}, arr...)\n \
    \   arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"Three\"\
    }, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprcuuo3fx_test.go:24:5:\
    \ undefined: sort\n/tmp/tmprcuuo3fx_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmprcuuo3fx_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmprcuuo3fx_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmprcuuo3fx_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmprcuuo3fx_test.go:27:9: no new variables on left side of :=\n/tmp/tmprcuuo3fx_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmprcuuo3fx_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmprcuuo3fx_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075322
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr\
    \ := append([]string{\"One\"}, arr...)\n    arr := append([]string{\"Two\"}, arr...)\n\
    \    arr := append([]string{\"Three\"}, arr...)\n    arr := append([]string{\"\
    Four\"}, arr...)\n    arr := append([]string{\"Five\"}, arr...)\n    arr := append([]string{\"\
    Six\"}, arr...)\n    arr := append([]string{\"Seven\"}, arr...)\n    arr := append([]string{\"\
    Eight\"}, arr...)\n    arr := append([]string{\"Nine\"}, arr...)\n    return arr\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkksje718_test.go:21:5:\
    \ undefined: sort\n/tmp/tmpkksje718_test.go:22:9: no new variables on left side\
    \ of :=\n/tmp/tmpkksje718_test.go:23:9: no new variables on left side of :=\n\
    /tmp/tmpkksje718_test.go:23:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmpkksje718_test.go:23:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmpkksje718_test.go:24:9: no new variables on left side of :=\n/tmp/tmpkksje718_test.go:24:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpkksje718_test.go:24:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpkksje718_test.go:25:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmpkksje718_test.go:25:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmpkksje718_test.go:25:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Sort(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigit(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpobv9yxfs_test.go:28:5: undefined: sort

    /tmp/tmpobv9yxfs_test.go:29:12: undefined: reverse

    /tmp/tmpobv9yxfs_test.go:30:12: undefined: replaceDigit

    /tmp/tmpobv9yxfs_test.go:31:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr[len(arr)-1]--\n    arr := append([]int{1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9}, arr...)\n    arr := reverse(arr)\n    arr := map[int]string{1:\
    \ \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7:\
    \ \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr := []string{}\n    for _, v :=\
    \ range arr {\n        arr = append(arr, arr[v])\n    }\n    return arr\n}\n\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc1wjzdk8_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmpc1wjzdk8_test.go:26:9: no new variables\
    \ on left side of :=\n/tmp/tmpc1wjzdk8_test.go:27:9: no new variables on left\
    \ side of :=\n/tmp/tmpc1wjzdk8_test.go:27:12: undefined: reverse\n/tmp/tmpc1wjzdk8_test.go:28:9:\
    \ no new variables on left side of :=\n/tmp/tmpc1wjzdk8_test.go:28:12: cannot\
    \ use map[int]string{\u2026} (value of type map[int]string) as type []int in assignment\n\
    /tmp/tmpc1wjzdk8_test.go:29:9: no new variables on left side of :=\n/tmp/tmpc1wjzdk8_test.go:29:12:\
    \ cannot use []string{} (value of type []string) as type []int in assignment\n\
    /tmp/tmpc1wjzdk8_test.go:33:12: cannot use arr (variable of type []int) as type\
    \ []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    for i := range\
    \ arr2 {\n        arr2[i] = by_length_test.One[arr[i]]\n    }\n    sort.Sort(sort.Reverse(sort.IntSlice(arr2)))\n\
    \    for i := range arr2 {\n        arr2[i] = by_length_test.One[arr2[i]]\n  \
    \  }\n    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7vbw6s8g_test.go:23:19: undefined: by_length_test

    /tmp/tmp7vbw6s8g_test.go:25:5: undefined: sort

    /tmp/tmp7vbw6s8g_test.go:27:19: undefined: by_length_test

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ arr := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfuzakwfq_test.go:25:9: no new variables on left side of :=

    /tmp/tmpfuzakwfq_test.go:29:5: undefined: sort

    /tmp/tmpfuzakwfq_test.go:30:9: no new variables on left side of :=

    /tmp/tmpfuzakwfq_test.go:30:12: undefined: reverse

    /tmp/tmpfuzakwfq_test.go:31:9: no new variables on left side of :=

    /tmp/tmpfuzakwfq_test.go:31:12: undefined: replaceDigits

    /tmp/tmpfuzakwfq_test.go:32:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append(arr, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr,\
    \ \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\"\
    )\n    arr := append(arr, \"Zero\")\n    arr := append(arr, \"Zero\")\n    arr\
    \ := append(arr, \"Zero\")\n    arr := \nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbx9r3psg_test.go:73:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr\
    \ := make([]int, len(arr))\n    for i := range arr {\n        arr[i] = arr[i]\
    \ + 1\n    }\n    sort.Ints(arr)\n    arr[len(arr)-1]--\n    reverse(arr)\n  \
    \  arr := make([]string, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ names[arr[i]]\n    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ajaz8be_test.go:24:9: no new variables on left side of :=

    /tmp/tmp3ajaz8be_test.go:28:5: undefined: sort

    /tmp/tmp3ajaz8be_test.go:30:5: undefined: reverse

    /tmp/tmp3ajaz8be_test.go:31:9: no new variables on left side of :=

    /tmp/tmp3ajaz8be_test.go:31:12: cannot use make([]string, len(arr)) (value of
    type []string) as type []int in assignment

    /tmp/tmp3ajaz8be_test.go:33:18: undefined: names

    /tmp/tmp3ajaz8be_test.go:35:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr2 := append(arr2,\
    \ \"\")\n    for i := range arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n \
    \           arr2[i] = \"One\"\n        } else if arr[i] >= 10 && arr[i] <= 99\
    \ {\n            arr2[i] = \"Two\"\n        } else if arr[i] >= 100 && arr[i]\
    \ <= 999 {\n            arr2[i] = \"Three\"\n        } else if arr[i] >= 1000\
    \ && arr[i] <= 9999 {\n            arr2[i] = \"Four\"\n        } else if arr[i]\
    \ >= 10000 && arr[i] <= 99999 {\n            arr2[i] = \"Five\"\n        } else\
    \ if arr[i] >= 100000 && arr[i] <= 999999 {\n            arr2[i] = \"Six\"\n \
    \       } else if arr[i] >= 1000000 && arr[i] <= 9999999 {\n            arr2[i]\
    \ = \"Seven\"\n        } else if arr[i] >= 10000000 && arr[i] <= 99999999 {\n\
    \            arr2[i] = \"Eight\"\n        } else if arr[i] >= 100000000 && arr[i]\
    \ <= 999999999 {\n            arr2[i] = \"Nine\"\n        } else {\n         \
    \   arr2[i] = \"?\"\n        }\n    }\n    return arr2\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp87kybu3y_test.go:22:10: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    for i := range\
    \ arr {\n        if arr[i] >= 1 && arr[i] <= 9 {\n            result[i] = fmt.Sprintf(\"\
    %s\", arr[i])\n        } else {\n            result[i] = \"\"\n        }\n   \
    \ }\n    for i := range result {\n        if result[i] == \"\" {\n           \
    \ result[i] = \"One\"\n        }\n    }\n    return result\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpkq84b2fe_test.go:24:25: fmt.Sprintf format %s has arg arr[i] of wrong
    type int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075336
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    arr2\
    \ := make([]int, len(arr))\n    for i := range arr2 {\n        if arr[i] < 1 ||\
    \ arr[i] > 9 {\n            continue\n        }\n        arr2[i] = arr[i]\n  \
    \  }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigit(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpni0qc198_test.go:31:5: undefined: sort

    /tmp/tmpni0qc198_test.go:32:12: undefined: reverse

    /tmp/tmpni0qc198_test.go:33:12: undefined: replaceDigit

    /tmp/tmpni0qc198_test.go:34:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n    sort.Ints(arr)\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := reverse(arr)\n    for i := range arr {\n        arr[i] = \"One\"\n\
    \    }\n    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate :=\
    \ by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps8pqozgc_test.go:24:5:\
    \ undefined: sort\n/tmp/tmps8pqozgc_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmps8pqozgc_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmps8pqozgc_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmps8pqozgc_test.go:26:101:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmps8pqozgc_test.go:27:9: no new variables on left side of :=\n/tmp/tmps8pqozgc_test.go:27:12:\
    \ undefined: reverse\n/tmp/tmps8pqozgc_test.go:29:18: cannot use \"One\" (untyped\
    \ string constant) as int value in assignment\n/tmp/tmps8pqozgc_test.go:31:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        if arr[i]\
    \ < 1 || arr[i] > 9 {\n            continue\n        }\n        arr2[i] = arr[i]\n\
    \    }\n    sort.Ints(arr2)\n    arr2 = reverse(arr2)\n    arr2 = replaceDigits(arr2)\n\
    \    return arr2\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv2vwi94n_test.go:31:5: undefined: sort

    /tmp/tmpv2vwi94n_test.go:32:12: undefined: reverse

    /tmp/tmpv2vwi94n_test.go:33:12: undefined: replaceDigits

    /tmp/tmpv2vwi94n_test.go:34:12: cannot use arr2 (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i := range arr {\n        if arr[i] < 1 || arr[i] > 9 {\n\
    \            continue\n        }\n        arr3[i] = arr[i]\n    }\n    sort.Ints(arr3)\n\
    \    for i := range arr3 {\n        arr2[i] = names[arr3[i]]\n    }\n    for i\
    \ := range arr2 {\n        arr2[i] = reverse[arr2[i]]\n    }\n    for i := range\
    \ arr2 {\n        arr2[i] = replace[arr2[i]]\n    }\n    return arr2\n}\n\nfunc\
    \ TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz56ek9ux_test.go:29:5: undefined: sort

    /tmp/tmpz56ek9ux_test.go:31:19: undefined: names

    /tmp/tmpz56ek9ux_test.go:34:19: undefined: reverse

    /tmp/tmpz56ek9ux_test.go:37:19: undefined: replace

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)/2]\n    arr := append(arr, reverse(arr))\n    arr :=\
    \ append([]string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"}, arr...)\n    return arr\n}\n\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpki7utves_test.go:24:9:\
    \ no new variables on left side of :=\n/tmp/tmpki7utves_test.go:25:9: no new variables\
    \ on left side of :=\n/tmp/tmpki7utves_test.go:25:24: undefined: reverse\n/tmp/tmpki7utves_test.go:26:9:\
    \ no new variables on left side of :=\n/tmp/tmpki7utves_test.go:26:12: cannot\
    \ use append([]string{\u2026}, arr...) (value of type []string) as type []int\
    \ in assignment\n/tmp/tmpki7utves_test.go:26:101: cannot use arr (variable of\
    \ type []int) as type []string in argument to append\n/tmp/tmpki7utves_test.go:27:12:\
    \ cannot use arr (variable of type []int) as type []string in return statement\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr2 := make([]string, len(arr))\n    arr3 := make([]int,\
    \ len(arr))\n    for i, v := range arr {\n        if v < 1 || v > 9 {\n      \
    \      continue\n        }\n        arr2[i] = \"One\"\n        arr3[i] = v\n \
    \   }\n    sort.Ints(arr3)\n    for i := 0; i < len(arr); i++ {\n        arr2[i]\
    \ = fmt.Sprintf(\"%v\", arr3[i])\n    }\n    return arr2\n}\n</code>\n<|/ a tags=sorting,go\
    \ |>\n<| a dscore=2 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"\
    sort\"\n)\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkafp6naw_test.go:36:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append(arr, \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr,\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\")\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \  arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr\
    \ := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr,\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\")\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n    arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \  arr := append(arr, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")\n    arr := append(arr, \"One\", \"Two\", \"\
    \nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp30d5t7i1_test.go:41:38: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \n    sort.Ints(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplil_to2y_test.go:25:5: undefined: sort

    /tmp/tmplil_to2y_test.go:26:9: no new variables on left side of :=

    /tmp/tmplil_to2y_test.go:26:12: undefined: reverse

    /tmp/tmplil_to2y_test.go:27:9: no new variables on left side of :=

    /tmp/tmplil_to2y_test.go:27:12: undefined: replaceDigits

    /tmp/tmplil_to2y_test.go:28:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    arr := make([]int, len(arr))\n    for i := range arr\
    \ {\n        arr[i] = arr[i]\n    }\n    sort.Sort(arr)\n    reverse(arr)\n  \
    \  result := make([]string, len(arr))\n    for i := range arr {\n        result[i]\
    \ = names[arr[i]]\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnobb5jr1_test.go:21:9: no new variables on left side of :=

    /tmp/tmpnobb5jr1_test.go:25:5: undefined: sort

    /tmp/tmpnobb5jr1_test.go:26:5: undefined: reverse

    /tmp/tmpnobb5jr1_test.go:29:21: undefined: names

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return nil\n    }\n\n   \
    \ result := make([]string, len(arr))\n    arr := append(arr, 9) // add 9 to avoid\
    \ index out of range error\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ < 1 || arr[i] > 9 {\n            continue\n        }\n        digitIndex :=\
    \ int(arr[i]) - 1 // convert from 1-9 to 0-10\n        result[digitIndex] = name[digitIndex]\n\
    \    }\n    for i := 0; i < len(result); i++ {\n        result[i] = reverse(result[i])\n\
    \    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4q5wybtn_test.go:26:9: no new variables on left side of :=

    /tmp/tmp4q5wybtn_test.go:32:30: undefined: name

    /tmp/tmp4q5wybtn_test.go:35:21: undefined: reverse

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    result := make([]string, len(arr))\n    i := 0\n    for\
    \ _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result[i] =\
    \ fmt.Sprintf(\"%s\", v)\n        } else {\n            result[i] = \"One\"\n\
    \        }\n        i++\n    }\n    return result\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpb7ymy5rs_test.go:25:25: fmt.Sprintf format %s has arg v of wrong type
    int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := make([]int, len(arr))\n    for i := range arr {\n        arr[i] =\
    \ arr[i] + 1\n    }\n    sort.Sort(arr)\n    arr := reverse(arr)\n    arr := replaceDigits(arr)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzv59noa0_test.go:24:9: no new variables on left side of :=

    /tmp/tmpzv59noa0_test.go:28:5: undefined: sort

    /tmp/tmpzv59noa0_test.go:29:9: no new variables on left side of :=

    /tmp/tmpzv59noa0_test.go:29:12: undefined: reverse

    /tmp/tmpzv59noa0_test.go:30:9: no new variables on left side of :=

    /tmp/tmpzv59noa0_test.go:30:12: undefined: replaceDigits

    /tmp/tmpzv59noa0_test.go:31:12: cannot use arr (variable of type []int) as type
    []string in return statement

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075331
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    sort.Ints(arr)\n    arr := arr[:len(arr)-1]\n    arr := append([]string{\"\
    One\"}, arr...)\n    arr := append([]string{\"Two\"}, arr...)\n    arr := append([]string{\"\
    Three\"}, arr...)\n    arr := append([]string{\"Four\"}, arr...)\n    arr := append([]string{\"\
    Five\"}, arr...)\n    arr := append([]string{\"Six\"}, arr...)\n    arr := append([]string{\"\
    Seven\"}, arr...)\n    arr := append([]string{\"Eight\"}, arr...)\n    arr :=\
    \ append([]string{\"Nine\"}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    return arr\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fv9ovk4_test.go:24:5:\
    \ undefined: sort\n/tmp/tmp0fv9ovk4_test.go:25:9: no new variables on left side\
    \ of :=\n/tmp/tmp0fv9ovk4_test.go:26:9: no new variables on left side of :=\n\
    /tmp/tmp0fv9ovk4_test.go:26:12: cannot use append([]string{\u2026}, arr...) (value\
    \ of type []string) as type []int in assignment\n/tmp/tmp0fv9ovk4_test.go:26:36:\
    \ cannot use arr (variable of type []int) as type []string in argument to append\n\
    /tmp/tmp0fv9ovk4_test.go:27:9: no new variables on left side of :=\n/tmp/tmp0fv9ovk4_test.go:27:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmp0fv9ovk4_test.go:27:36: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmp0fv9ovk4_test.go:28:12:\
    \ cannot use append([]string{\u2026}, arr...) (value of type []string) as type\
    \ []int in assignment\n/tmp/tmp0fv9ovk4_test.go:28:38: cannot use arr (variable\
    \ of type []int) as type []string in argument to append\n/tmp/tmp0fv9ovk4_test.go:28:12:\
    \ too many errors\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075328
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr2 := make([]int, len(arr))\n    for i := range arr2 {\n        arr2[i]\
    \ = arr[i]\n    }\n    sort.Sort(ByLength(arr2))\n    reverse(arr2)\n    arr3\
    \ = make([]string, len(arr))\n    for i := range arr3 {\n        arr3[i] = name[arr2[i]]\n\
    \    }\n    return arr3\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp70glbspp_test.go:28:5: undefined: sort

    /tmp/tmp70glbspp_test.go:28:15: undefined: ByLength

    /tmp/tmp70glbspp_test.go:29:5: undefined: reverse

    /tmp/tmp70glbspp_test.go:30:5: undefined: arr3

    /tmp/tmp70glbspp_test.go:31:20: undefined: arr3

    /tmp/tmp70glbspp_test.go:32:9: undefined: arr3

    /tmp/tmp70glbspp_test.go:32:19: undefined: name

    /tmp/tmp70glbspp_test.go:34:12: undefined: arr3

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075335
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5,\
    \ 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"}\n// If the array is empty, return an empty array:\n//\
    \ >>> by_length([]int{})\n// []string{}\n// If the array has any strange number\
    \ ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr\
    \ []int) []string {\n    if len(arr) == 0 {\n        return []string{}\n    }\n\
    \    arr := arr[:len(arr)-1]\n    arr := append([]string{\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string{}, arr...)\n\
    \    arr := append([]string{}, arr...)\n    arr := append([]string\nfunc TestBy_Length(t\
    \ *testing.T) {\n  candidate := by_length\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual:\
    \ candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn84yez88_test.go:67:27: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075321
