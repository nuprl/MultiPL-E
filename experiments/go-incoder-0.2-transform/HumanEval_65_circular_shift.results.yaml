language: go_test.go
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x +=\
    \ 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n  \
    \  x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x +=\
    \ 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n  \
    \  x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1mgnr98z_test.go:114:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for shift > 0 {\n        if shift > len(x) {\n            shift = len(x)\n\
    \        }\n        s += string(x%10) + string(x/10)\n        x /= 10\n      \
    \  shift -= 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyfztcck__test.go:18:24: invalid argument: x (variable of type int) for
    len

    /tmp/tmpyfztcck__test.go:19:25: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    x %= 10\n    for i := 0; i < shift; i++ {\n        s = string([]int{x, x%10})\
    \ + s\n        x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj33j07iq_test.go:19:20:\
    \ cannot convert []int{\u2026} (value of type []int) to type string\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x >>= shift\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsen2hde5_test.go:18:20: undefined: strconv

    /tmp/tmpsen2hde5_test.go:19:16: undefined: strconv

    /tmp/tmpsen2hde5_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for shift > 0 {\n        if shift >= len(x) {\n            s += x[len(x)-1]\n\
    \            break\n        }\n        s += x[(len(x)-shift)%len(x)]\n       \
    \ shift -= len(x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeg9jb75z_test.go:18:25: invalid argument: x (variable of type int) for
    len

    /tmp/tmpeg9jb75z_test.go:19:19: invalid operation: cannot index x (variable of
    type int)

    /tmp/tmpeg9jb75z_test.go:22:15: invalid operation: cannot index x (variable of
    type int)

    /tmp/tmpeg9jb75z_test.go:23:22: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwvk5rmia_test.go:17:20: undefined: strconv

    /tmp/tmpwvk5rmia_test.go:18:21: undefined: strconv

    /tmp/tmpwvk5rmia_test.go:22:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x /= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2b95shfe_test.go:18:20: undefined: strconv

    /tmp/tmp2b95shfe_test.go:19:21: undefined: strconv

    /tmp/tmp2b95shfe_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_1mc55t4_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp_1mc55t4_test.go:43: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp_1mc55t4_test.go:43: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp_1mc55t4_test.go:43: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp_1mc55t4_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return\
    \ strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszn4890z_test.go:17:20: undefined: strconv

    /tmp/tmpszn4890z_test.go:18:21: undefined: strconv

    /tmp/tmpszn4890z_test.go:20:18: undefined: strconv

    /tmp/tmpszn4890z_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1\
    \ << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %=\
    \ (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n \
    \   x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplrnxmv4x_test.go:90:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift\
    \ %= len(x)\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\",\
    \ x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptqh6m8oc_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmptqh6m8oc_test.go:20:18: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    x %= 10\n    for i := 0; i < shift; i++ {\n        s += string(x)\n    \
    \    x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpafrmhmil_test.go:19:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074856
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp09s6ralv_test.go:84:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzz99aa8l_test.go:107:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4smpimle_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x))[shift:]\
    \ + strconv.Itoa(x))\n    }\n    return strconv.Itoa(int(strconv.Itoa(x))[:shift]\
    \ + strconv.Itoa(x))\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ith0tl4_test.go:18:20: undefined: strconv

    /tmp/tmp2ith0tl4_test.go:19:16: undefined: strconv

    /tmp/tmp2ith0tl4_test.go:21:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprlc4dlpk_test.go:21:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmprlc4dlpk_test.go:22:36: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4smpimle_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    if x < 0 {\n        x = 10 * shift - x\n    }\n    x /= 10 * shift\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= 10\n    x /= 10\n    x += 1\n    x %= 10\n    x /= 10\n\
    \    x += 1\n    x %= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9wej1cyf_test.go:125:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for shift > 0 {\n        shift -= len(strconv.Itoa(x))\n        s += x[len(strconv.Itoa(x))\
    \ : len(strconv.Itoa(x))+shift]\n        x = int(x)\n    }\n    return s\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ze7v1gq_test.go:18:22: undefined: strconv

    /tmp/tmp2ze7v1gq_test.go:19:14: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits\
    \ = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\"\
    , digits[shift:])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpgo2scy16_test.go:49: expected '001', got '[1 0 0 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpgo2scy16_test.go:49:\
    \ expected '12', got '[0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpgo2scy16_test.go:49: expected '79', got '[0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpgo2scy16_test.go:49: expected '21', got '[1 0]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpgo2scy16_test.go:49: expected '11', got '[0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwf5imfl_test.go:18:20: undefined: strconv

    /tmp/tmpgwf5imfl_test.go:19:16: undefined: strconv

    /tmp/tmpgwf5imfl_test.go:19:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmpgwf5imfl_test.go:21:12: undefined: strconv

    /tmp/tmpgwf5imfl_test.go:21:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074852
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpemm5pc29_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift\
    \ > len(digits) {\n        shift = len(digits)\n    }\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj4q36sub_test.go:117:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj_2v0djc_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4smpimle_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo_os7y_r_test.go:21:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n \
    \       x /= 10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\", x)\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmp9f8x9lk8_test.go:44: expected '12', got '21'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmp9f8x9lk8_test.go:44: expected\
    \ '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp9f8x9lk8_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s := make([]int,\
    \ len(x))\n    copy(s, x)\n    for i := len(s) - 1; i >= shift; i-- {\n      \
    \  s[i] = s[i-1]\n    }\n    s[shift] = 0\n    return fmt.Sprintf(\"%v\", s)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdoytp6an_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpdoytp6an_test.go:19:26: invalid argument: x (variable of type int) for
    len

    /tmp/tmpdoytp6an_test.go:20:10: invalid argument: copy expects slice arguments;
    found s (variable of type []int) and x (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074856
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7pobzds_test.go:18:20: undefined: strconv

    /tmp/tmpp7pobzds_test.go:19:16: undefined: strconv

    /tmp/tmpp7pobzds_test.go:19:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmpp7pobzds_test.go:21:12: undefined: strconv

    /tmp/tmpp7pobzds_test.go:21:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result :=\
    \ \"\"\n    shift %= len(strconv.Itoa(x))\n    if shift > 0 {\n        for i :=\
    \ len(strconv.Itoa(x)); i > shift; i-- {\n            result = strconv.Itoa(x%10)\
    \ + result\n            x /= 10\n        }\n    } else {\n        for i := len(strconv.Itoa(x));\
    \ i < -shift; i++ {\n            result = strconv.Itoa(x%10) + result\n      \
    \      x /= 10\n        }\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiswobzrz_test.go:17:18: undefined: strconv

    /tmp/tmpiswobzrz_test.go:19:22: undefined: strconv

    /tmp/tmpiswobzrz_test.go:20:22: undefined: strconv

    /tmp/tmpiswobzrz_test.go:24:22: undefined: strconv

    /tmp/tmpiswobzrz_test.go:25:22: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp54eus7pb_test.go:39: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp54eus7pb_test.go:39: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp54eus7pb_test.go:39: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp54eus7pb_test.go:39: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp54eus7pb_test.go:39: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<=\
    \ shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<=\
    \ shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<=\
    \ shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n   \
    \ x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(digits)\n    x <<= shift\n    x %= 10\n    shift %= len(digits)\n    x <<=\
    \ shift\n    x %= 10\n    shift %= len(digits)\n    x <<= shift\n    x %= 10\n\
    \    shift %= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppvdkg8rd_test.go:102:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s := make([]int,\
    \ len(x))\n    copy(s, x)\n    for i := len(s) - 1; i >= shift; i-- {\n      \
    \  s[i] = s[i-1]\n    }\n    s[shift] = 0\n    return fmt.Sprintf(\"%v\", s)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdoytp6an_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpdoytp6an_test.go:19:26: invalid argument: x (variable of type int) for
    len

    /tmp/tmpdoytp6an_test.go:20:10: invalid argument: copy expects slice arguments;
    found s (variable of type []int) and x (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074856
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnwee89w9_test.go:17:18: undefined: strconv

    /tmp/tmpnwee89w9_test.go:18:20: undefined: strconv

    /tmp/tmpnwee89w9_test.go:19:21: undefined: strconv

    /tmp/tmpnwee89w9_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    n := len(strconv.Itoa(x))\n    if shift > n {\n        shift = n - shift\n\
    \    }\n    for i := 0; i < shift; i++ {\n        s += x%10\n        x /= 10\n\
    \    }\n    for i := shift; i < n; i++ {\n        s += x%10\n        x /= 10\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmzfn9o3n_test.go:17:14: undefined: strconv

    /tmp/tmpmzfn9o3n_test.go:22:9: invalid operation: s += x % 10 (mismatched types
    string and int)

    /tmp/tmpmzfn9o3n_test.go:26:9: invalid operation: s += x % 10 (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x) + strconv.Itoa(10-x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9lidre8d_test.go:17:20: undefined: strconv

    /tmp/tmp9lidre8d_test.go:18:16: undefined: strconv

    /tmp/tmp9lidre8d_test.go:22:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %=\
    \ 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n  \
    \  x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>=\
    \ 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n   \
    \ shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    shift >>= 0\n    x %= 10\n    shift %= \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdklcreq0_test.go:90:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpah8dt2hw_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift\
    \ %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cj5z6n0_test.go:110:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpt3tp9b7k_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpt3tp9b7k_test.go:40: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpt3tp9b7k_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpt3tp9b7k_test.go:40: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpt3tp9b7k_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n   \
    \ x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n  \
    \  x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x\
    \ >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n   \
    \ x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n  \
    \  x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x\
    \ >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n   \
    \ x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n  \
    \  x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    \n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmparsihuqk_test.go:110:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074857
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x %= 10\n    return\
    \ string(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpuab2l1x0_test.go:18:20: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpuab2l1x0_test.go:19:21: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpuab2l1x0_test.go:25:12: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp09s6ralv_test.go:84:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return\
    \ strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpszn4890z_test.go:17:20: undefined: strconv

    /tmp/tmpszn4890z_test.go:18:21: undefined: strconv

    /tmp/tmpszn4890z_test.go:20:18: undefined: strconv

    /tmp/tmpszn4890z_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwvk5rmia_test.go:17:20: undefined: strconv

    /tmp/tmpwvk5rmia_test.go:18:21: undefined: strconv

    /tmp/tmpwvk5rmia_test.go:22:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return\
    \ strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ehgwlgg_test.go:17:20: undefined: strconv

    /tmp/tmp1ehgwlgg_test.go:18:21: undefined: strconv

    /tmp/tmp1ehgwlgg_test.go:20:18: undefined: strconv

    /tmp/tmp1ehgwlgg_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp54eus7pb_test.go:39: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp54eus7pb_test.go:39: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp54eus7pb_test.go:39: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp54eus7pb_test.go:39: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp54eus7pb_test.go:39: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    shift /= 10\n    x <<= shift\n    x %= 10\n\
    \    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn_f83i1z_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x >>= shift\n    shift /= 10\n    for i := 0; i < shift; i++\
    \ {\n        x = 10*x + x\n    }\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu_vrougi_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdhm4765_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n \
    \       x = x << 1\n    }\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjq5l4ibn_test.go:18:20: undefined: strconv

    /tmp/tmpjq5l4ibn_test.go:19:21: undefined: strconv

    /tmp/tmpjq5l4ibn_test.go:26:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmpt3g82c8w_test.go:16\n\
    command-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpt3g82c8w_test.go:33\
    \ +0x11a\ntesting.tRunner(0xc0000cc680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprlc4dlpk_test.go:21:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmprlc4dlpk_test.go:22:36: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    result := \"\"\n    shift %= len(digits)\n\
    \    for i := 0; i < shift; i++ {\n        result = digits[len(digits)-1-i] +\
    \ result\n    }\n    for i := 0; i < len(digits)-shift; i++ {\n        result\
    \ = digits[i] + result\n    }\n    return result + digits[len(digits)-shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5tv_e8q3_test.go:20:18: invalid operation: digits[len(digits) - 1 - i]
    + result (mismatched types int and string)

    /tmp/tmp5tv_e8q3_test.go:23:18: invalid operation: digits[i] + result (mismatched
    types int and string)

    /tmp/tmp5tv_e8q3_test.go:25:12: invalid operation: result + digits[len(digits)
    - shift] (mismatched types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074900
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift <<= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv7g1g15q_test.go:76:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074899
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n   \
    \ shift %= 10\n    if shift \nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfey9_0_8_test.go:89:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpom8w806j_test.go:43: expected '001', got '[101 1 1]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpom8w806j_test.go:43:\
    \ expected '12', got '[13 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpom8w806j_test.go:43: expected '79', got '[98 1 1 1 1 1 1\
    \ 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpom8w806j_test.go:43:\
    \ expected '21', got '[13 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmpom8w806j_test.go:43: expected '11', got '[12 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\
    \ 1 1 1 1 1 1 1 1 1 1 1 1 1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        if x < 0 {\n            s += \"-\"\
    \n            x = -x\n        }\n        s += fmt.Sprintf(\"%d\", x%10)\n    \
    \    x = x/10\n    }\n    if shift > len(s) {\n        for i := len(s) - 1; i\
    \ >= shift; i-- {\n            s += \"0\"\n        }\n    }\n    return s\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpo2igp68__test.go:50: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpo2igp68__test.go:50: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmpo2igp68__test.go:50: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpo2igp68__test.go:50: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpo2igp68__test.go:50: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074902
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n\
    \        digits[i] = (digits[i] - '0') << shift\n        shift -= len(strconv.Itoa(x%10))\n\
    \        x /= 10\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps2w4bo1c_test.go:16:31: undefined: strconv

    /tmp/tmps2w4bo1c_test.go:19:22: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    x += '0'\n    x += \"0\"\n    return\
    \ strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpasrghgo4_test.go:18:20: undefined: strconv

    /tmp/tmpasrghgo4_test.go:19:21: undefined: strconv

    /tmp/tmpasrghgo4_test.go:24:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmpasrghgo4_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n \
    \       x /= 10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\", x)\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmp9f8x9lk8_test.go:44: expected '12', got '21'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmp9f8x9lk8_test.go:44: expected\
    \ '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp9f8x9lk8_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result := \"\"\
    \n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%v%v\", result,\
    \ x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%v%v\", result, x%10)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp80htmk4h_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1\
    \ << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %=\
    \ (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x\
    \ %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n \
    \   x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n\
    \    x %= (1 << shift)\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplrnxmv4x_test.go:90:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074851
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    x %= 10\n    for i := 0; i < shift; i++ {\n        s += string(x)\n    \
    \    x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpafrmhmil_test.go:19:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074856
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n\
    \        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        shift = len(x) - shift\n  \
    \  }\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x +=\
    \ 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n  \
    \  x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n\
    \    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x +=\
    \ 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n  \
    \  x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x\
    \ %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>=\
    \ shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n\
    \    x += 10\n    x %= 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %=\
    \ 10\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    x >>= \nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfr3s7bfb_test.go:114:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074901
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1wbkssy_test.go:18:20: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:19:22: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        return string(x)[shift:]\
    \ + string(x)[:shift]\n    }\n    return string(x)[shift:] + string(x)[:shift]\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpqvz5rp1m_test.go:18:20: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpqvz5rp1m_test.go:19:16: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpqvz5rp1m_test.go:19:36: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpqvz5rp1m_test.go:21:12: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpqvz5rp1m_test.go:21:32: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpvm5fjsn8_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpvm5fjsn8_test.go:43: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpvm5fjsn8_test.go:43: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpvm5fjsn8_test.go:43: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpvm5fjsn8_test.go:43: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int,\
    \ len(x))\n    copy(digits, x)\n    for i := 0; i < shift; i++ {\n        digits[i%len(x)]\
    \ ^= digits[i%len(x)] >> 1\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkku5ndqp_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpkku5ndqp_test.go:19:31: invalid argument: x (variable of type int) for
    len

    /tmp/tmpkku5ndqp_test.go:20:10: invalid argument: copy expects slice arguments;
    found digits (variable of type []int) and x (variable of type int)

    /tmp/tmpkku5ndqp_test.go:22:22: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    x %= 10\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%d%s\"\
    , x, s)\n        x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp3troebvd_test.go:42: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp3troebvd_test.go:42: expected\
    \ '12', got '02'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmp3troebvd_test.go:42: expected '79', got '00000007'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp3troebvd_test.go:42: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp3troebvd_test.go:42: expected\
    \ '11', got '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzz99aa8l_test.go:107:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp54eus7pb_test.go:39: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp54eus7pb_test.go:39: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp54eus7pb_test.go:39: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp54eus7pb_test.go:39: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp54eus7pb_test.go:39: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    x /= 10\n    x += \"0\"\n    return\
    \ strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp867e16bs_test.go:18:20: undefined: strconv

    /tmp/tmp867e16bs_test.go:19:21: undefined: strconv

    /tmp/tmp867e16bs_test.go:24:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmp867e16bs_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnu0l3rd_test.go:18:20: undefined: strconv

    /tmp/tmpwnu0l3rd_test.go:19:21: undefined: strconv

    /tmp/tmpwnu0l3rd_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n\
    \        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n \
    \       x = 10*x + 1\n    }\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7ipji38_test.go:18:20: undefined: strconv

    /tmp/tmpq7ipji38_test.go:19:21: undefined: strconv

    /tmp/tmpq7ipji38_test.go:26:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsl5ezcdq_test.go:18:20: undefined: strconv

    /tmp/tmpsl5ezcdq_test.go:19:16: undefined: strconv

    /tmp/tmpsl5ezcdq_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int,\
    \ len(x))\n    for i := 0; i < shift; i++ {\n        digits[i] = x%10\n      \
    \  x = x/10\n    }\n    for i := 0; i < len(x); i++ {\n        digits[i] = x%10\n\
    \        x = x/10\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpb9_d6rci_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpb9_d6rci_test.go:19:31: invalid argument: x (variable of type int) for
    len

    /tmp/tmpb9_d6rci_test.go:24:25: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, len(strconv.Itoa(x)))\n    i := 0\n    for ; i < len(digits); i++\
    \ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for ; i < len(digits)-shift;\
    \ i++ {\n        digits[i] = 0\n    }\n    for ; i < len(digits); i++ {\n    \
    \    digits[i] = digits[i+shift]\n    }\n    return fmt.Sprintf(\"%s\", digits)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfp9pkmtx_test.go:16:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    result := \"\"\n    for i := 0; i < shift; i++ {\n     \
    \   result += string(x)\n        x /= 10\n    }\n    result += string(x)\n   \
    \ return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpc52qe_us_test.go:20:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpc52qe_us_test.go:23:15: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4smpimle_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    for i := len(strconv.Itoa(x)); i > shift; i-- {\n        x = x << 1\n   \
    \     x %= 10\n    }\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyunysc9__test.go:17:18: undefined: strconv

    /tmp/tmpyunysc9__test.go:19:19: undefined: strconv

    /tmp/tmpyunysc9__test.go:20:18: undefined: strconv

    /tmp/tmpyunysc9__test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x))[shift:])\
    \ + strconv.Itoa(int(strconv.Itoa(x))[:shift])\n    }\n    return strconv.Itoa(int(strconv.Itoa(x))[:shift])\
    \ + strconv.Itoa(int(strconv.Itoa(x))[shift:])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkwoa_g3_test.go:18:20: undefined: strconv

    /tmp/tmppkwoa_g3_test.go:19:16: undefined: strconv

    /tmp/tmppkwoa_g3_test.go:21:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    return strconv.Itoa(x) + strconv.Itoa(int(x)%10)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1jm2c71i_test.go:17:20: undefined: strconv

    /tmp/tmp1jm2c71i_test.go:18:16: undefined: strconv

    /tmp/tmp1jm2c71i_test.go:20:18: undefined: strconv

    /tmp/tmp1jm2c71i_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074814
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprl_3ose7_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= 10\n    x /= 10\n    x %= 10\n    x\
    \ /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n   \
    \ x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n \
    \   x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n\
    \    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpa9bo9uqq_test.go:118:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprl_3ose7_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift\
    \ < 0 {\n        shift += len(digits)\n    }\n    x %= 10\n    x /= 10\n    x\
    \ %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n   \
    \ x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n \
    \   x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n\
    \    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprumo72nb_test.go:117:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    x\
    \ <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdhm4765_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result := \"\"\
    \n    for i := 0; i < shift; i++ {\n        result += \"0\"\n    }\n    for i\
    \ := len(x) - 1; i >= shift; i-- {\n        result += x[i]\n    }\n    return\
    \ result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpprabz1x7_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpprabz1x7_test.go:23:18: invalid argument: x (variable of type int) for
    len

    /tmp/tmpprabz1x7_test.go:24:20: invalid operation: cannot index x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x >>= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnuqyy1g7_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074860
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzz99aa8l_test.go:107:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    if x < 10 {\n        x += \"0\"\n    }\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77hjle69_test.go:21:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmp77hjle69_test.go:23:9: invalid operation: x += "0" (mismatched types int
    and untyped string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = s + x%10\n        x = x/10\n \
    \   }\n    if x > 0 {\n        s = s + x%10\n        x = x/10\n    }\n    return\
    \ s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp58gfocum_test.go:18:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    /tmp/tmp58gfocum_test.go:22:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074860
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n\
    \    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40:\
    \ expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97\
    \ 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n      \
    \  tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11\
    \ 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074808
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwnu0l3rd_test.go:18:20: undefined: strconv

    /tmp/tmpwnu0l3rd_test.go:19:21: undefined: strconv

    /tmp/tmpwnu0l3rd_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp7kqmjb_i_test.go:41: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp7kqmjb_i_test.go:41: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp7kqmjb_i_test.go:41: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp7kqmjb_i_test.go:41: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp7kqmjb_i_test.go:41: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n\
    \        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1\
    \ << shift)\n    return fmt.Sprintf(\"%0*d\", shift, x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc000078728?, 0x4b3114?)\n\
    \t/tmp/tmp7uvte3zu_test.go:16 +0x106\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\
    \t/tmp/tmp7uvte3zu_test.go:35 +0xde\ntesting.tRunner(0xc00019aea0, 0x527f50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074903
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n\
    \        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type
    string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074804
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1wbkssy_test.go:18:20: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:19:22: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        if x < 0 {\n            s = string([]byte(s[len(s)-1:]))\
    \ + s\n            x <<= 1\n        } else {\n            s = string([]byte(s[:len(s)-1])\
    \ + s) + s\n            x >>= 1\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3ayn7_7t_test.go:22:24: invalid operation: []byte(s[:len(s) - 1]) + s
    (mismatched types []byte and string)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n   \
    \     shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n       \
    \ shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    x\
    \ %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    shift >>= 1\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>=\
    \ 1\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate :=\
    \ circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6utj_62r_test.go:95:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    y\
    \ := x\n    for i := 0; i < shift; i++ {\n        y = y*10 + x\n        x /= 10\n\
    \    }\n    return fmt.Sprintf(\"%v\", y)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp54kvhalq_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074903
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp15sxjo_q_test.go:17:18: undefined: strconv

    /tmp/tmp15sxjo_q_test.go:20:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074852
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\",\
    \ x)\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"\
    %v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7y8er469_test.go:18:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074808
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n\
    \    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift\
    \ >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5kcvi5at_test.go:74:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>=\
    \ shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n\
    \    x >>\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsagkkntw_test.go:102:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074859
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n\
    \    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n\
    \    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(string(x)) {\n        return fmt.Sprintf(\"\
    %v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift >\
    \ len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n\
    \    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        return\
    \ fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x %= 10\n    shift %= 10\n\
    \    if shift > len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n\
    \    x <<= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x))\
    \ {\n        return fmt.Sprintf(\"\nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvpb3v6tj_test.go:103:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074902
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(strconv.Itoa(x/10))\
    \ + int(strconv.Itoa(x%10)))\n    }\n    return strconv.Itoa(x+int(strconv.Itoa(x/10))\
    \ + int(strconv.Itoa(x%10))) + circular_shift(x, shift-1)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgap3mxtm_test.go:17:20: undefined: strconv

    /tmp/tmpgap3mxtm_test.go:18:16: undefined: strconv

    /tmp/tmpgap3mxtm_test.go:20:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x -= shift\n\
    \    x /= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpited_xeb_test.go:18:20: undefined: strconv

    /tmp/tmpited_xeb_test.go:19:16: undefined: strconv

    /tmp/tmpited_xeb_test.go:25:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n\
    \        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ x%10)\n        x /= 10\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\n\
    func TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpq2k0w5ac_test.go:45: expected '001', got '[0 0 1 0]'\n \
    \   --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpq2k0w5ac_test.go:45:\
    \ expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2\
    \ (0.00s)\n        tmpq2k0w5ac_test.go:45: expected '79', got '[7 9 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpq2k0w5ac_test.go:45: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4\
    \ (0.00s)\n        tmpq2k0w5ac_test.go:45: expected '11', got '[1 1 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x /= 10\n   \
    \ x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp09emz2k0_test.go:17:18: undefined: strconv

    /tmp/tmp09emz2k0_test.go:18:20: undefined: strconv

    /tmp/tmp09emz2k0_test.go:19:21: undefined: strconv

    /tmp/tmp09emz2k0_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift\
    \ /= 10\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    return\
    \ fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3eq1fukz_test.go:16:20: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n \
    \       x = x/10\n    }\n    if shift > len(s) {\n        for i := len(s) - 1;\
    \ i >= shift; i-- {\n            s += fmt.Sprintf(\"%d\", x%10)\n            x\
    \ = x/10\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp9w4_6dvx_test.go:47: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp9w4_6dvx_test.go:47: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmp9w4_6dvx_test.go:47: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp9w4_6dvx_test.go:47: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp9w4_6dvx_test.go:47: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074904
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift\
    \ %= len(x)\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\",\
    \ x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptqh6m8oc_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmptqh6m8oc_test.go:20:18: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    x\
    \ += \"0\"\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3314ql1d_test.go:17:20: undefined: strconv

    /tmp/tmp3314ql1d_test.go:18:21: undefined: strconv

    /tmp/tmp3314ql1d_test.go:20:18: undefined: strconv

    /tmp/tmp3314ql1d_test.go:23:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmp3314ql1d_test.go:24:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result :=\
    \ \"\"\n    for shift > 0 {\n        digit, shift := x%10, shift-1\n        result\
    \ += string(digit)\n        x = x/10\n    }\n    if shift > 0 {\n        digit,\
    \ shift := x%10, shift-1\n        result += string(digit)\n    }\n    return result\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp15jzq3se_test.go:18:16: shift declared but not used

    /tmp/tmp15jzq3se_test.go:23:16: shift declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s = s + x%10\n        x = x/10\n \
    \   }\n    if x > 0 {\n        s = s + x%10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp293b_60b_test.go:18:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    /tmp/tmp293b_60b_test.go:22:13: invalid operation: s + x % 10 (mismatched types
    string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074855
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range\
    \ [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x2)\n\t/tmp/tmptpmty9m4_test.go:21\
    \ +0x11e\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmptpmty9m4_test.go:33\
    \ +0x4b\ntesting.tRunner(0xc0000cc4e0, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result :=\
    \ \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := 0; i < shift; i++ {\n\
    \        result = strconv.Itoa(x%10) + result\n        x /= 10\n    }\n    for\
    \ i := 0; i < len(strconv.Itoa(x)); i++ {\n        result = strconv.Itoa(x%10)\
    \ + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi5ig_4rb_test.go:17:18: undefined: strconv

    /tmp/tmpi5ig_4rb_test.go:19:18: undefined: strconv

    /tmp/tmpi5ig_4rb_test.go:22:25: undefined: strconv

    /tmp/tmpi5ig_4rb_test.go:23:18: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      return strconv.Itoa(int(x)-int(x))\n    }\n    return strconv.Itoa(int(x)+int(x))\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmps9nf2amz_test.go:17:18: undefined: strconv

    /tmp/tmps9nf2amz_test.go:18:20: undefined: strconv

    /tmp/tmps9nf2amz_test.go:19:16: undefined: strconv

    /tmp/tmps9nf2amz_test.go:21:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmpt3g82c8w_test.go:16\n\
    command-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpt3g82c8w_test.go:33\
    \ +0x11a\ntesting.tRunner(0xc0000cc680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n\
    \    for i := 0; i < shift; i++ {\n        x = x * 10 + x\n    }\n    return strconv.Itoa(x)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz5igv94p_test.go:17:18: undefined: strconv

    /tmp/tmpz5igv94p_test.go:18:20: undefined: strconv

    /tmp/tmpz5igv94p_test.go:19:21: undefined: strconv

    /tmp/tmpz5igv94p_test.go:26:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074852
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected\
    \ '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n \
    \       x = x/10\n    }\n    if shift > len(s) {\n        for i := len(s) - 1;\
    \ i >= shift; i-- {\n            s += fmt.Sprintf(\"%d\", x%10)\n            x\
    \ = x/10\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp9w4_6dvx_test.go:47: expected '001', got '00'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp9w4_6dvx_test.go:47: expected\
    \ '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n     \
    \   tmp9w4_6dvx_test.go:47: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp9w4_6dvx_test.go:47: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp9w4_6dvx_test.go:47: expected\
    \ '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074904
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    shift %= len(strconv.Itoa(x))\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /=\
    \ 10\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw_w_3q5o_test.go:116:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if\
    \ shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift\
    \ > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x\
    \ >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n  \
    \      shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n   \
    \ shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n     \
    \   shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift\
    \ %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift\
    \ = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp09s6ralv_test.go:84:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    x /= 10\n    shift /= 10\n    result := \"\"\n    for i := 0; i <\
    \ shift; i++ {\n        result = strconv.Itoa(x) + result\n        x /= 10\n \
    \   }\n    return strconv.Itoa(x) + result\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5sj0jg2z_test.go:18:20: undefined: strconv

    /tmp/tmp5sj0jg2z_test.go:19:16: undefined: strconv

    /tmp/tmp5sj0jg2z_test.go:25:18: undefined: strconv

    /tmp/tmp5sj0jg2z_test.go:28:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprlc4dlpk_test.go:21:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmprlc4dlpk_test.go:22:36: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n\
    \    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp1wbkssy_test.go:18:20: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:19:22: undefined: strconv

    /tmp/tmpp1wbkssy_test.go:23:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074807
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:len(strconv.Itoa(x)-shift)])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphfsq0s6e_test.go:18:20: undefined: strconv

    /tmp/tmphfsq0s6e_test.go:19:16: undefined: strconv

    /tmp/tmphfsq0s6e_test.go:19:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmphfsq0s6e_test.go:21:12: undefined: strconv

    /tmp/tmphfsq0s6e_test.go:21:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ make([]int, len(strconv.Itoa(x)))\n    copy(digits, strconv.Itoa(x))\n    for\
    \ i := len(digits); shift > 0; shift-- {\n        digits[len(digits)-1], digits[shift]\
    \ = digits[shift], digits[len(digits)-1]\n    }\n    return string(digits)\n}\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeurno3yi_test.go:16:31: undefined: strconv

    /tmp/tmpeurno3yi_test.go:17:18: undefined: strconv

    /tmp/tmpeurno3yi_test.go:18:9: i declared but not used

    /tmp/tmpeurno3yi_test.go:21:19: cannot convert digits (variable of type []int)
    to type string

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\
    \ + strconv.Itoa(10-x)\n    }\n    x -= shift\n    x /= 10\n    x -= shift\n \
    \   x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n  \
    \  x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -=\
    \ shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n\
    \    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt5zq1frr_test.go:116:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074856
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    ---\
    \ FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40:\
    \ expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n\
    \        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074809
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\
    \n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprlc4dlpk_test.go:21:5: invalid operation: x += "0" (mismatched types int
    and untyped string)

    /tmp/tmprlc4dlpk_test.go:22:36: invalid argument: x (variable of type int) for
    len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_1mc55t4_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp_1mc55t4_test.go:43: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp_1mc55t4_test.go:43: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp_1mc55t4_test.go:43: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp_1mc55t4_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n\
    \    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n\
    \    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n\
    \    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc\
    \ TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzz99aa8l_test.go:107:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074813
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift\
    \ %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %=\
    \ len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\
    \    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /=\
    \ 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n   \
    \ shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_cj5z6n0_test.go:110:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074806
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n\
    \    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10\
    \ * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\
    \    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10\
    \ * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpep9gf5yz_test.go:81:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n\
    \    }\n    x -= int(x)\n    x /= 10\n    shift /= 10\n    x %= 10\n    x += (10\
    \ - shift)\n    x /= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp50rwm0___test.go:18:20: undefined: strconv

    /tmp/tmp50rwm0___test.go:19:16: undefined: strconv

    /tmp/tmp50rwm0___test.go:27:12: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n\
    \    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp_1mc55t4_test.go:43: expected '001', got '0'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp_1mc55t4_test.go:43: expected\
    \ '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp_1mc55t4_test.go:43: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp_1mc55t4_test.go:43: expected '21', got '2'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp_1mc55t4_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074810
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    shift %= len(digits)\n    if shift\
    \ > len(digits) {\n        shift = len(digits)\n    }\n    result := \"\"\n  \
    \  for i := 0; i < shift; i++ {\n        result = digits[len(digits)-i-1] + result\n\
    \    }\n    return result + digits[x]\n}\n\nfunc TestCircular_Shift(t *testing.T)\
    \ {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpusyd8fbw_test.go:23:18: invalid operation: digits[len(digits) - i - 1]
    + result (mismatched types int and string)

    /tmp/tmpusyd8fbw_test.go:25:12: invalid operation: result + digits[x] (mismatched
    types string and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074904
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n      \
    \  tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3\
    \ (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected\
    \ '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074812
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1\
    \ << shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x4b3114?)\n\
    \t/tmp/tmp0iq90frd_test.go:16 +0xe5\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\
    \t/tmp/tmp0iq90frd_test.go:35 +0xde\ntesting.tRunner(0xc0000da340, 0x527f50)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift\
    \ > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s := make([]int,\
    \ len(x))\n    copy(s, x)\n    for i := len(s) - 1; i >= shift; i-- {\n      \
    \  s[i] = s[i-1]\n    }\n    s[shift] = 0\n    return fmt.Sprintf(\"%v\", s)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdoytp6an_test.go:16:20: invalid argument: x (variable of type int) for
    len

    /tmp/tmpdoytp6an_test.go:19:26: invalid argument: x (variable of type int) for
    len

    /tmp/tmpdoytp6an_test.go:20:10: invalid argument: copy expects slice arguments;
    found s (variable of type []int) and x (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074856
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwf5imfl_test.go:18:20: undefined: strconv

    /tmp/tmpgwf5imfl_test.go:19:16: undefined: strconv

    /tmp/tmpgwf5imfl_test.go:19:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmpgwf5imfl_test.go:21:12: undefined: strconv

    /tmp/tmpgwf5imfl_test.go:21:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074852
- exit_code: 2
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x))\
    \ - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n\
    }\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7pobzds_test.go:18:20: undefined: strconv

    /tmp/tmpp7pobzds_test.go:19:16: undefined: strconv

    /tmp/tmpp7pobzds_test.go:19:29: invalid operation: cannot slice x (variable of
    type int)

    /tmp/tmpp7pobzds_test.go:21:12: undefined: strconv

    /tmp/tmpp7pobzds_test.go:21:25: invalid operation: cannot slice x (variable of
    type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074803
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmpt3g82c8w_test.go:16\n\
    command-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpt3g82c8w_test.go:33\
    \ +0x11a\ntesting.tRunner(0xc0000cc680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    x >>= shift\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmp5wawrupf_test.go:16\n\
    command-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp5wawrupf_test.go:34\
    \ +0x11a\ntesting.tRunner(0xc0000da1a0, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074904
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\
    \n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n \
    \       x /= 10\n    }\n    if x > 0 {\n        s += fmt.Sprintf(\"%d\", x)\n\
    \    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate\
    \ := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected:\
    \ \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual:\
    \ candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected:\
    \ \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__1\
    \ (0.00s)\n        tmp9f8x9lk8_test.go:44: expected '12', got '21'\n    --- FAIL:\
    \ TestCircular_Shift/test_num__2 (0.00s)\n        tmp9f8x9lk8_test.go:44: expected\
    \ '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n\
    \        tmp9f8x9lk8_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074901
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 <<\
    \ shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n\
    \     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97,\
    \ 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n\
    \     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide\
    \ by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmpt3g82c8w_test.go:16\n\
    command-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpt3g82c8w_test.go:33\
    \ +0x11a\ntesting.tRunner(0xc0000cc680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074853
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x))\
    \ {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\
    \    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\
    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual:\
    \ candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected:\
    \ \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual:\
    \ candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo3o1xz43_test.go:93:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074805
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n\
    \    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n\
    \    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %=\
    \ len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n\
    \    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n\
    \  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100,\
    \ 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\"\
    \ },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12,\
    \ 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj_2v0djc_test.go:87:6: expected ''('', found TestCircular_Shift

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074802
- exit_code: 1
  program: "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Circular shift the digits of the integer x, shift the digits right by\
    \ shift\n// and return the result as a string.\n// If shift > number of digits,\
    \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
    \ 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits :=\
    \ []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits,\
    \ 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+digits[i+1]\n\
    \    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t\
    \ *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected:\
    \ \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual:\
    \ candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected:\
    \ \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: index out of\
    \ range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range\
    \ [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x2)\n\t/tmp/tmptpmty9m4_test.go:21\
    \ +0x11e\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmptpmty9m4_test.go:33\
    \ +0x4b\ntesting.tRunner(0xc0000cc4e0, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074904
